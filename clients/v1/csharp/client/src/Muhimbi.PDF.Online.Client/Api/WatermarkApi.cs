/* 
 * Muhimbi PDF
 *
 * Convert, Merge, Watermark, Secure and OCR files.
 *
 * OpenAPI spec version: 9.16
 * Contact: support@muhimbi.com
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using RestSharp;
using Muhimbi.PDF.Online.Client.Client;
using Muhimbi.PDF.Online.Client.Model;

namespace Muhimbi.PDF.Online.Client.Api
{
    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IWatermarkApi : IApiAccessor
    {
        #region Synchronous Operations
        /// <summary>
        /// Add composite watermark
        /// </summary>
        /// <remarks>
        /// Add a complex watermark to a PDF file.
        /// </remarks>
        /// <exception cref="Muhimbi.PDF.Online.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="inputData"></param>
        /// <returns>OperationResponse</returns>
        OperationResponse CompositeWatermark (CompositeWatermarkData inputData);

        /// <summary>
        /// Add composite watermark
        /// </summary>
        /// <remarks>
        /// Add a complex watermark to a PDF file.
        /// </remarks>
        /// <exception cref="Muhimbi.PDF.Online.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="inputData"></param>
        /// <returns>ApiResponse of OperationResponse</returns>
        ApiResponse<OperationResponse> CompositeWatermarkWithHttpInfo (CompositeWatermarkData inputData);
        /// <summary>
        /// Add ellipse watermark
        /// </summary>
        /// <remarks>
        /// Add an ellipse watermark to a PDF file.
        /// </remarks>
        /// <exception cref="Muhimbi.PDF.Online.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="inputData"></param>
        /// <returns>OperationResponse</returns>
        OperationResponse EllipseWatermark (EllipseWatermarkData inputData);

        /// <summary>
        /// Add ellipse watermark
        /// </summary>
        /// <remarks>
        /// Add an ellipse watermark to a PDF file.
        /// </remarks>
        /// <exception cref="Muhimbi.PDF.Online.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="inputData"></param>
        /// <returns>ApiResponse of OperationResponse</returns>
        ApiResponse<OperationResponse> EllipseWatermarkWithHttpInfo (EllipseWatermarkData inputData);
        /// <summary>
        /// Add image watermark
        /// </summary>
        /// <remarks>
        /// Add an image based watermark to a PDF file.
        /// </remarks>
        /// <exception cref="Muhimbi.PDF.Online.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="inputData"></param>
        /// <returns>OperationResponse</returns>
        OperationResponse ImageWatermark (ImageWatermarkData inputData);

        /// <summary>
        /// Add image watermark
        /// </summary>
        /// <remarks>
        /// Add an image based watermark to a PDF file.
        /// </remarks>
        /// <exception cref="Muhimbi.PDF.Online.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="inputData"></param>
        /// <returns>ApiResponse of OperationResponse</returns>
        ApiResponse<OperationResponse> ImageWatermarkWithHttpInfo (ImageWatermarkData inputData);
        /// <summary>
        /// Add line watermark
        /// </summary>
        /// <remarks>
        /// Add a line watermark to a PDF file.
        /// </remarks>
        /// <exception cref="Muhimbi.PDF.Online.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="inputData"></param>
        /// <returns>OperationResponse</returns>
        OperationResponse LineWatermark (LineWatermarkData inputData);

        /// <summary>
        /// Add line watermark
        /// </summary>
        /// <remarks>
        /// Add a line watermark to a PDF file.
        /// </remarks>
        /// <exception cref="Muhimbi.PDF.Online.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="inputData"></param>
        /// <returns>ApiResponse of OperationResponse</returns>
        ApiResponse<OperationResponse> LineWatermarkWithHttpInfo (LineWatermarkData inputData);
        /// <summary>
        /// Add Linear Barcode watermark
        /// </summary>
        /// <remarks>
        /// Add a Linear Barcode watermark to a PDF file.
        /// </remarks>
        /// <exception cref="Muhimbi.PDF.Online.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="inputData"></param>
        /// <returns>OperationResponse</returns>
        OperationResponse LinearBarcodeWatermark (LinearBarcodeWatermarkData inputData);

        /// <summary>
        /// Add Linear Barcode watermark
        /// </summary>
        /// <remarks>
        /// Add a Linear Barcode watermark to a PDF file.
        /// </remarks>
        /// <exception cref="Muhimbi.PDF.Online.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="inputData"></param>
        /// <returns>ApiResponse of OperationResponse</returns>
        ApiResponse<OperationResponse> LinearBarcodeWatermarkWithHttpInfo (LinearBarcodeWatermarkData inputData);
        /// <summary>
        /// Add PDF watermark
        /// </summary>
        /// <remarks>
        /// Add a PDF based watermark to a PDF file.
        /// </remarks>
        /// <exception cref="Muhimbi.PDF.Online.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="inputData"></param>
        /// <returns>OperationResponse</returns>
        OperationResponse PdfWatermark (PdfWatermarkData inputData);

        /// <summary>
        /// Add PDF watermark
        /// </summary>
        /// <remarks>
        /// Add a PDF based watermark to a PDF file.
        /// </remarks>
        /// <exception cref="Muhimbi.PDF.Online.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="inputData"></param>
        /// <returns>ApiResponse of OperationResponse</returns>
        ApiResponse<OperationResponse> PdfWatermarkWithHttpInfo (PdfWatermarkData inputData);
        /// <summary>
        /// Add QR Code watermark
        /// </summary>
        /// <remarks>
        /// Add a QR Code watermark to a PDF file.
        /// </remarks>
        /// <exception cref="Muhimbi.PDF.Online.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="inputData"></param>
        /// <returns>OperationResponse</returns>
        OperationResponse QrCodeWatermark (QrCodeWatermarkData inputData);

        /// <summary>
        /// Add QR Code watermark
        /// </summary>
        /// <remarks>
        /// Add a QR Code watermark to a PDF file.
        /// </remarks>
        /// <exception cref="Muhimbi.PDF.Online.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="inputData"></param>
        /// <returns>ApiResponse of OperationResponse</returns>
        ApiResponse<OperationResponse> QrCodeWatermarkWithHttpInfo (QrCodeWatermarkData inputData);
        /// <summary>
        /// Add rectangle watermark
        /// </summary>
        /// <remarks>
        /// Add a rectangle watermark to a PDF file.
        /// </remarks>
        /// <exception cref="Muhimbi.PDF.Online.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="inputData"></param>
        /// <returns>OperationResponse</returns>
        OperationResponse RectangleWatermark (RectangleWatermarkData inputData);

        /// <summary>
        /// Add rectangle watermark
        /// </summary>
        /// <remarks>
        /// Add a rectangle watermark to a PDF file.
        /// </remarks>
        /// <exception cref="Muhimbi.PDF.Online.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="inputData"></param>
        /// <returns>ApiResponse of OperationResponse</returns>
        ApiResponse<OperationResponse> RectangleWatermarkWithHttpInfo (RectangleWatermarkData inputData);
        /// <summary>
        /// Add RTF watermark
        /// </summary>
        /// <remarks>
        /// Add a rich-text watermark to a PDF file.
        /// </remarks>
        /// <exception cref="Muhimbi.PDF.Online.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="inputData"></param>
        /// <returns>OperationResponse</returns>
        OperationResponse RtfWatermark (RtfWatermarkData inputData);

        /// <summary>
        /// Add RTF watermark
        /// </summary>
        /// <remarks>
        /// Add a rich-text watermark to a PDF file.
        /// </remarks>
        /// <exception cref="Muhimbi.PDF.Online.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="inputData"></param>
        /// <returns>ApiResponse of OperationResponse</returns>
        ApiResponse<OperationResponse> RtfWatermarkWithHttpInfo (RtfWatermarkData inputData);
        /// <summary>
        /// Add text watermark
        /// </summary>
        /// <remarks>
        /// Add a plain-text watermark to a PDF file.
        /// </remarks>
        /// <exception cref="Muhimbi.PDF.Online.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="inputData"></param>
        /// <returns>OperationResponse</returns>
        OperationResponse TextWatermark (TextWatermarkData inputData);

        /// <summary>
        /// Add text watermark
        /// </summary>
        /// <remarks>
        /// Add a plain-text watermark to a PDF file.
        /// </remarks>
        /// <exception cref="Muhimbi.PDF.Online.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="inputData"></param>
        /// <returns>ApiResponse of OperationResponse</returns>
        ApiResponse<OperationResponse> TextWatermarkWithHttpInfo (TextWatermarkData inputData);
        #endregion Synchronous Operations
        #region Asynchronous Operations
        /// <summary>
        /// Add composite watermark
        /// </summary>
        /// <remarks>
        /// Add a complex watermark to a PDF file.
        /// </remarks>
        /// <exception cref="Muhimbi.PDF.Online.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="inputData"></param>
        /// <returns>Task of OperationResponse</returns>
        System.Threading.Tasks.Task<OperationResponse> CompositeWatermarkAsync (CompositeWatermarkData inputData);

        /// <summary>
        /// Add composite watermark
        /// </summary>
        /// <remarks>
        /// Add a complex watermark to a PDF file.
        /// </remarks>
        /// <exception cref="Muhimbi.PDF.Online.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="inputData"></param>
        /// <returns>Task of ApiResponse (OperationResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<OperationResponse>> CompositeWatermarkAsyncWithHttpInfo (CompositeWatermarkData inputData);
        /// <summary>
        /// Add ellipse watermark
        /// </summary>
        /// <remarks>
        /// Add an ellipse watermark to a PDF file.
        /// </remarks>
        /// <exception cref="Muhimbi.PDF.Online.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="inputData"></param>
        /// <returns>Task of OperationResponse</returns>
        System.Threading.Tasks.Task<OperationResponse> EllipseWatermarkAsync (EllipseWatermarkData inputData);

        /// <summary>
        /// Add ellipse watermark
        /// </summary>
        /// <remarks>
        /// Add an ellipse watermark to a PDF file.
        /// </remarks>
        /// <exception cref="Muhimbi.PDF.Online.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="inputData"></param>
        /// <returns>Task of ApiResponse (OperationResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<OperationResponse>> EllipseWatermarkAsyncWithHttpInfo (EllipseWatermarkData inputData);
        /// <summary>
        /// Add image watermark
        /// </summary>
        /// <remarks>
        /// Add an image based watermark to a PDF file.
        /// </remarks>
        /// <exception cref="Muhimbi.PDF.Online.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="inputData"></param>
        /// <returns>Task of OperationResponse</returns>
        System.Threading.Tasks.Task<OperationResponse> ImageWatermarkAsync (ImageWatermarkData inputData);

        /// <summary>
        /// Add image watermark
        /// </summary>
        /// <remarks>
        /// Add an image based watermark to a PDF file.
        /// </remarks>
        /// <exception cref="Muhimbi.PDF.Online.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="inputData"></param>
        /// <returns>Task of ApiResponse (OperationResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<OperationResponse>> ImageWatermarkAsyncWithHttpInfo (ImageWatermarkData inputData);
        /// <summary>
        /// Add line watermark
        /// </summary>
        /// <remarks>
        /// Add a line watermark to a PDF file.
        /// </remarks>
        /// <exception cref="Muhimbi.PDF.Online.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="inputData"></param>
        /// <returns>Task of OperationResponse</returns>
        System.Threading.Tasks.Task<OperationResponse> LineWatermarkAsync (LineWatermarkData inputData);

        /// <summary>
        /// Add line watermark
        /// </summary>
        /// <remarks>
        /// Add a line watermark to a PDF file.
        /// </remarks>
        /// <exception cref="Muhimbi.PDF.Online.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="inputData"></param>
        /// <returns>Task of ApiResponse (OperationResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<OperationResponse>> LineWatermarkAsyncWithHttpInfo (LineWatermarkData inputData);
        /// <summary>
        /// Add Linear Barcode watermark
        /// </summary>
        /// <remarks>
        /// Add a Linear Barcode watermark to a PDF file.
        /// </remarks>
        /// <exception cref="Muhimbi.PDF.Online.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="inputData"></param>
        /// <returns>Task of OperationResponse</returns>
        System.Threading.Tasks.Task<OperationResponse> LinearBarcodeWatermarkAsync (LinearBarcodeWatermarkData inputData);

        /// <summary>
        /// Add Linear Barcode watermark
        /// </summary>
        /// <remarks>
        /// Add a Linear Barcode watermark to a PDF file.
        /// </remarks>
        /// <exception cref="Muhimbi.PDF.Online.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="inputData"></param>
        /// <returns>Task of ApiResponse (OperationResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<OperationResponse>> LinearBarcodeWatermarkAsyncWithHttpInfo (LinearBarcodeWatermarkData inputData);
        /// <summary>
        /// Add PDF watermark
        /// </summary>
        /// <remarks>
        /// Add a PDF based watermark to a PDF file.
        /// </remarks>
        /// <exception cref="Muhimbi.PDF.Online.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="inputData"></param>
        /// <returns>Task of OperationResponse</returns>
        System.Threading.Tasks.Task<OperationResponse> PdfWatermarkAsync (PdfWatermarkData inputData);

        /// <summary>
        /// Add PDF watermark
        /// </summary>
        /// <remarks>
        /// Add a PDF based watermark to a PDF file.
        /// </remarks>
        /// <exception cref="Muhimbi.PDF.Online.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="inputData"></param>
        /// <returns>Task of ApiResponse (OperationResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<OperationResponse>> PdfWatermarkAsyncWithHttpInfo (PdfWatermarkData inputData);
        /// <summary>
        /// Add QR Code watermark
        /// </summary>
        /// <remarks>
        /// Add a QR Code watermark to a PDF file.
        /// </remarks>
        /// <exception cref="Muhimbi.PDF.Online.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="inputData"></param>
        /// <returns>Task of OperationResponse</returns>
        System.Threading.Tasks.Task<OperationResponse> QrCodeWatermarkAsync (QrCodeWatermarkData inputData);

        /// <summary>
        /// Add QR Code watermark
        /// </summary>
        /// <remarks>
        /// Add a QR Code watermark to a PDF file.
        /// </remarks>
        /// <exception cref="Muhimbi.PDF.Online.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="inputData"></param>
        /// <returns>Task of ApiResponse (OperationResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<OperationResponse>> QrCodeWatermarkAsyncWithHttpInfo (QrCodeWatermarkData inputData);
        /// <summary>
        /// Add rectangle watermark
        /// </summary>
        /// <remarks>
        /// Add a rectangle watermark to a PDF file.
        /// </remarks>
        /// <exception cref="Muhimbi.PDF.Online.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="inputData"></param>
        /// <returns>Task of OperationResponse</returns>
        System.Threading.Tasks.Task<OperationResponse> RectangleWatermarkAsync (RectangleWatermarkData inputData);

        /// <summary>
        /// Add rectangle watermark
        /// </summary>
        /// <remarks>
        /// Add a rectangle watermark to a PDF file.
        /// </remarks>
        /// <exception cref="Muhimbi.PDF.Online.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="inputData"></param>
        /// <returns>Task of ApiResponse (OperationResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<OperationResponse>> RectangleWatermarkAsyncWithHttpInfo (RectangleWatermarkData inputData);
        /// <summary>
        /// Add RTF watermark
        /// </summary>
        /// <remarks>
        /// Add a rich-text watermark to a PDF file.
        /// </remarks>
        /// <exception cref="Muhimbi.PDF.Online.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="inputData"></param>
        /// <returns>Task of OperationResponse</returns>
        System.Threading.Tasks.Task<OperationResponse> RtfWatermarkAsync (RtfWatermarkData inputData);

        /// <summary>
        /// Add RTF watermark
        /// </summary>
        /// <remarks>
        /// Add a rich-text watermark to a PDF file.
        /// </remarks>
        /// <exception cref="Muhimbi.PDF.Online.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="inputData"></param>
        /// <returns>Task of ApiResponse (OperationResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<OperationResponse>> RtfWatermarkAsyncWithHttpInfo (RtfWatermarkData inputData);
        /// <summary>
        /// Add text watermark
        /// </summary>
        /// <remarks>
        /// Add a plain-text watermark to a PDF file.
        /// </remarks>
        /// <exception cref="Muhimbi.PDF.Online.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="inputData"></param>
        /// <returns>Task of OperationResponse</returns>
        System.Threading.Tasks.Task<OperationResponse> TextWatermarkAsync (TextWatermarkData inputData);

        /// <summary>
        /// Add text watermark
        /// </summary>
        /// <remarks>
        /// Add a plain-text watermark to a PDF file.
        /// </remarks>
        /// <exception cref="Muhimbi.PDF.Online.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="inputData"></param>
        /// <returns>Task of ApiResponse (OperationResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<OperationResponse>> TextWatermarkAsyncWithHttpInfo (TextWatermarkData inputData);
        #endregion Asynchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public partial class WatermarkApi : IWatermarkApi
    {
        private Muhimbi.PDF.Online.Client.Client.ExceptionFactory _exceptionFactory = (name, response) => null;

        /// <summary>
        /// Initializes a new instance of the <see cref="WatermarkApi"/> class.
        /// </summary>
        /// <returns></returns>
        public WatermarkApi(String basePath)
        {
            this.Configuration = new Configuration(new ApiClient(basePath));

            ExceptionFactory = Muhimbi.PDF.Online.Client.Client.Configuration.DefaultExceptionFactory;

            // ensure API client has configuration ready
            if (Configuration.ApiClient.Configuration == null)
            {
                this.Configuration.ApiClient.Configuration = this.Configuration;
            }
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="WatermarkApi"/> class
        /// using Configuration object
        /// </summary>
        /// <param name="configuration">An instance of Configuration</param>
        /// <returns></returns>
        public WatermarkApi(Configuration configuration = null)
        {
            if (configuration == null) // use the default one in Configuration
                this.Configuration = Configuration.Default;
            else
                this.Configuration = configuration;

            ExceptionFactory = Muhimbi.PDF.Online.Client.Client.Configuration.DefaultExceptionFactory;

            // ensure API client has configuration ready
            if (Configuration.ApiClient.Configuration == null)
            {
                this.Configuration.ApiClient.Configuration = this.Configuration;
            }
        }

        /// <summary>
        /// Gets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        public String GetBasePath()
        {
            return this.Configuration.ApiClient.RestClient.BaseUrl.ToString();
        }

        /// <summary>
        /// Sets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        [Obsolete("SetBasePath is deprecated, please do 'Configuration.ApiClient = new ApiClient(\"http://new-path\")' instead.")]
        public void SetBasePath(String basePath)
        {
            // do nothing
        }

        /// <summary>
        /// Gets or sets the configuration object
        /// </summary>
        /// <value>An instance of the Configuration</value>
        public Configuration Configuration {get; set;}

        /// <summary>
        /// Provides a factory method hook for the creation of exceptions.
        /// </summary>
        public Muhimbi.PDF.Online.Client.Client.ExceptionFactory ExceptionFactory
        {
            get
            {
                if (_exceptionFactory != null && _exceptionFactory.GetInvocationList().Length > 1)
                {
                    throw new InvalidOperationException("Multicast delegate for ExceptionFactory is unsupported.");
                }
                return _exceptionFactory;
            }
            set { _exceptionFactory = value; }
        }

        /// <summary>
        /// Gets the default header.
        /// </summary>
        /// <returns>Dictionary of HTTP header</returns>
        [Obsolete("DefaultHeader is deprecated, please use Configuration.DefaultHeader instead.")]
        public Dictionary<String, String> DefaultHeader()
        {
            return this.Configuration.DefaultHeader;
        }

        /// <summary>
        /// Add default header.
        /// </summary>
        /// <param name="key">Header field name.</param>
        /// <param name="value">Header field value.</param>
        /// <returns></returns>
        [Obsolete("AddDefaultHeader is deprecated, please use Configuration.AddDefaultHeader instead.")]
        public void AddDefaultHeader(string key, string value)
        {
            this.Configuration.AddDefaultHeader(key, value);
        }

        /// <summary>
        /// Add composite watermark Add a complex watermark to a PDF file.
        /// </summary>
        /// <exception cref="Muhimbi.PDF.Online.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="inputData"></param>
        /// <returns>OperationResponse</returns>
        public OperationResponse CompositeWatermark (CompositeWatermarkData inputData)
        {
             ApiResponse<OperationResponse> localVarResponse = CompositeWatermarkWithHttpInfo(inputData);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Add composite watermark Add a complex watermark to a PDF file.
        /// </summary>
        /// <exception cref="Muhimbi.PDF.Online.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="inputData"></param>
        /// <returns>ApiResponse of OperationResponse</returns>
        public ApiResponse< OperationResponse > CompositeWatermarkWithHttpInfo (CompositeWatermarkData inputData)
        {
            // verify the required parameter 'inputData' is set
            if (inputData == null)
                throw new ApiException(400, "Missing required parameter 'inputData' when calling WatermarkApi->CompositeWatermark");

            var localVarPath = "/v1/operations/composite_watermark";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (inputData != null && inputData.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(inputData); // http body (model) parameter
            }
            else
            {
                localVarPostBody = inputData; // byte array
            }

            // authentication (oauth2_auth) required
            // oauth required
            if (!String.IsNullOrEmpty(Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + Configuration.AccessToken;
            }
            // authentication (api_key) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("api_key")))
            {
                localVarHeaderParams["api_key"] = Configuration.GetApiKeyWithPrefix("api_key");
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("CompositeWatermark", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<OperationResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (OperationResponse) Configuration.ApiClient.Deserialize(localVarResponse, typeof(OperationResponse)));
            
        }

        /// <summary>
        /// Add composite watermark Add a complex watermark to a PDF file.
        /// </summary>
        /// <exception cref="Muhimbi.PDF.Online.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="inputData"></param>
        /// <returns>Task of OperationResponse</returns>
        public async System.Threading.Tasks.Task<OperationResponse> CompositeWatermarkAsync (CompositeWatermarkData inputData)
        {
             ApiResponse<OperationResponse> localVarResponse = await CompositeWatermarkAsyncWithHttpInfo(inputData);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Add composite watermark Add a complex watermark to a PDF file.
        /// </summary>
        /// <exception cref="Muhimbi.PDF.Online.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="inputData"></param>
        /// <returns>Task of ApiResponse (OperationResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<OperationResponse>> CompositeWatermarkAsyncWithHttpInfo (CompositeWatermarkData inputData)
        {
            // verify the required parameter 'inputData' is set
            if (inputData == null)
                throw new ApiException(400, "Missing required parameter 'inputData' when calling WatermarkApi->CompositeWatermark");

            var localVarPath = "/v1/operations/composite_watermark";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (inputData != null && inputData.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(inputData); // http body (model) parameter
            }
            else
            {
                localVarPostBody = inputData; // byte array
            }

            // authentication (oauth2_auth) required
            // oauth required
            if (!String.IsNullOrEmpty(Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + Configuration.AccessToken;
            }
            // authentication (api_key) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("api_key")))
            {
                localVarHeaderParams["api_key"] = Configuration.GetApiKeyWithPrefix("api_key");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("CompositeWatermark", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<OperationResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (OperationResponse) Configuration.ApiClient.Deserialize(localVarResponse, typeof(OperationResponse)));
            
        }

        /// <summary>
        /// Add ellipse watermark Add an ellipse watermark to a PDF file.
        /// </summary>
        /// <exception cref="Muhimbi.PDF.Online.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="inputData"></param>
        /// <returns>OperationResponse</returns>
        public OperationResponse EllipseWatermark (EllipseWatermarkData inputData)
        {
             ApiResponse<OperationResponse> localVarResponse = EllipseWatermarkWithHttpInfo(inputData);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Add ellipse watermark Add an ellipse watermark to a PDF file.
        /// </summary>
        /// <exception cref="Muhimbi.PDF.Online.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="inputData"></param>
        /// <returns>ApiResponse of OperationResponse</returns>
        public ApiResponse< OperationResponse > EllipseWatermarkWithHttpInfo (EllipseWatermarkData inputData)
        {
            // verify the required parameter 'inputData' is set
            if (inputData == null)
                throw new ApiException(400, "Missing required parameter 'inputData' when calling WatermarkApi->EllipseWatermark");

            var localVarPath = "/v1/operations/ellipse_watermark";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (inputData != null && inputData.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(inputData); // http body (model) parameter
            }
            else
            {
                localVarPostBody = inputData; // byte array
            }

            // authentication (oauth2_auth) required
            // oauth required
            if (!String.IsNullOrEmpty(Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + Configuration.AccessToken;
            }
            // authentication (api_key) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("api_key")))
            {
                localVarHeaderParams["api_key"] = Configuration.GetApiKeyWithPrefix("api_key");
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("EllipseWatermark", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<OperationResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (OperationResponse) Configuration.ApiClient.Deserialize(localVarResponse, typeof(OperationResponse)));
            
        }

        /// <summary>
        /// Add ellipse watermark Add an ellipse watermark to a PDF file.
        /// </summary>
        /// <exception cref="Muhimbi.PDF.Online.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="inputData"></param>
        /// <returns>Task of OperationResponse</returns>
        public async System.Threading.Tasks.Task<OperationResponse> EllipseWatermarkAsync (EllipseWatermarkData inputData)
        {
             ApiResponse<OperationResponse> localVarResponse = await EllipseWatermarkAsyncWithHttpInfo(inputData);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Add ellipse watermark Add an ellipse watermark to a PDF file.
        /// </summary>
        /// <exception cref="Muhimbi.PDF.Online.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="inputData"></param>
        /// <returns>Task of ApiResponse (OperationResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<OperationResponse>> EllipseWatermarkAsyncWithHttpInfo (EllipseWatermarkData inputData)
        {
            // verify the required parameter 'inputData' is set
            if (inputData == null)
                throw new ApiException(400, "Missing required parameter 'inputData' when calling WatermarkApi->EllipseWatermark");

            var localVarPath = "/v1/operations/ellipse_watermark";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (inputData != null && inputData.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(inputData); // http body (model) parameter
            }
            else
            {
                localVarPostBody = inputData; // byte array
            }

            // authentication (oauth2_auth) required
            // oauth required
            if (!String.IsNullOrEmpty(Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + Configuration.AccessToken;
            }
            // authentication (api_key) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("api_key")))
            {
                localVarHeaderParams["api_key"] = Configuration.GetApiKeyWithPrefix("api_key");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("EllipseWatermark", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<OperationResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (OperationResponse) Configuration.ApiClient.Deserialize(localVarResponse, typeof(OperationResponse)));
            
        }

        /// <summary>
        /// Add image watermark Add an image based watermark to a PDF file.
        /// </summary>
        /// <exception cref="Muhimbi.PDF.Online.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="inputData"></param>
        /// <returns>OperationResponse</returns>
        public OperationResponse ImageWatermark (ImageWatermarkData inputData)
        {
             ApiResponse<OperationResponse> localVarResponse = ImageWatermarkWithHttpInfo(inputData);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Add image watermark Add an image based watermark to a PDF file.
        /// </summary>
        /// <exception cref="Muhimbi.PDF.Online.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="inputData"></param>
        /// <returns>ApiResponse of OperationResponse</returns>
        public ApiResponse< OperationResponse > ImageWatermarkWithHttpInfo (ImageWatermarkData inputData)
        {
            // verify the required parameter 'inputData' is set
            if (inputData == null)
                throw new ApiException(400, "Missing required parameter 'inputData' when calling WatermarkApi->ImageWatermark");

            var localVarPath = "/v1/operations/image_watermark";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (inputData != null && inputData.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(inputData); // http body (model) parameter
            }
            else
            {
                localVarPostBody = inputData; // byte array
            }

            // authentication (oauth2_auth) required
            // oauth required
            if (!String.IsNullOrEmpty(Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + Configuration.AccessToken;
            }
            // authentication (api_key) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("api_key")))
            {
                localVarHeaderParams["api_key"] = Configuration.GetApiKeyWithPrefix("api_key");
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ImageWatermark", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<OperationResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (OperationResponse) Configuration.ApiClient.Deserialize(localVarResponse, typeof(OperationResponse)));
            
        }

        /// <summary>
        /// Add image watermark Add an image based watermark to a PDF file.
        /// </summary>
        /// <exception cref="Muhimbi.PDF.Online.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="inputData"></param>
        /// <returns>Task of OperationResponse</returns>
        public async System.Threading.Tasks.Task<OperationResponse> ImageWatermarkAsync (ImageWatermarkData inputData)
        {
             ApiResponse<OperationResponse> localVarResponse = await ImageWatermarkAsyncWithHttpInfo(inputData);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Add image watermark Add an image based watermark to a PDF file.
        /// </summary>
        /// <exception cref="Muhimbi.PDF.Online.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="inputData"></param>
        /// <returns>Task of ApiResponse (OperationResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<OperationResponse>> ImageWatermarkAsyncWithHttpInfo (ImageWatermarkData inputData)
        {
            // verify the required parameter 'inputData' is set
            if (inputData == null)
                throw new ApiException(400, "Missing required parameter 'inputData' when calling WatermarkApi->ImageWatermark");

            var localVarPath = "/v1/operations/image_watermark";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (inputData != null && inputData.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(inputData); // http body (model) parameter
            }
            else
            {
                localVarPostBody = inputData; // byte array
            }

            // authentication (oauth2_auth) required
            // oauth required
            if (!String.IsNullOrEmpty(Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + Configuration.AccessToken;
            }
            // authentication (api_key) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("api_key")))
            {
                localVarHeaderParams["api_key"] = Configuration.GetApiKeyWithPrefix("api_key");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ImageWatermark", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<OperationResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (OperationResponse) Configuration.ApiClient.Deserialize(localVarResponse, typeof(OperationResponse)));
            
        }

        /// <summary>
        /// Add line watermark Add a line watermark to a PDF file.
        /// </summary>
        /// <exception cref="Muhimbi.PDF.Online.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="inputData"></param>
        /// <returns>OperationResponse</returns>
        public OperationResponse LineWatermark (LineWatermarkData inputData)
        {
             ApiResponse<OperationResponse> localVarResponse = LineWatermarkWithHttpInfo(inputData);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Add line watermark Add a line watermark to a PDF file.
        /// </summary>
        /// <exception cref="Muhimbi.PDF.Online.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="inputData"></param>
        /// <returns>ApiResponse of OperationResponse</returns>
        public ApiResponse< OperationResponse > LineWatermarkWithHttpInfo (LineWatermarkData inputData)
        {
            // verify the required parameter 'inputData' is set
            if (inputData == null)
                throw new ApiException(400, "Missing required parameter 'inputData' when calling WatermarkApi->LineWatermark");

            var localVarPath = "/v1/operations/line_watermark";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (inputData != null && inputData.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(inputData); // http body (model) parameter
            }
            else
            {
                localVarPostBody = inputData; // byte array
            }

            // authentication (oauth2_auth) required
            // oauth required
            if (!String.IsNullOrEmpty(Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + Configuration.AccessToken;
            }
            // authentication (api_key) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("api_key")))
            {
                localVarHeaderParams["api_key"] = Configuration.GetApiKeyWithPrefix("api_key");
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("LineWatermark", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<OperationResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (OperationResponse) Configuration.ApiClient.Deserialize(localVarResponse, typeof(OperationResponse)));
            
        }

        /// <summary>
        /// Add line watermark Add a line watermark to a PDF file.
        /// </summary>
        /// <exception cref="Muhimbi.PDF.Online.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="inputData"></param>
        /// <returns>Task of OperationResponse</returns>
        public async System.Threading.Tasks.Task<OperationResponse> LineWatermarkAsync (LineWatermarkData inputData)
        {
             ApiResponse<OperationResponse> localVarResponse = await LineWatermarkAsyncWithHttpInfo(inputData);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Add line watermark Add a line watermark to a PDF file.
        /// </summary>
        /// <exception cref="Muhimbi.PDF.Online.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="inputData"></param>
        /// <returns>Task of ApiResponse (OperationResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<OperationResponse>> LineWatermarkAsyncWithHttpInfo (LineWatermarkData inputData)
        {
            // verify the required parameter 'inputData' is set
            if (inputData == null)
                throw new ApiException(400, "Missing required parameter 'inputData' when calling WatermarkApi->LineWatermark");

            var localVarPath = "/v1/operations/line_watermark";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (inputData != null && inputData.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(inputData); // http body (model) parameter
            }
            else
            {
                localVarPostBody = inputData; // byte array
            }

            // authentication (oauth2_auth) required
            // oauth required
            if (!String.IsNullOrEmpty(Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + Configuration.AccessToken;
            }
            // authentication (api_key) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("api_key")))
            {
                localVarHeaderParams["api_key"] = Configuration.GetApiKeyWithPrefix("api_key");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("LineWatermark", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<OperationResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (OperationResponse) Configuration.ApiClient.Deserialize(localVarResponse, typeof(OperationResponse)));
            
        }

        /// <summary>
        /// Add Linear Barcode watermark Add a Linear Barcode watermark to a PDF file.
        /// </summary>
        /// <exception cref="Muhimbi.PDF.Online.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="inputData"></param>
        /// <returns>OperationResponse</returns>
        public OperationResponse LinearBarcodeWatermark (LinearBarcodeWatermarkData inputData)
        {
             ApiResponse<OperationResponse> localVarResponse = LinearBarcodeWatermarkWithHttpInfo(inputData);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Add Linear Barcode watermark Add a Linear Barcode watermark to a PDF file.
        /// </summary>
        /// <exception cref="Muhimbi.PDF.Online.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="inputData"></param>
        /// <returns>ApiResponse of OperationResponse</returns>
        public ApiResponse< OperationResponse > LinearBarcodeWatermarkWithHttpInfo (LinearBarcodeWatermarkData inputData)
        {
            // verify the required parameter 'inputData' is set
            if (inputData == null)
                throw new ApiException(400, "Missing required parameter 'inputData' when calling WatermarkApi->LinearBarcodeWatermark");

            var localVarPath = "/v1/operations/linear_barcode_watermark";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (inputData != null && inputData.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(inputData); // http body (model) parameter
            }
            else
            {
                localVarPostBody = inputData; // byte array
            }

            // authentication (oauth2_auth) required
            // oauth required
            if (!String.IsNullOrEmpty(Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + Configuration.AccessToken;
            }
            // authentication (api_key) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("api_key")))
            {
                localVarHeaderParams["api_key"] = Configuration.GetApiKeyWithPrefix("api_key");
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("LinearBarcodeWatermark", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<OperationResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (OperationResponse) Configuration.ApiClient.Deserialize(localVarResponse, typeof(OperationResponse)));
            
        }

        /// <summary>
        /// Add Linear Barcode watermark Add a Linear Barcode watermark to a PDF file.
        /// </summary>
        /// <exception cref="Muhimbi.PDF.Online.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="inputData"></param>
        /// <returns>Task of OperationResponse</returns>
        public async System.Threading.Tasks.Task<OperationResponse> LinearBarcodeWatermarkAsync (LinearBarcodeWatermarkData inputData)
        {
             ApiResponse<OperationResponse> localVarResponse = await LinearBarcodeWatermarkAsyncWithHttpInfo(inputData);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Add Linear Barcode watermark Add a Linear Barcode watermark to a PDF file.
        /// </summary>
        /// <exception cref="Muhimbi.PDF.Online.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="inputData"></param>
        /// <returns>Task of ApiResponse (OperationResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<OperationResponse>> LinearBarcodeWatermarkAsyncWithHttpInfo (LinearBarcodeWatermarkData inputData)
        {
            // verify the required parameter 'inputData' is set
            if (inputData == null)
                throw new ApiException(400, "Missing required parameter 'inputData' when calling WatermarkApi->LinearBarcodeWatermark");

            var localVarPath = "/v1/operations/linear_barcode_watermark";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (inputData != null && inputData.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(inputData); // http body (model) parameter
            }
            else
            {
                localVarPostBody = inputData; // byte array
            }

            // authentication (oauth2_auth) required
            // oauth required
            if (!String.IsNullOrEmpty(Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + Configuration.AccessToken;
            }
            // authentication (api_key) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("api_key")))
            {
                localVarHeaderParams["api_key"] = Configuration.GetApiKeyWithPrefix("api_key");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("LinearBarcodeWatermark", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<OperationResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (OperationResponse) Configuration.ApiClient.Deserialize(localVarResponse, typeof(OperationResponse)));
            
        }

        /// <summary>
        /// Add PDF watermark Add a PDF based watermark to a PDF file.
        /// </summary>
        /// <exception cref="Muhimbi.PDF.Online.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="inputData"></param>
        /// <returns>OperationResponse</returns>
        public OperationResponse PdfWatermark (PdfWatermarkData inputData)
        {
             ApiResponse<OperationResponse> localVarResponse = PdfWatermarkWithHttpInfo(inputData);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Add PDF watermark Add a PDF based watermark to a PDF file.
        /// </summary>
        /// <exception cref="Muhimbi.PDF.Online.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="inputData"></param>
        /// <returns>ApiResponse of OperationResponse</returns>
        public ApiResponse< OperationResponse > PdfWatermarkWithHttpInfo (PdfWatermarkData inputData)
        {
            // verify the required parameter 'inputData' is set
            if (inputData == null)
                throw new ApiException(400, "Missing required parameter 'inputData' when calling WatermarkApi->PdfWatermark");

            var localVarPath = "/v1/operations/pdf_watermark";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (inputData != null && inputData.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(inputData); // http body (model) parameter
            }
            else
            {
                localVarPostBody = inputData; // byte array
            }

            // authentication (oauth2_auth) required
            // oauth required
            if (!String.IsNullOrEmpty(Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + Configuration.AccessToken;
            }
            // authentication (api_key) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("api_key")))
            {
                localVarHeaderParams["api_key"] = Configuration.GetApiKeyWithPrefix("api_key");
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("PdfWatermark", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<OperationResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (OperationResponse) Configuration.ApiClient.Deserialize(localVarResponse, typeof(OperationResponse)));
            
        }

        /// <summary>
        /// Add PDF watermark Add a PDF based watermark to a PDF file.
        /// </summary>
        /// <exception cref="Muhimbi.PDF.Online.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="inputData"></param>
        /// <returns>Task of OperationResponse</returns>
        public async System.Threading.Tasks.Task<OperationResponse> PdfWatermarkAsync (PdfWatermarkData inputData)
        {
             ApiResponse<OperationResponse> localVarResponse = await PdfWatermarkAsyncWithHttpInfo(inputData);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Add PDF watermark Add a PDF based watermark to a PDF file.
        /// </summary>
        /// <exception cref="Muhimbi.PDF.Online.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="inputData"></param>
        /// <returns>Task of ApiResponse (OperationResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<OperationResponse>> PdfWatermarkAsyncWithHttpInfo (PdfWatermarkData inputData)
        {
            // verify the required parameter 'inputData' is set
            if (inputData == null)
                throw new ApiException(400, "Missing required parameter 'inputData' when calling WatermarkApi->PdfWatermark");

            var localVarPath = "/v1/operations/pdf_watermark";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (inputData != null && inputData.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(inputData); // http body (model) parameter
            }
            else
            {
                localVarPostBody = inputData; // byte array
            }

            // authentication (oauth2_auth) required
            // oauth required
            if (!String.IsNullOrEmpty(Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + Configuration.AccessToken;
            }
            // authentication (api_key) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("api_key")))
            {
                localVarHeaderParams["api_key"] = Configuration.GetApiKeyWithPrefix("api_key");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("PdfWatermark", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<OperationResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (OperationResponse) Configuration.ApiClient.Deserialize(localVarResponse, typeof(OperationResponse)));
            
        }

        /// <summary>
        /// Add QR Code watermark Add a QR Code watermark to a PDF file.
        /// </summary>
        /// <exception cref="Muhimbi.PDF.Online.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="inputData"></param>
        /// <returns>OperationResponse</returns>
        public OperationResponse QrCodeWatermark (QrCodeWatermarkData inputData)
        {
             ApiResponse<OperationResponse> localVarResponse = QrCodeWatermarkWithHttpInfo(inputData);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Add QR Code watermark Add a QR Code watermark to a PDF file.
        /// </summary>
        /// <exception cref="Muhimbi.PDF.Online.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="inputData"></param>
        /// <returns>ApiResponse of OperationResponse</returns>
        public ApiResponse< OperationResponse > QrCodeWatermarkWithHttpInfo (QrCodeWatermarkData inputData)
        {
            // verify the required parameter 'inputData' is set
            if (inputData == null)
                throw new ApiException(400, "Missing required parameter 'inputData' when calling WatermarkApi->QrCodeWatermark");

            var localVarPath = "/v1/operations/qr_code_watermark";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (inputData != null && inputData.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(inputData); // http body (model) parameter
            }
            else
            {
                localVarPostBody = inputData; // byte array
            }

            // authentication (oauth2_auth) required
            // oauth required
            if (!String.IsNullOrEmpty(Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + Configuration.AccessToken;
            }
            // authentication (api_key) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("api_key")))
            {
                localVarHeaderParams["api_key"] = Configuration.GetApiKeyWithPrefix("api_key");
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("QrCodeWatermark", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<OperationResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (OperationResponse) Configuration.ApiClient.Deserialize(localVarResponse, typeof(OperationResponse)));
            
        }

        /// <summary>
        /// Add QR Code watermark Add a QR Code watermark to a PDF file.
        /// </summary>
        /// <exception cref="Muhimbi.PDF.Online.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="inputData"></param>
        /// <returns>Task of OperationResponse</returns>
        public async System.Threading.Tasks.Task<OperationResponse> QrCodeWatermarkAsync (QrCodeWatermarkData inputData)
        {
             ApiResponse<OperationResponse> localVarResponse = await QrCodeWatermarkAsyncWithHttpInfo(inputData);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Add QR Code watermark Add a QR Code watermark to a PDF file.
        /// </summary>
        /// <exception cref="Muhimbi.PDF.Online.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="inputData"></param>
        /// <returns>Task of ApiResponse (OperationResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<OperationResponse>> QrCodeWatermarkAsyncWithHttpInfo (QrCodeWatermarkData inputData)
        {
            // verify the required parameter 'inputData' is set
            if (inputData == null)
                throw new ApiException(400, "Missing required parameter 'inputData' when calling WatermarkApi->QrCodeWatermark");

            var localVarPath = "/v1/operations/qr_code_watermark";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (inputData != null && inputData.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(inputData); // http body (model) parameter
            }
            else
            {
                localVarPostBody = inputData; // byte array
            }

            // authentication (oauth2_auth) required
            // oauth required
            if (!String.IsNullOrEmpty(Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + Configuration.AccessToken;
            }
            // authentication (api_key) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("api_key")))
            {
                localVarHeaderParams["api_key"] = Configuration.GetApiKeyWithPrefix("api_key");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("QrCodeWatermark", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<OperationResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (OperationResponse) Configuration.ApiClient.Deserialize(localVarResponse, typeof(OperationResponse)));
            
        }

        /// <summary>
        /// Add rectangle watermark Add a rectangle watermark to a PDF file.
        /// </summary>
        /// <exception cref="Muhimbi.PDF.Online.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="inputData"></param>
        /// <returns>OperationResponse</returns>
        public OperationResponse RectangleWatermark (RectangleWatermarkData inputData)
        {
             ApiResponse<OperationResponse> localVarResponse = RectangleWatermarkWithHttpInfo(inputData);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Add rectangle watermark Add a rectangle watermark to a PDF file.
        /// </summary>
        /// <exception cref="Muhimbi.PDF.Online.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="inputData"></param>
        /// <returns>ApiResponse of OperationResponse</returns>
        public ApiResponse< OperationResponse > RectangleWatermarkWithHttpInfo (RectangleWatermarkData inputData)
        {
            // verify the required parameter 'inputData' is set
            if (inputData == null)
                throw new ApiException(400, "Missing required parameter 'inputData' when calling WatermarkApi->RectangleWatermark");

            var localVarPath = "/v1/operations/rectangle_watermark";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (inputData != null && inputData.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(inputData); // http body (model) parameter
            }
            else
            {
                localVarPostBody = inputData; // byte array
            }

            // authentication (oauth2_auth) required
            // oauth required
            if (!String.IsNullOrEmpty(Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + Configuration.AccessToken;
            }
            // authentication (api_key) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("api_key")))
            {
                localVarHeaderParams["api_key"] = Configuration.GetApiKeyWithPrefix("api_key");
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("RectangleWatermark", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<OperationResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (OperationResponse) Configuration.ApiClient.Deserialize(localVarResponse, typeof(OperationResponse)));
            
        }

        /// <summary>
        /// Add rectangle watermark Add a rectangle watermark to a PDF file.
        /// </summary>
        /// <exception cref="Muhimbi.PDF.Online.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="inputData"></param>
        /// <returns>Task of OperationResponse</returns>
        public async System.Threading.Tasks.Task<OperationResponse> RectangleWatermarkAsync (RectangleWatermarkData inputData)
        {
             ApiResponse<OperationResponse> localVarResponse = await RectangleWatermarkAsyncWithHttpInfo(inputData);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Add rectangle watermark Add a rectangle watermark to a PDF file.
        /// </summary>
        /// <exception cref="Muhimbi.PDF.Online.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="inputData"></param>
        /// <returns>Task of ApiResponse (OperationResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<OperationResponse>> RectangleWatermarkAsyncWithHttpInfo (RectangleWatermarkData inputData)
        {
            // verify the required parameter 'inputData' is set
            if (inputData == null)
                throw new ApiException(400, "Missing required parameter 'inputData' when calling WatermarkApi->RectangleWatermark");

            var localVarPath = "/v1/operations/rectangle_watermark";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (inputData != null && inputData.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(inputData); // http body (model) parameter
            }
            else
            {
                localVarPostBody = inputData; // byte array
            }

            // authentication (oauth2_auth) required
            // oauth required
            if (!String.IsNullOrEmpty(Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + Configuration.AccessToken;
            }
            // authentication (api_key) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("api_key")))
            {
                localVarHeaderParams["api_key"] = Configuration.GetApiKeyWithPrefix("api_key");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("RectangleWatermark", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<OperationResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (OperationResponse) Configuration.ApiClient.Deserialize(localVarResponse, typeof(OperationResponse)));
            
        }

        /// <summary>
        /// Add RTF watermark Add a rich-text watermark to a PDF file.
        /// </summary>
        /// <exception cref="Muhimbi.PDF.Online.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="inputData"></param>
        /// <returns>OperationResponse</returns>
        public OperationResponse RtfWatermark (RtfWatermarkData inputData)
        {
             ApiResponse<OperationResponse> localVarResponse = RtfWatermarkWithHttpInfo(inputData);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Add RTF watermark Add a rich-text watermark to a PDF file.
        /// </summary>
        /// <exception cref="Muhimbi.PDF.Online.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="inputData"></param>
        /// <returns>ApiResponse of OperationResponse</returns>
        public ApiResponse< OperationResponse > RtfWatermarkWithHttpInfo (RtfWatermarkData inputData)
        {
            // verify the required parameter 'inputData' is set
            if (inputData == null)
                throw new ApiException(400, "Missing required parameter 'inputData' when calling WatermarkApi->RtfWatermark");

            var localVarPath = "/v1/operations/rtf_watermark";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (inputData != null && inputData.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(inputData); // http body (model) parameter
            }
            else
            {
                localVarPostBody = inputData; // byte array
            }

            // authentication (oauth2_auth) required
            // oauth required
            if (!String.IsNullOrEmpty(Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + Configuration.AccessToken;
            }
            // authentication (api_key) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("api_key")))
            {
                localVarHeaderParams["api_key"] = Configuration.GetApiKeyWithPrefix("api_key");
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("RtfWatermark", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<OperationResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (OperationResponse) Configuration.ApiClient.Deserialize(localVarResponse, typeof(OperationResponse)));
            
        }

        /// <summary>
        /// Add RTF watermark Add a rich-text watermark to a PDF file.
        /// </summary>
        /// <exception cref="Muhimbi.PDF.Online.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="inputData"></param>
        /// <returns>Task of OperationResponse</returns>
        public async System.Threading.Tasks.Task<OperationResponse> RtfWatermarkAsync (RtfWatermarkData inputData)
        {
             ApiResponse<OperationResponse> localVarResponse = await RtfWatermarkAsyncWithHttpInfo(inputData);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Add RTF watermark Add a rich-text watermark to a PDF file.
        /// </summary>
        /// <exception cref="Muhimbi.PDF.Online.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="inputData"></param>
        /// <returns>Task of ApiResponse (OperationResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<OperationResponse>> RtfWatermarkAsyncWithHttpInfo (RtfWatermarkData inputData)
        {
            // verify the required parameter 'inputData' is set
            if (inputData == null)
                throw new ApiException(400, "Missing required parameter 'inputData' when calling WatermarkApi->RtfWatermark");

            var localVarPath = "/v1/operations/rtf_watermark";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (inputData != null && inputData.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(inputData); // http body (model) parameter
            }
            else
            {
                localVarPostBody = inputData; // byte array
            }

            // authentication (oauth2_auth) required
            // oauth required
            if (!String.IsNullOrEmpty(Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + Configuration.AccessToken;
            }
            // authentication (api_key) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("api_key")))
            {
                localVarHeaderParams["api_key"] = Configuration.GetApiKeyWithPrefix("api_key");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("RtfWatermark", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<OperationResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (OperationResponse) Configuration.ApiClient.Deserialize(localVarResponse, typeof(OperationResponse)));
            
        }

        /// <summary>
        /// Add text watermark Add a plain-text watermark to a PDF file.
        /// </summary>
        /// <exception cref="Muhimbi.PDF.Online.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="inputData"></param>
        /// <returns>OperationResponse</returns>
        public OperationResponse TextWatermark (TextWatermarkData inputData)
        {
             ApiResponse<OperationResponse> localVarResponse = TextWatermarkWithHttpInfo(inputData);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Add text watermark Add a plain-text watermark to a PDF file.
        /// </summary>
        /// <exception cref="Muhimbi.PDF.Online.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="inputData"></param>
        /// <returns>ApiResponse of OperationResponse</returns>
        public ApiResponse< OperationResponse > TextWatermarkWithHttpInfo (TextWatermarkData inputData)
        {
            // verify the required parameter 'inputData' is set
            if (inputData == null)
                throw new ApiException(400, "Missing required parameter 'inputData' when calling WatermarkApi->TextWatermark");

            var localVarPath = "/v1/operations/text_watermark";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (inputData != null && inputData.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(inputData); // http body (model) parameter
            }
            else
            {
                localVarPostBody = inputData; // byte array
            }

            // authentication (oauth2_auth) required
            // oauth required
            if (!String.IsNullOrEmpty(Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + Configuration.AccessToken;
            }
            // authentication (api_key) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("api_key")))
            {
                localVarHeaderParams["api_key"] = Configuration.GetApiKeyWithPrefix("api_key");
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("TextWatermark", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<OperationResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (OperationResponse) Configuration.ApiClient.Deserialize(localVarResponse, typeof(OperationResponse)));
            
        }

        /// <summary>
        /// Add text watermark Add a plain-text watermark to a PDF file.
        /// </summary>
        /// <exception cref="Muhimbi.PDF.Online.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="inputData"></param>
        /// <returns>Task of OperationResponse</returns>
        public async System.Threading.Tasks.Task<OperationResponse> TextWatermarkAsync (TextWatermarkData inputData)
        {
             ApiResponse<OperationResponse> localVarResponse = await TextWatermarkAsyncWithHttpInfo(inputData);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Add text watermark Add a plain-text watermark to a PDF file.
        /// </summary>
        /// <exception cref="Muhimbi.PDF.Online.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="inputData"></param>
        /// <returns>Task of ApiResponse (OperationResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<OperationResponse>> TextWatermarkAsyncWithHttpInfo (TextWatermarkData inputData)
        {
            // verify the required parameter 'inputData' is set
            if (inputData == null)
                throw new ApiException(400, "Missing required parameter 'inputData' when calling WatermarkApi->TextWatermark");

            var localVarPath = "/v1/operations/text_watermark";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (inputData != null && inputData.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(inputData); // http body (model) parameter
            }
            else
            {
                localVarPostBody = inputData; // byte array
            }

            // authentication (oauth2_auth) required
            // oauth required
            if (!String.IsNullOrEmpty(Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + Configuration.AccessToken;
            }
            // authentication (api_key) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("api_key")))
            {
                localVarHeaderParams["api_key"] = Configuration.GetApiKeyWithPrefix("api_key");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("TextWatermark", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<OperationResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (OperationResponse) Configuration.ApiClient.Deserialize(localVarResponse, typeof(OperationResponse)));
            
        }

    }
}
