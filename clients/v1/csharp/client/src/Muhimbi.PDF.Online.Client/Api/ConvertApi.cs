/* 
 * Muhimbi PDF
 *
 * Convert, Merge, Watermark, Secure and OCR files.
 *
 * OpenAPI spec version: 9.16
 * Contact: support@muhimbi.com
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using RestSharp;
using Muhimbi.PDF.Online.Client.Client;
using Muhimbi.PDF.Online.Client.Model;

namespace Muhimbi.PDF.Online.Client.Api
{
    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IConvertApi : IApiAccessor
    {
        #region Synchronous Operations
        /// <summary>
        /// Convert document
        /// </summary>
        /// <remarks>
        /// Convert a file to PDF or other format.
        /// </remarks>
        /// <exception cref="Muhimbi.PDF.Online.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="inputData"></param>
        /// <returns>OperationResponse</returns>
        OperationResponse Convert (ConvertData inputData);

        /// <summary>
        /// Convert document
        /// </summary>
        /// <remarks>
        /// Convert a file to PDF or other format.
        /// </remarks>
        /// <exception cref="Muhimbi.PDF.Online.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="inputData"></param>
        /// <returns>ApiResponse of OperationResponse</returns>
        ApiResponse<OperationResponse> ConvertWithHttpInfo (ConvertData inputData);
        /// <summary>
        /// Convert CAD drawing to PDF
        /// </summary>
        /// <remarks>
        /// Convert a CAD drawing file to PDF or other format.
        /// </remarks>
        /// <exception cref="Muhimbi.PDF.Online.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="inputCadData"></param>
        /// <returns>OperationResponse</returns>
        OperationResponse ConvertCad (ConvertCadData inputCadData);

        /// <summary>
        /// Convert CAD drawing to PDF
        /// </summary>
        /// <remarks>
        /// Convert a CAD drawing file to PDF or other format.
        /// </remarks>
        /// <exception cref="Muhimbi.PDF.Online.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="inputCadData"></param>
        /// <returns>ApiResponse of OperationResponse</returns>
        ApiResponse<OperationResponse> ConvertCadWithHttpInfo (ConvertCadData inputCadData);
        /// <summary>
        /// Convert email to PDF
        /// </summary>
        /// <remarks>
        /// Convert an email file to PDF or other format.
        /// </remarks>
        /// <exception cref="Muhimbi.PDF.Online.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="inputEmailData"></param>
        /// <returns>OperationResponse</returns>
        OperationResponse ConvertEmail (ConvertEmailData inputEmailData);

        /// <summary>
        /// Convert email to PDF
        /// </summary>
        /// <remarks>
        /// Convert an email file to PDF or other format.
        /// </remarks>
        /// <exception cref="Muhimbi.PDF.Online.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="inputEmailData"></param>
        /// <returns>ApiResponse of OperationResponse</returns>
        ApiResponse<OperationResponse> ConvertEmailWithHttpInfo (ConvertEmailData inputEmailData);
        /// <summary>
        /// Convert Excel document
        /// </summary>
        /// <remarks>
        /// Convert an Excel document to PDF or other format.
        /// </remarks>
        /// <exception cref="Muhimbi.PDF.Online.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="inputExcelData"></param>
        /// <returns>OperationResponse</returns>
        OperationResponse ConvertExcel (ConvertExcelData inputExcelData);

        /// <summary>
        /// Convert Excel document
        /// </summary>
        /// <remarks>
        /// Convert an Excel document to PDF or other format.
        /// </remarks>
        /// <exception cref="Muhimbi.PDF.Online.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="inputExcelData"></param>
        /// <returns>ApiResponse of OperationResponse</returns>
        ApiResponse<OperationResponse> ConvertExcelWithHttpInfo (ConvertExcelData inputExcelData);
        /// <summary>
        /// Convert HTML to PDF
        /// </summary>
        /// <remarks>
        /// Convert URLs or HTML to PDF.
        /// </remarks>
        /// <exception cref="Muhimbi.PDF.Online.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="inputData"></param>
        /// <returns>OperationResponse</returns>
        OperationResponse ConvertHtml (ConvertHtmlData inputData);

        /// <summary>
        /// Convert HTML to PDF
        /// </summary>
        /// <remarks>
        /// Convert URLs or HTML to PDF.
        /// </remarks>
        /// <exception cref="Muhimbi.PDF.Online.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="inputData"></param>
        /// <returns>ApiResponse of OperationResponse</returns>
        ApiResponse<OperationResponse> ConvertHtmlWithHttpInfo (ConvertHtmlData inputData);
        /// <summary>
        /// Convert InfoPath document
        /// </summary>
        /// <remarks>
        /// Convert a InfoPath file to PDF or other format.
        /// </remarks>
        /// <exception cref="Muhimbi.PDF.Online.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="inputInfopathData"></param>
        /// <returns>OperationResponse</returns>
        OperationResponse ConvertInfopath (ConvertInfopathData inputInfopathData);

        /// <summary>
        /// Convert InfoPath document
        /// </summary>
        /// <remarks>
        /// Convert a InfoPath file to PDF or other format.
        /// </remarks>
        /// <exception cref="Muhimbi.PDF.Online.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="inputInfopathData"></param>
        /// <returns>ApiResponse of OperationResponse</returns>
        ApiResponse<OperationResponse> ConvertInfopathWithHttpInfo (ConvertInfopathData inputInfopathData);
        /// <summary>
        /// Convert document to PDF-A
        /// </summary>
        /// <remarks>
        /// Convert a document to PDF-A.
        /// </remarks>
        /// <exception cref="Muhimbi.PDF.Online.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="inputPdfData"></param>
        /// <returns>OperationResponse</returns>
        OperationResponse ConvertPdfa (ConvertPdfaData inputPdfData);

        /// <summary>
        /// Convert document to PDF-A
        /// </summary>
        /// <remarks>
        /// Convert a document to PDF-A.
        /// </remarks>
        /// <exception cref="Muhimbi.PDF.Online.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="inputPdfData"></param>
        /// <returns>ApiResponse of OperationResponse</returns>
        ApiResponse<OperationResponse> ConvertPdfaWithHttpInfo (ConvertPdfaData inputPdfData);
        /// <summary>
        /// Convert PowerPoint document
        /// </summary>
        /// <remarks>
        /// Convert a PowerPoint document to PDF or other format.
        /// </remarks>
        /// <exception cref="Muhimbi.PDF.Online.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="inputPowerpointData"></param>
        /// <returns>OperationResponse</returns>
        OperationResponse ConvertPowerpoint (ConvertPowerpointData inputPowerpointData);

        /// <summary>
        /// Convert PowerPoint document
        /// </summary>
        /// <remarks>
        /// Convert a PowerPoint document to PDF or other format.
        /// </remarks>
        /// <exception cref="Muhimbi.PDF.Online.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="inputPowerpointData"></param>
        /// <returns>ApiResponse of OperationResponse</returns>
        ApiResponse<OperationResponse> ConvertPowerpointWithHttpInfo (ConvertPowerpointData inputPowerpointData);
        /// <summary>
        /// Convert Visio document
        /// </summary>
        /// <remarks>
        /// Convert a Visio document to PDF or XPS.
        /// </remarks>
        /// <exception cref="Muhimbi.PDF.Online.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="inputVisioData"></param>
        /// <returns>OperationResponse</returns>
        OperationResponse ConvertVisio (ConvertVisioData inputVisioData);

        /// <summary>
        /// Convert Visio document
        /// </summary>
        /// <remarks>
        /// Convert a Visio document to PDF or XPS.
        /// </remarks>
        /// <exception cref="Muhimbi.PDF.Online.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="inputVisioData"></param>
        /// <returns>ApiResponse of OperationResponse</returns>
        ApiResponse<OperationResponse> ConvertVisioWithHttpInfo (ConvertVisioData inputVisioData);
        /// <summary>
        /// Convert Word document
        /// </summary>
        /// <remarks>
        /// Convert a Word document to PDF or other format.
        /// </remarks>
        /// <exception cref="Muhimbi.PDF.Online.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="inputWordData"></param>
        /// <returns>OperationResponse</returns>
        OperationResponse ConvertWord (ConvertWordData inputWordData);

        /// <summary>
        /// Convert Word document
        /// </summary>
        /// <remarks>
        /// Convert a Word document to PDF or other format.
        /// </remarks>
        /// <exception cref="Muhimbi.PDF.Online.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="inputWordData"></param>
        /// <returns>ApiResponse of OperationResponse</returns>
        ApiResponse<OperationResponse> ConvertWordWithHttpInfo (ConvertWordData inputWordData);
        /// <summary>
        /// Export PDF Forms Data
        /// </summary>
        /// <remarks>
        /// Convert data from a PDF Form to XML, FDF or XFDF.
        /// </remarks>
        /// <exception cref="Muhimbi.PDF.Online.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="inputFromPdfData"></param>
        /// <returns>OperationResponse</returns>
        OperationResponse ExportFormData (ExportFormData inputFromPdfData);

        /// <summary>
        /// Export PDF Forms Data
        /// </summary>
        /// <remarks>
        /// Convert data from a PDF Form to XML, FDF or XFDF.
        /// </remarks>
        /// <exception cref="Muhimbi.PDF.Online.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="inputFromPdfData"></param>
        /// <returns>ApiResponse of OperationResponse</returns>
        ApiResponse<OperationResponse> ExportFormDataWithHttpInfo (ExportFormData inputFromPdfData);
        /// <summary>
        /// Import PDF Forms data
        /// </summary>
        /// <remarks>
        /// Import PDF Forms data.
        /// </remarks>
        /// <exception cref="Muhimbi.PDF.Online.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="inputXmlData"></param>
        /// <returns>OperationResponse</returns>
        OperationResponse ImportFormData (ImportFormData inputXmlData);

        /// <summary>
        /// Import PDF Forms data
        /// </summary>
        /// <remarks>
        /// Import PDF Forms data.
        /// </remarks>
        /// <exception cref="Muhimbi.PDF.Online.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="inputXmlData"></param>
        /// <returns>ApiResponse of OperationResponse</returns>
        ApiResponse<OperationResponse> ImportFormDataWithHttpInfo (ImportFormData inputXmlData);
        #endregion Synchronous Operations
        #region Asynchronous Operations
        /// <summary>
        /// Convert document
        /// </summary>
        /// <remarks>
        /// Convert a file to PDF or other format.
        /// </remarks>
        /// <exception cref="Muhimbi.PDF.Online.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="inputData"></param>
        /// <returns>Task of OperationResponse</returns>
        System.Threading.Tasks.Task<OperationResponse> ConvertAsync (ConvertData inputData);

        /// <summary>
        /// Convert document
        /// </summary>
        /// <remarks>
        /// Convert a file to PDF or other format.
        /// </remarks>
        /// <exception cref="Muhimbi.PDF.Online.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="inputData"></param>
        /// <returns>Task of ApiResponse (OperationResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<OperationResponse>> ConvertAsyncWithHttpInfo (ConvertData inputData);
        /// <summary>
        /// Convert CAD drawing to PDF
        /// </summary>
        /// <remarks>
        /// Convert a CAD drawing file to PDF or other format.
        /// </remarks>
        /// <exception cref="Muhimbi.PDF.Online.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="inputCadData"></param>
        /// <returns>Task of OperationResponse</returns>
        System.Threading.Tasks.Task<OperationResponse> ConvertCadAsync (ConvertCadData inputCadData);

        /// <summary>
        /// Convert CAD drawing to PDF
        /// </summary>
        /// <remarks>
        /// Convert a CAD drawing file to PDF or other format.
        /// </remarks>
        /// <exception cref="Muhimbi.PDF.Online.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="inputCadData"></param>
        /// <returns>Task of ApiResponse (OperationResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<OperationResponse>> ConvertCadAsyncWithHttpInfo (ConvertCadData inputCadData);
        /// <summary>
        /// Convert email to PDF
        /// </summary>
        /// <remarks>
        /// Convert an email file to PDF or other format.
        /// </remarks>
        /// <exception cref="Muhimbi.PDF.Online.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="inputEmailData"></param>
        /// <returns>Task of OperationResponse</returns>
        System.Threading.Tasks.Task<OperationResponse> ConvertEmailAsync (ConvertEmailData inputEmailData);

        /// <summary>
        /// Convert email to PDF
        /// </summary>
        /// <remarks>
        /// Convert an email file to PDF or other format.
        /// </remarks>
        /// <exception cref="Muhimbi.PDF.Online.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="inputEmailData"></param>
        /// <returns>Task of ApiResponse (OperationResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<OperationResponse>> ConvertEmailAsyncWithHttpInfo (ConvertEmailData inputEmailData);
        /// <summary>
        /// Convert Excel document
        /// </summary>
        /// <remarks>
        /// Convert an Excel document to PDF or other format.
        /// </remarks>
        /// <exception cref="Muhimbi.PDF.Online.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="inputExcelData"></param>
        /// <returns>Task of OperationResponse</returns>
        System.Threading.Tasks.Task<OperationResponse> ConvertExcelAsync (ConvertExcelData inputExcelData);

        /// <summary>
        /// Convert Excel document
        /// </summary>
        /// <remarks>
        /// Convert an Excel document to PDF or other format.
        /// </remarks>
        /// <exception cref="Muhimbi.PDF.Online.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="inputExcelData"></param>
        /// <returns>Task of ApiResponse (OperationResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<OperationResponse>> ConvertExcelAsyncWithHttpInfo (ConvertExcelData inputExcelData);
        /// <summary>
        /// Convert HTML to PDF
        /// </summary>
        /// <remarks>
        /// Convert URLs or HTML to PDF.
        /// </remarks>
        /// <exception cref="Muhimbi.PDF.Online.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="inputData"></param>
        /// <returns>Task of OperationResponse</returns>
        System.Threading.Tasks.Task<OperationResponse> ConvertHtmlAsync (ConvertHtmlData inputData);

        /// <summary>
        /// Convert HTML to PDF
        /// </summary>
        /// <remarks>
        /// Convert URLs or HTML to PDF.
        /// </remarks>
        /// <exception cref="Muhimbi.PDF.Online.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="inputData"></param>
        /// <returns>Task of ApiResponse (OperationResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<OperationResponse>> ConvertHtmlAsyncWithHttpInfo (ConvertHtmlData inputData);
        /// <summary>
        /// Convert InfoPath document
        /// </summary>
        /// <remarks>
        /// Convert a InfoPath file to PDF or other format.
        /// </remarks>
        /// <exception cref="Muhimbi.PDF.Online.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="inputInfopathData"></param>
        /// <returns>Task of OperationResponse</returns>
        System.Threading.Tasks.Task<OperationResponse> ConvertInfopathAsync (ConvertInfopathData inputInfopathData);

        /// <summary>
        /// Convert InfoPath document
        /// </summary>
        /// <remarks>
        /// Convert a InfoPath file to PDF or other format.
        /// </remarks>
        /// <exception cref="Muhimbi.PDF.Online.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="inputInfopathData"></param>
        /// <returns>Task of ApiResponse (OperationResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<OperationResponse>> ConvertInfopathAsyncWithHttpInfo (ConvertInfopathData inputInfopathData);
        /// <summary>
        /// Convert document to PDF-A
        /// </summary>
        /// <remarks>
        /// Convert a document to PDF-A.
        /// </remarks>
        /// <exception cref="Muhimbi.PDF.Online.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="inputPdfData"></param>
        /// <returns>Task of OperationResponse</returns>
        System.Threading.Tasks.Task<OperationResponse> ConvertPdfaAsync (ConvertPdfaData inputPdfData);

        /// <summary>
        /// Convert document to PDF-A
        /// </summary>
        /// <remarks>
        /// Convert a document to PDF-A.
        /// </remarks>
        /// <exception cref="Muhimbi.PDF.Online.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="inputPdfData"></param>
        /// <returns>Task of ApiResponse (OperationResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<OperationResponse>> ConvertPdfaAsyncWithHttpInfo (ConvertPdfaData inputPdfData);
        /// <summary>
        /// Convert PowerPoint document
        /// </summary>
        /// <remarks>
        /// Convert a PowerPoint document to PDF or other format.
        /// </remarks>
        /// <exception cref="Muhimbi.PDF.Online.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="inputPowerpointData"></param>
        /// <returns>Task of OperationResponse</returns>
        System.Threading.Tasks.Task<OperationResponse> ConvertPowerpointAsync (ConvertPowerpointData inputPowerpointData);

        /// <summary>
        /// Convert PowerPoint document
        /// </summary>
        /// <remarks>
        /// Convert a PowerPoint document to PDF or other format.
        /// </remarks>
        /// <exception cref="Muhimbi.PDF.Online.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="inputPowerpointData"></param>
        /// <returns>Task of ApiResponse (OperationResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<OperationResponse>> ConvertPowerpointAsyncWithHttpInfo (ConvertPowerpointData inputPowerpointData);
        /// <summary>
        /// Convert Visio document
        /// </summary>
        /// <remarks>
        /// Convert a Visio document to PDF or XPS.
        /// </remarks>
        /// <exception cref="Muhimbi.PDF.Online.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="inputVisioData"></param>
        /// <returns>Task of OperationResponse</returns>
        System.Threading.Tasks.Task<OperationResponse> ConvertVisioAsync (ConvertVisioData inputVisioData);

        /// <summary>
        /// Convert Visio document
        /// </summary>
        /// <remarks>
        /// Convert a Visio document to PDF or XPS.
        /// </remarks>
        /// <exception cref="Muhimbi.PDF.Online.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="inputVisioData"></param>
        /// <returns>Task of ApiResponse (OperationResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<OperationResponse>> ConvertVisioAsyncWithHttpInfo (ConvertVisioData inputVisioData);
        /// <summary>
        /// Convert Word document
        /// </summary>
        /// <remarks>
        /// Convert a Word document to PDF or other format.
        /// </remarks>
        /// <exception cref="Muhimbi.PDF.Online.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="inputWordData"></param>
        /// <returns>Task of OperationResponse</returns>
        System.Threading.Tasks.Task<OperationResponse> ConvertWordAsync (ConvertWordData inputWordData);

        /// <summary>
        /// Convert Word document
        /// </summary>
        /// <remarks>
        /// Convert a Word document to PDF or other format.
        /// </remarks>
        /// <exception cref="Muhimbi.PDF.Online.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="inputWordData"></param>
        /// <returns>Task of ApiResponse (OperationResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<OperationResponse>> ConvertWordAsyncWithHttpInfo (ConvertWordData inputWordData);
        /// <summary>
        /// Export PDF Forms Data
        /// </summary>
        /// <remarks>
        /// Convert data from a PDF Form to XML, FDF or XFDF.
        /// </remarks>
        /// <exception cref="Muhimbi.PDF.Online.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="inputFromPdfData"></param>
        /// <returns>Task of OperationResponse</returns>
        System.Threading.Tasks.Task<OperationResponse> ExportFormDataAsync (ExportFormData inputFromPdfData);

        /// <summary>
        /// Export PDF Forms Data
        /// </summary>
        /// <remarks>
        /// Convert data from a PDF Form to XML, FDF or XFDF.
        /// </remarks>
        /// <exception cref="Muhimbi.PDF.Online.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="inputFromPdfData"></param>
        /// <returns>Task of ApiResponse (OperationResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<OperationResponse>> ExportFormDataAsyncWithHttpInfo (ExportFormData inputFromPdfData);
        /// <summary>
        /// Import PDF Forms data
        /// </summary>
        /// <remarks>
        /// Import PDF Forms data.
        /// </remarks>
        /// <exception cref="Muhimbi.PDF.Online.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="inputXmlData"></param>
        /// <returns>Task of OperationResponse</returns>
        System.Threading.Tasks.Task<OperationResponse> ImportFormDataAsync (ImportFormData inputXmlData);

        /// <summary>
        /// Import PDF Forms data
        /// </summary>
        /// <remarks>
        /// Import PDF Forms data.
        /// </remarks>
        /// <exception cref="Muhimbi.PDF.Online.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="inputXmlData"></param>
        /// <returns>Task of ApiResponse (OperationResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<OperationResponse>> ImportFormDataAsyncWithHttpInfo (ImportFormData inputXmlData);
        #endregion Asynchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public partial class ConvertApi : IConvertApi
    {
        private Muhimbi.PDF.Online.Client.Client.ExceptionFactory _exceptionFactory = (name, response) => null;

        /// <summary>
        /// Initializes a new instance of the <see cref="ConvertApi"/> class.
        /// </summary>
        /// <returns></returns>
        public ConvertApi(String basePath)
        {
            this.Configuration = new Configuration(new ApiClient(basePath));

            ExceptionFactory = Muhimbi.PDF.Online.Client.Client.Configuration.DefaultExceptionFactory;

            // ensure API client has configuration ready
            if (Configuration.ApiClient.Configuration == null)
            {
                this.Configuration.ApiClient.Configuration = this.Configuration;
            }
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="ConvertApi"/> class
        /// using Configuration object
        /// </summary>
        /// <param name="configuration">An instance of Configuration</param>
        /// <returns></returns>
        public ConvertApi(Configuration configuration = null)
        {
            if (configuration == null) // use the default one in Configuration
                this.Configuration = Configuration.Default;
            else
                this.Configuration = configuration;

            ExceptionFactory = Muhimbi.PDF.Online.Client.Client.Configuration.DefaultExceptionFactory;

            // ensure API client has configuration ready
            if (Configuration.ApiClient.Configuration == null)
            {
                this.Configuration.ApiClient.Configuration = this.Configuration;
            }
        }

        /// <summary>
        /// Gets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        public String GetBasePath()
        {
            return this.Configuration.ApiClient.RestClient.BaseUrl.ToString();
        }

        /// <summary>
        /// Sets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        [Obsolete("SetBasePath is deprecated, please do 'Configuration.ApiClient = new ApiClient(\"http://new-path\")' instead.")]
        public void SetBasePath(String basePath)
        {
            // do nothing
        }

        /// <summary>
        /// Gets or sets the configuration object
        /// </summary>
        /// <value>An instance of the Configuration</value>
        public Configuration Configuration {get; set;}

        /// <summary>
        /// Provides a factory method hook for the creation of exceptions.
        /// </summary>
        public Muhimbi.PDF.Online.Client.Client.ExceptionFactory ExceptionFactory
        {
            get
            {
                if (_exceptionFactory != null && _exceptionFactory.GetInvocationList().Length > 1)
                {
                    throw new InvalidOperationException("Multicast delegate for ExceptionFactory is unsupported.");
                }
                return _exceptionFactory;
            }
            set { _exceptionFactory = value; }
        }

        /// <summary>
        /// Gets the default header.
        /// </summary>
        /// <returns>Dictionary of HTTP header</returns>
        [Obsolete("DefaultHeader is deprecated, please use Configuration.DefaultHeader instead.")]
        public Dictionary<String, String> DefaultHeader()
        {
            return this.Configuration.DefaultHeader;
        }

        /// <summary>
        /// Add default header.
        /// </summary>
        /// <param name="key">Header field name.</param>
        /// <param name="value">Header field value.</param>
        /// <returns></returns>
        [Obsolete("AddDefaultHeader is deprecated, please use Configuration.AddDefaultHeader instead.")]
        public void AddDefaultHeader(string key, string value)
        {
            this.Configuration.AddDefaultHeader(key, value);
        }

        /// <summary>
        /// Convert document Convert a file to PDF or other format.
        /// </summary>
        /// <exception cref="Muhimbi.PDF.Online.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="inputData"></param>
        /// <returns>OperationResponse</returns>
        public OperationResponse Convert (ConvertData inputData)
        {
             ApiResponse<OperationResponse> localVarResponse = ConvertWithHttpInfo(inputData);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Convert document Convert a file to PDF or other format.
        /// </summary>
        /// <exception cref="Muhimbi.PDF.Online.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="inputData"></param>
        /// <returns>ApiResponse of OperationResponse</returns>
        public ApiResponse< OperationResponse > ConvertWithHttpInfo (ConvertData inputData)
        {
            // verify the required parameter 'inputData' is set
            if (inputData == null)
                throw new ApiException(400, "Missing required parameter 'inputData' when calling ConvertApi->Convert");

            var localVarPath = "/v1/operations/convert";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (inputData != null && inputData.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(inputData); // http body (model) parameter
            }
            else
            {
                localVarPostBody = inputData; // byte array
            }

            // authentication (oauth2_auth) required
            // oauth required
            if (!String.IsNullOrEmpty(Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + Configuration.AccessToken;
            }
            // authentication (api_key) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("api_key")))
            {
                localVarHeaderParams["api_key"] = Configuration.GetApiKeyWithPrefix("api_key");
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("Convert", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<OperationResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (OperationResponse) Configuration.ApiClient.Deserialize(localVarResponse, typeof(OperationResponse)));
            
        }

        /// <summary>
        /// Convert document Convert a file to PDF or other format.
        /// </summary>
        /// <exception cref="Muhimbi.PDF.Online.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="inputData"></param>
        /// <returns>Task of OperationResponse</returns>
        public async System.Threading.Tasks.Task<OperationResponse> ConvertAsync (ConvertData inputData)
        {
             ApiResponse<OperationResponse> localVarResponse = await ConvertAsyncWithHttpInfo(inputData);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Convert document Convert a file to PDF or other format.
        /// </summary>
        /// <exception cref="Muhimbi.PDF.Online.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="inputData"></param>
        /// <returns>Task of ApiResponse (OperationResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<OperationResponse>> ConvertAsyncWithHttpInfo (ConvertData inputData)
        {
            // verify the required parameter 'inputData' is set
            if (inputData == null)
                throw new ApiException(400, "Missing required parameter 'inputData' when calling ConvertApi->Convert");

            var localVarPath = "/v1/operations/convert";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (inputData != null && inputData.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(inputData); // http body (model) parameter
            }
            else
            {
                localVarPostBody = inputData; // byte array
            }

            // authentication (oauth2_auth) required
            // oauth required
            if (!String.IsNullOrEmpty(Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + Configuration.AccessToken;
            }
            // authentication (api_key) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("api_key")))
            {
                localVarHeaderParams["api_key"] = Configuration.GetApiKeyWithPrefix("api_key");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("Convert", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<OperationResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (OperationResponse) Configuration.ApiClient.Deserialize(localVarResponse, typeof(OperationResponse)));
            
        }

        /// <summary>
        /// Convert CAD drawing to PDF Convert a CAD drawing file to PDF or other format.
        /// </summary>
        /// <exception cref="Muhimbi.PDF.Online.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="inputCadData"></param>
        /// <returns>OperationResponse</returns>
        public OperationResponse ConvertCad (ConvertCadData inputCadData)
        {
             ApiResponse<OperationResponse> localVarResponse = ConvertCadWithHttpInfo(inputCadData);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Convert CAD drawing to PDF Convert a CAD drawing file to PDF or other format.
        /// </summary>
        /// <exception cref="Muhimbi.PDF.Online.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="inputCadData"></param>
        /// <returns>ApiResponse of OperationResponse</returns>
        public ApiResponse< OperationResponse > ConvertCadWithHttpInfo (ConvertCadData inputCadData)
        {
            // verify the required parameter 'inputCadData' is set
            if (inputCadData == null)
                throw new ApiException(400, "Missing required parameter 'inputCadData' when calling ConvertApi->ConvertCad");

            var localVarPath = "/v1/operations/convert_cad";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (inputCadData != null && inputCadData.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(inputCadData); // http body (model) parameter
            }
            else
            {
                localVarPostBody = inputCadData; // byte array
            }

            // authentication (oauth2_auth) required
            // oauth required
            if (!String.IsNullOrEmpty(Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + Configuration.AccessToken;
            }
            // authentication (api_key) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("api_key")))
            {
                localVarHeaderParams["api_key"] = Configuration.GetApiKeyWithPrefix("api_key");
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ConvertCad", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<OperationResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (OperationResponse) Configuration.ApiClient.Deserialize(localVarResponse, typeof(OperationResponse)));
            
        }

        /// <summary>
        /// Convert CAD drawing to PDF Convert a CAD drawing file to PDF or other format.
        /// </summary>
        /// <exception cref="Muhimbi.PDF.Online.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="inputCadData"></param>
        /// <returns>Task of OperationResponse</returns>
        public async System.Threading.Tasks.Task<OperationResponse> ConvertCadAsync (ConvertCadData inputCadData)
        {
             ApiResponse<OperationResponse> localVarResponse = await ConvertCadAsyncWithHttpInfo(inputCadData);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Convert CAD drawing to PDF Convert a CAD drawing file to PDF or other format.
        /// </summary>
        /// <exception cref="Muhimbi.PDF.Online.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="inputCadData"></param>
        /// <returns>Task of ApiResponse (OperationResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<OperationResponse>> ConvertCadAsyncWithHttpInfo (ConvertCadData inputCadData)
        {
            // verify the required parameter 'inputCadData' is set
            if (inputCadData == null)
                throw new ApiException(400, "Missing required parameter 'inputCadData' when calling ConvertApi->ConvertCad");

            var localVarPath = "/v1/operations/convert_cad";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (inputCadData != null && inputCadData.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(inputCadData); // http body (model) parameter
            }
            else
            {
                localVarPostBody = inputCadData; // byte array
            }

            // authentication (oauth2_auth) required
            // oauth required
            if (!String.IsNullOrEmpty(Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + Configuration.AccessToken;
            }
            // authentication (api_key) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("api_key")))
            {
                localVarHeaderParams["api_key"] = Configuration.GetApiKeyWithPrefix("api_key");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ConvertCad", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<OperationResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (OperationResponse) Configuration.ApiClient.Deserialize(localVarResponse, typeof(OperationResponse)));
            
        }

        /// <summary>
        /// Convert email to PDF Convert an email file to PDF or other format.
        /// </summary>
        /// <exception cref="Muhimbi.PDF.Online.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="inputEmailData"></param>
        /// <returns>OperationResponse</returns>
        public OperationResponse ConvertEmail (ConvertEmailData inputEmailData)
        {
             ApiResponse<OperationResponse> localVarResponse = ConvertEmailWithHttpInfo(inputEmailData);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Convert email to PDF Convert an email file to PDF or other format.
        /// </summary>
        /// <exception cref="Muhimbi.PDF.Online.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="inputEmailData"></param>
        /// <returns>ApiResponse of OperationResponse</returns>
        public ApiResponse< OperationResponse > ConvertEmailWithHttpInfo (ConvertEmailData inputEmailData)
        {
            // verify the required parameter 'inputEmailData' is set
            if (inputEmailData == null)
                throw new ApiException(400, "Missing required parameter 'inputEmailData' when calling ConvertApi->ConvertEmail");

            var localVarPath = "/v1/operations/convert_email";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (inputEmailData != null && inputEmailData.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(inputEmailData); // http body (model) parameter
            }
            else
            {
                localVarPostBody = inputEmailData; // byte array
            }

            // authentication (oauth2_auth) required
            // oauth required
            if (!String.IsNullOrEmpty(Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + Configuration.AccessToken;
            }
            // authentication (api_key) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("api_key")))
            {
                localVarHeaderParams["api_key"] = Configuration.GetApiKeyWithPrefix("api_key");
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ConvertEmail", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<OperationResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (OperationResponse) Configuration.ApiClient.Deserialize(localVarResponse, typeof(OperationResponse)));
            
        }

        /// <summary>
        /// Convert email to PDF Convert an email file to PDF or other format.
        /// </summary>
        /// <exception cref="Muhimbi.PDF.Online.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="inputEmailData"></param>
        /// <returns>Task of OperationResponse</returns>
        public async System.Threading.Tasks.Task<OperationResponse> ConvertEmailAsync (ConvertEmailData inputEmailData)
        {
             ApiResponse<OperationResponse> localVarResponse = await ConvertEmailAsyncWithHttpInfo(inputEmailData);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Convert email to PDF Convert an email file to PDF or other format.
        /// </summary>
        /// <exception cref="Muhimbi.PDF.Online.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="inputEmailData"></param>
        /// <returns>Task of ApiResponse (OperationResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<OperationResponse>> ConvertEmailAsyncWithHttpInfo (ConvertEmailData inputEmailData)
        {
            // verify the required parameter 'inputEmailData' is set
            if (inputEmailData == null)
                throw new ApiException(400, "Missing required parameter 'inputEmailData' when calling ConvertApi->ConvertEmail");

            var localVarPath = "/v1/operations/convert_email";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (inputEmailData != null && inputEmailData.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(inputEmailData); // http body (model) parameter
            }
            else
            {
                localVarPostBody = inputEmailData; // byte array
            }

            // authentication (oauth2_auth) required
            // oauth required
            if (!String.IsNullOrEmpty(Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + Configuration.AccessToken;
            }
            // authentication (api_key) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("api_key")))
            {
                localVarHeaderParams["api_key"] = Configuration.GetApiKeyWithPrefix("api_key");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ConvertEmail", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<OperationResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (OperationResponse) Configuration.ApiClient.Deserialize(localVarResponse, typeof(OperationResponse)));
            
        }

        /// <summary>
        /// Convert Excel document Convert an Excel document to PDF or other format.
        /// </summary>
        /// <exception cref="Muhimbi.PDF.Online.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="inputExcelData"></param>
        /// <returns>OperationResponse</returns>
        public OperationResponse ConvertExcel (ConvertExcelData inputExcelData)
        {
             ApiResponse<OperationResponse> localVarResponse = ConvertExcelWithHttpInfo(inputExcelData);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Convert Excel document Convert an Excel document to PDF or other format.
        /// </summary>
        /// <exception cref="Muhimbi.PDF.Online.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="inputExcelData"></param>
        /// <returns>ApiResponse of OperationResponse</returns>
        public ApiResponse< OperationResponse > ConvertExcelWithHttpInfo (ConvertExcelData inputExcelData)
        {
            // verify the required parameter 'inputExcelData' is set
            if (inputExcelData == null)
                throw new ApiException(400, "Missing required parameter 'inputExcelData' when calling ConvertApi->ConvertExcel");

            var localVarPath = "/v1/operations/convert_excel";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (inputExcelData != null && inputExcelData.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(inputExcelData); // http body (model) parameter
            }
            else
            {
                localVarPostBody = inputExcelData; // byte array
            }

            // authentication (oauth2_auth) required
            // oauth required
            if (!String.IsNullOrEmpty(Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + Configuration.AccessToken;
            }
            // authentication (api_key) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("api_key")))
            {
                localVarHeaderParams["api_key"] = Configuration.GetApiKeyWithPrefix("api_key");
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ConvertExcel", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<OperationResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (OperationResponse) Configuration.ApiClient.Deserialize(localVarResponse, typeof(OperationResponse)));
            
        }

        /// <summary>
        /// Convert Excel document Convert an Excel document to PDF or other format.
        /// </summary>
        /// <exception cref="Muhimbi.PDF.Online.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="inputExcelData"></param>
        /// <returns>Task of OperationResponse</returns>
        public async System.Threading.Tasks.Task<OperationResponse> ConvertExcelAsync (ConvertExcelData inputExcelData)
        {
             ApiResponse<OperationResponse> localVarResponse = await ConvertExcelAsyncWithHttpInfo(inputExcelData);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Convert Excel document Convert an Excel document to PDF or other format.
        /// </summary>
        /// <exception cref="Muhimbi.PDF.Online.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="inputExcelData"></param>
        /// <returns>Task of ApiResponse (OperationResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<OperationResponse>> ConvertExcelAsyncWithHttpInfo (ConvertExcelData inputExcelData)
        {
            // verify the required parameter 'inputExcelData' is set
            if (inputExcelData == null)
                throw new ApiException(400, "Missing required parameter 'inputExcelData' when calling ConvertApi->ConvertExcel");

            var localVarPath = "/v1/operations/convert_excel";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (inputExcelData != null && inputExcelData.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(inputExcelData); // http body (model) parameter
            }
            else
            {
                localVarPostBody = inputExcelData; // byte array
            }

            // authentication (oauth2_auth) required
            // oauth required
            if (!String.IsNullOrEmpty(Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + Configuration.AccessToken;
            }
            // authentication (api_key) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("api_key")))
            {
                localVarHeaderParams["api_key"] = Configuration.GetApiKeyWithPrefix("api_key");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ConvertExcel", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<OperationResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (OperationResponse) Configuration.ApiClient.Deserialize(localVarResponse, typeof(OperationResponse)));
            
        }

        /// <summary>
        /// Convert HTML to PDF Convert URLs or HTML to PDF.
        /// </summary>
        /// <exception cref="Muhimbi.PDF.Online.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="inputData"></param>
        /// <returns>OperationResponse</returns>
        public OperationResponse ConvertHtml (ConvertHtmlData inputData)
        {
             ApiResponse<OperationResponse> localVarResponse = ConvertHtmlWithHttpInfo(inputData);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Convert HTML to PDF Convert URLs or HTML to PDF.
        /// </summary>
        /// <exception cref="Muhimbi.PDF.Online.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="inputData"></param>
        /// <returns>ApiResponse of OperationResponse</returns>
        public ApiResponse< OperationResponse > ConvertHtmlWithHttpInfo (ConvertHtmlData inputData)
        {
            // verify the required parameter 'inputData' is set
            if (inputData == null)
                throw new ApiException(400, "Missing required parameter 'inputData' when calling ConvertApi->ConvertHtml");

            var localVarPath = "/v1/operations/convert_html";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (inputData != null && inputData.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(inputData); // http body (model) parameter
            }
            else
            {
                localVarPostBody = inputData; // byte array
            }

            // authentication (oauth2_auth) required
            // oauth required
            if (!String.IsNullOrEmpty(Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + Configuration.AccessToken;
            }
            // authentication (api_key) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("api_key")))
            {
                localVarHeaderParams["api_key"] = Configuration.GetApiKeyWithPrefix("api_key");
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ConvertHtml", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<OperationResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (OperationResponse) Configuration.ApiClient.Deserialize(localVarResponse, typeof(OperationResponse)));
            
        }

        /// <summary>
        /// Convert HTML to PDF Convert URLs or HTML to PDF.
        /// </summary>
        /// <exception cref="Muhimbi.PDF.Online.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="inputData"></param>
        /// <returns>Task of OperationResponse</returns>
        public async System.Threading.Tasks.Task<OperationResponse> ConvertHtmlAsync (ConvertHtmlData inputData)
        {
             ApiResponse<OperationResponse> localVarResponse = await ConvertHtmlAsyncWithHttpInfo(inputData);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Convert HTML to PDF Convert URLs or HTML to PDF.
        /// </summary>
        /// <exception cref="Muhimbi.PDF.Online.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="inputData"></param>
        /// <returns>Task of ApiResponse (OperationResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<OperationResponse>> ConvertHtmlAsyncWithHttpInfo (ConvertHtmlData inputData)
        {
            // verify the required parameter 'inputData' is set
            if (inputData == null)
                throw new ApiException(400, "Missing required parameter 'inputData' when calling ConvertApi->ConvertHtml");

            var localVarPath = "/v1/operations/convert_html";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (inputData != null && inputData.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(inputData); // http body (model) parameter
            }
            else
            {
                localVarPostBody = inputData; // byte array
            }

            // authentication (oauth2_auth) required
            // oauth required
            if (!String.IsNullOrEmpty(Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + Configuration.AccessToken;
            }
            // authentication (api_key) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("api_key")))
            {
                localVarHeaderParams["api_key"] = Configuration.GetApiKeyWithPrefix("api_key");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ConvertHtml", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<OperationResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (OperationResponse) Configuration.ApiClient.Deserialize(localVarResponse, typeof(OperationResponse)));
            
        }

        /// <summary>
        /// Convert InfoPath document Convert a InfoPath file to PDF or other format.
        /// </summary>
        /// <exception cref="Muhimbi.PDF.Online.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="inputInfopathData"></param>
        /// <returns>OperationResponse</returns>
        public OperationResponse ConvertInfopath (ConvertInfopathData inputInfopathData)
        {
             ApiResponse<OperationResponse> localVarResponse = ConvertInfopathWithHttpInfo(inputInfopathData);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Convert InfoPath document Convert a InfoPath file to PDF or other format.
        /// </summary>
        /// <exception cref="Muhimbi.PDF.Online.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="inputInfopathData"></param>
        /// <returns>ApiResponse of OperationResponse</returns>
        public ApiResponse< OperationResponse > ConvertInfopathWithHttpInfo (ConvertInfopathData inputInfopathData)
        {
            // verify the required parameter 'inputInfopathData' is set
            if (inputInfopathData == null)
                throw new ApiException(400, "Missing required parameter 'inputInfopathData' when calling ConvertApi->ConvertInfopath");

            var localVarPath = "/v1/operations/convert_infopath";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (inputInfopathData != null && inputInfopathData.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(inputInfopathData); // http body (model) parameter
            }
            else
            {
                localVarPostBody = inputInfopathData; // byte array
            }

            // authentication (oauth2_auth) required
            // oauth required
            if (!String.IsNullOrEmpty(Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + Configuration.AccessToken;
            }
            // authentication (api_key) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("api_key")))
            {
                localVarHeaderParams["api_key"] = Configuration.GetApiKeyWithPrefix("api_key");
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ConvertInfopath", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<OperationResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (OperationResponse) Configuration.ApiClient.Deserialize(localVarResponse, typeof(OperationResponse)));
            
        }

        /// <summary>
        /// Convert InfoPath document Convert a InfoPath file to PDF or other format.
        /// </summary>
        /// <exception cref="Muhimbi.PDF.Online.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="inputInfopathData"></param>
        /// <returns>Task of OperationResponse</returns>
        public async System.Threading.Tasks.Task<OperationResponse> ConvertInfopathAsync (ConvertInfopathData inputInfopathData)
        {
             ApiResponse<OperationResponse> localVarResponse = await ConvertInfopathAsyncWithHttpInfo(inputInfopathData);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Convert InfoPath document Convert a InfoPath file to PDF or other format.
        /// </summary>
        /// <exception cref="Muhimbi.PDF.Online.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="inputInfopathData"></param>
        /// <returns>Task of ApiResponse (OperationResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<OperationResponse>> ConvertInfopathAsyncWithHttpInfo (ConvertInfopathData inputInfopathData)
        {
            // verify the required parameter 'inputInfopathData' is set
            if (inputInfopathData == null)
                throw new ApiException(400, "Missing required parameter 'inputInfopathData' when calling ConvertApi->ConvertInfopath");

            var localVarPath = "/v1/operations/convert_infopath";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (inputInfopathData != null && inputInfopathData.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(inputInfopathData); // http body (model) parameter
            }
            else
            {
                localVarPostBody = inputInfopathData; // byte array
            }

            // authentication (oauth2_auth) required
            // oauth required
            if (!String.IsNullOrEmpty(Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + Configuration.AccessToken;
            }
            // authentication (api_key) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("api_key")))
            {
                localVarHeaderParams["api_key"] = Configuration.GetApiKeyWithPrefix("api_key");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ConvertInfopath", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<OperationResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (OperationResponse) Configuration.ApiClient.Deserialize(localVarResponse, typeof(OperationResponse)));
            
        }

        /// <summary>
        /// Convert document to PDF-A Convert a document to PDF-A.
        /// </summary>
        /// <exception cref="Muhimbi.PDF.Online.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="inputPdfData"></param>
        /// <returns>OperationResponse</returns>
        public OperationResponse ConvertPdfa (ConvertPdfaData inputPdfData)
        {
             ApiResponse<OperationResponse> localVarResponse = ConvertPdfaWithHttpInfo(inputPdfData);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Convert document to PDF-A Convert a document to PDF-A.
        /// </summary>
        /// <exception cref="Muhimbi.PDF.Online.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="inputPdfData"></param>
        /// <returns>ApiResponse of OperationResponse</returns>
        public ApiResponse< OperationResponse > ConvertPdfaWithHttpInfo (ConvertPdfaData inputPdfData)
        {
            // verify the required parameter 'inputPdfData' is set
            if (inputPdfData == null)
                throw new ApiException(400, "Missing required parameter 'inputPdfData' when calling ConvertApi->ConvertPdfa");

            var localVarPath = "/v1/operations/convert_pdfa";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (inputPdfData != null && inputPdfData.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(inputPdfData); // http body (model) parameter
            }
            else
            {
                localVarPostBody = inputPdfData; // byte array
            }

            // authentication (oauth2_auth) required
            // oauth required
            if (!String.IsNullOrEmpty(Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + Configuration.AccessToken;
            }
            // authentication (api_key) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("api_key")))
            {
                localVarHeaderParams["api_key"] = Configuration.GetApiKeyWithPrefix("api_key");
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ConvertPdfa", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<OperationResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (OperationResponse) Configuration.ApiClient.Deserialize(localVarResponse, typeof(OperationResponse)));
            
        }

        /// <summary>
        /// Convert document to PDF-A Convert a document to PDF-A.
        /// </summary>
        /// <exception cref="Muhimbi.PDF.Online.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="inputPdfData"></param>
        /// <returns>Task of OperationResponse</returns>
        public async System.Threading.Tasks.Task<OperationResponse> ConvertPdfaAsync (ConvertPdfaData inputPdfData)
        {
             ApiResponse<OperationResponse> localVarResponse = await ConvertPdfaAsyncWithHttpInfo(inputPdfData);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Convert document to PDF-A Convert a document to PDF-A.
        /// </summary>
        /// <exception cref="Muhimbi.PDF.Online.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="inputPdfData"></param>
        /// <returns>Task of ApiResponse (OperationResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<OperationResponse>> ConvertPdfaAsyncWithHttpInfo (ConvertPdfaData inputPdfData)
        {
            // verify the required parameter 'inputPdfData' is set
            if (inputPdfData == null)
                throw new ApiException(400, "Missing required parameter 'inputPdfData' when calling ConvertApi->ConvertPdfa");

            var localVarPath = "/v1/operations/convert_pdfa";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (inputPdfData != null && inputPdfData.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(inputPdfData); // http body (model) parameter
            }
            else
            {
                localVarPostBody = inputPdfData; // byte array
            }

            // authentication (oauth2_auth) required
            // oauth required
            if (!String.IsNullOrEmpty(Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + Configuration.AccessToken;
            }
            // authentication (api_key) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("api_key")))
            {
                localVarHeaderParams["api_key"] = Configuration.GetApiKeyWithPrefix("api_key");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ConvertPdfa", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<OperationResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (OperationResponse) Configuration.ApiClient.Deserialize(localVarResponse, typeof(OperationResponse)));
            
        }

        /// <summary>
        /// Convert PowerPoint document Convert a PowerPoint document to PDF or other format.
        /// </summary>
        /// <exception cref="Muhimbi.PDF.Online.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="inputPowerpointData"></param>
        /// <returns>OperationResponse</returns>
        public OperationResponse ConvertPowerpoint (ConvertPowerpointData inputPowerpointData)
        {
             ApiResponse<OperationResponse> localVarResponse = ConvertPowerpointWithHttpInfo(inputPowerpointData);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Convert PowerPoint document Convert a PowerPoint document to PDF or other format.
        /// </summary>
        /// <exception cref="Muhimbi.PDF.Online.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="inputPowerpointData"></param>
        /// <returns>ApiResponse of OperationResponse</returns>
        public ApiResponse< OperationResponse > ConvertPowerpointWithHttpInfo (ConvertPowerpointData inputPowerpointData)
        {
            // verify the required parameter 'inputPowerpointData' is set
            if (inputPowerpointData == null)
                throw new ApiException(400, "Missing required parameter 'inputPowerpointData' when calling ConvertApi->ConvertPowerpoint");

            var localVarPath = "/v1/operations/convert_powerpoint";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (inputPowerpointData != null && inputPowerpointData.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(inputPowerpointData); // http body (model) parameter
            }
            else
            {
                localVarPostBody = inputPowerpointData; // byte array
            }

            // authentication (oauth2_auth) required
            // oauth required
            if (!String.IsNullOrEmpty(Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + Configuration.AccessToken;
            }
            // authentication (api_key) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("api_key")))
            {
                localVarHeaderParams["api_key"] = Configuration.GetApiKeyWithPrefix("api_key");
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ConvertPowerpoint", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<OperationResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (OperationResponse) Configuration.ApiClient.Deserialize(localVarResponse, typeof(OperationResponse)));
            
        }

        /// <summary>
        /// Convert PowerPoint document Convert a PowerPoint document to PDF or other format.
        /// </summary>
        /// <exception cref="Muhimbi.PDF.Online.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="inputPowerpointData"></param>
        /// <returns>Task of OperationResponse</returns>
        public async System.Threading.Tasks.Task<OperationResponse> ConvertPowerpointAsync (ConvertPowerpointData inputPowerpointData)
        {
             ApiResponse<OperationResponse> localVarResponse = await ConvertPowerpointAsyncWithHttpInfo(inputPowerpointData);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Convert PowerPoint document Convert a PowerPoint document to PDF or other format.
        /// </summary>
        /// <exception cref="Muhimbi.PDF.Online.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="inputPowerpointData"></param>
        /// <returns>Task of ApiResponse (OperationResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<OperationResponse>> ConvertPowerpointAsyncWithHttpInfo (ConvertPowerpointData inputPowerpointData)
        {
            // verify the required parameter 'inputPowerpointData' is set
            if (inputPowerpointData == null)
                throw new ApiException(400, "Missing required parameter 'inputPowerpointData' when calling ConvertApi->ConvertPowerpoint");

            var localVarPath = "/v1/operations/convert_powerpoint";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (inputPowerpointData != null && inputPowerpointData.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(inputPowerpointData); // http body (model) parameter
            }
            else
            {
                localVarPostBody = inputPowerpointData; // byte array
            }

            // authentication (oauth2_auth) required
            // oauth required
            if (!String.IsNullOrEmpty(Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + Configuration.AccessToken;
            }
            // authentication (api_key) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("api_key")))
            {
                localVarHeaderParams["api_key"] = Configuration.GetApiKeyWithPrefix("api_key");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ConvertPowerpoint", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<OperationResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (OperationResponse) Configuration.ApiClient.Deserialize(localVarResponse, typeof(OperationResponse)));
            
        }

        /// <summary>
        /// Convert Visio document Convert a Visio document to PDF or XPS.
        /// </summary>
        /// <exception cref="Muhimbi.PDF.Online.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="inputVisioData"></param>
        /// <returns>OperationResponse</returns>
        public OperationResponse ConvertVisio (ConvertVisioData inputVisioData)
        {
             ApiResponse<OperationResponse> localVarResponse = ConvertVisioWithHttpInfo(inputVisioData);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Convert Visio document Convert a Visio document to PDF or XPS.
        /// </summary>
        /// <exception cref="Muhimbi.PDF.Online.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="inputVisioData"></param>
        /// <returns>ApiResponse of OperationResponse</returns>
        public ApiResponse< OperationResponse > ConvertVisioWithHttpInfo (ConvertVisioData inputVisioData)
        {
            // verify the required parameter 'inputVisioData' is set
            if (inputVisioData == null)
                throw new ApiException(400, "Missing required parameter 'inputVisioData' when calling ConvertApi->ConvertVisio");

            var localVarPath = "/v1/operations/convert_visio";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (inputVisioData != null && inputVisioData.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(inputVisioData); // http body (model) parameter
            }
            else
            {
                localVarPostBody = inputVisioData; // byte array
            }

            // authentication (oauth2_auth) required
            // oauth required
            if (!String.IsNullOrEmpty(Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + Configuration.AccessToken;
            }
            // authentication (api_key) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("api_key")))
            {
                localVarHeaderParams["api_key"] = Configuration.GetApiKeyWithPrefix("api_key");
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ConvertVisio", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<OperationResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (OperationResponse) Configuration.ApiClient.Deserialize(localVarResponse, typeof(OperationResponse)));
            
        }

        /// <summary>
        /// Convert Visio document Convert a Visio document to PDF or XPS.
        /// </summary>
        /// <exception cref="Muhimbi.PDF.Online.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="inputVisioData"></param>
        /// <returns>Task of OperationResponse</returns>
        public async System.Threading.Tasks.Task<OperationResponse> ConvertVisioAsync (ConvertVisioData inputVisioData)
        {
             ApiResponse<OperationResponse> localVarResponse = await ConvertVisioAsyncWithHttpInfo(inputVisioData);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Convert Visio document Convert a Visio document to PDF or XPS.
        /// </summary>
        /// <exception cref="Muhimbi.PDF.Online.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="inputVisioData"></param>
        /// <returns>Task of ApiResponse (OperationResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<OperationResponse>> ConvertVisioAsyncWithHttpInfo (ConvertVisioData inputVisioData)
        {
            // verify the required parameter 'inputVisioData' is set
            if (inputVisioData == null)
                throw new ApiException(400, "Missing required parameter 'inputVisioData' when calling ConvertApi->ConvertVisio");

            var localVarPath = "/v1/operations/convert_visio";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (inputVisioData != null && inputVisioData.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(inputVisioData); // http body (model) parameter
            }
            else
            {
                localVarPostBody = inputVisioData; // byte array
            }

            // authentication (oauth2_auth) required
            // oauth required
            if (!String.IsNullOrEmpty(Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + Configuration.AccessToken;
            }
            // authentication (api_key) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("api_key")))
            {
                localVarHeaderParams["api_key"] = Configuration.GetApiKeyWithPrefix("api_key");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ConvertVisio", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<OperationResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (OperationResponse) Configuration.ApiClient.Deserialize(localVarResponse, typeof(OperationResponse)));
            
        }

        /// <summary>
        /// Convert Word document Convert a Word document to PDF or other format.
        /// </summary>
        /// <exception cref="Muhimbi.PDF.Online.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="inputWordData"></param>
        /// <returns>OperationResponse</returns>
        public OperationResponse ConvertWord (ConvertWordData inputWordData)
        {
             ApiResponse<OperationResponse> localVarResponse = ConvertWordWithHttpInfo(inputWordData);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Convert Word document Convert a Word document to PDF or other format.
        /// </summary>
        /// <exception cref="Muhimbi.PDF.Online.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="inputWordData"></param>
        /// <returns>ApiResponse of OperationResponse</returns>
        public ApiResponse< OperationResponse > ConvertWordWithHttpInfo (ConvertWordData inputWordData)
        {
            // verify the required parameter 'inputWordData' is set
            if (inputWordData == null)
                throw new ApiException(400, "Missing required parameter 'inputWordData' when calling ConvertApi->ConvertWord");

            var localVarPath = "/v1/operations/convert_word";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (inputWordData != null && inputWordData.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(inputWordData); // http body (model) parameter
            }
            else
            {
                localVarPostBody = inputWordData; // byte array
            }

            // authentication (oauth2_auth) required
            // oauth required
            if (!String.IsNullOrEmpty(Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + Configuration.AccessToken;
            }
            // authentication (api_key) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("api_key")))
            {
                localVarHeaderParams["api_key"] = Configuration.GetApiKeyWithPrefix("api_key");
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ConvertWord", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<OperationResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (OperationResponse) Configuration.ApiClient.Deserialize(localVarResponse, typeof(OperationResponse)));
            
        }

        /// <summary>
        /// Convert Word document Convert a Word document to PDF or other format.
        /// </summary>
        /// <exception cref="Muhimbi.PDF.Online.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="inputWordData"></param>
        /// <returns>Task of OperationResponse</returns>
        public async System.Threading.Tasks.Task<OperationResponse> ConvertWordAsync (ConvertWordData inputWordData)
        {
             ApiResponse<OperationResponse> localVarResponse = await ConvertWordAsyncWithHttpInfo(inputWordData);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Convert Word document Convert a Word document to PDF or other format.
        /// </summary>
        /// <exception cref="Muhimbi.PDF.Online.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="inputWordData"></param>
        /// <returns>Task of ApiResponse (OperationResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<OperationResponse>> ConvertWordAsyncWithHttpInfo (ConvertWordData inputWordData)
        {
            // verify the required parameter 'inputWordData' is set
            if (inputWordData == null)
                throw new ApiException(400, "Missing required parameter 'inputWordData' when calling ConvertApi->ConvertWord");

            var localVarPath = "/v1/operations/convert_word";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (inputWordData != null && inputWordData.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(inputWordData); // http body (model) parameter
            }
            else
            {
                localVarPostBody = inputWordData; // byte array
            }

            // authentication (oauth2_auth) required
            // oauth required
            if (!String.IsNullOrEmpty(Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + Configuration.AccessToken;
            }
            // authentication (api_key) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("api_key")))
            {
                localVarHeaderParams["api_key"] = Configuration.GetApiKeyWithPrefix("api_key");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ConvertWord", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<OperationResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (OperationResponse) Configuration.ApiClient.Deserialize(localVarResponse, typeof(OperationResponse)));
            
        }

        /// <summary>
        /// Export PDF Forms Data Convert data from a PDF Form to XML, FDF or XFDF.
        /// </summary>
        /// <exception cref="Muhimbi.PDF.Online.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="inputFromPdfData"></param>
        /// <returns>OperationResponse</returns>
        public OperationResponse ExportFormData (ExportFormData inputFromPdfData)
        {
             ApiResponse<OperationResponse> localVarResponse = ExportFormDataWithHttpInfo(inputFromPdfData);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Export PDF Forms Data Convert data from a PDF Form to XML, FDF or XFDF.
        /// </summary>
        /// <exception cref="Muhimbi.PDF.Online.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="inputFromPdfData"></param>
        /// <returns>ApiResponse of OperationResponse</returns>
        public ApiResponse< OperationResponse > ExportFormDataWithHttpInfo (ExportFormData inputFromPdfData)
        {
            // verify the required parameter 'inputFromPdfData' is set
            if (inputFromPdfData == null)
                throw new ApiException(400, "Missing required parameter 'inputFromPdfData' when calling ConvertApi->ExportFormData");

            var localVarPath = "/v1/operations/export_form_data";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (inputFromPdfData != null && inputFromPdfData.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(inputFromPdfData); // http body (model) parameter
            }
            else
            {
                localVarPostBody = inputFromPdfData; // byte array
            }

            // authentication (oauth2_auth) required
            // oauth required
            if (!String.IsNullOrEmpty(Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + Configuration.AccessToken;
            }
            // authentication (api_key) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("api_key")))
            {
                localVarHeaderParams["api_key"] = Configuration.GetApiKeyWithPrefix("api_key");
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ExportFormData", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<OperationResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (OperationResponse) Configuration.ApiClient.Deserialize(localVarResponse, typeof(OperationResponse)));
            
        }

        /// <summary>
        /// Export PDF Forms Data Convert data from a PDF Form to XML, FDF or XFDF.
        /// </summary>
        /// <exception cref="Muhimbi.PDF.Online.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="inputFromPdfData"></param>
        /// <returns>Task of OperationResponse</returns>
        public async System.Threading.Tasks.Task<OperationResponse> ExportFormDataAsync (ExportFormData inputFromPdfData)
        {
             ApiResponse<OperationResponse> localVarResponse = await ExportFormDataAsyncWithHttpInfo(inputFromPdfData);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Export PDF Forms Data Convert data from a PDF Form to XML, FDF or XFDF.
        /// </summary>
        /// <exception cref="Muhimbi.PDF.Online.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="inputFromPdfData"></param>
        /// <returns>Task of ApiResponse (OperationResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<OperationResponse>> ExportFormDataAsyncWithHttpInfo (ExportFormData inputFromPdfData)
        {
            // verify the required parameter 'inputFromPdfData' is set
            if (inputFromPdfData == null)
                throw new ApiException(400, "Missing required parameter 'inputFromPdfData' when calling ConvertApi->ExportFormData");

            var localVarPath = "/v1/operations/export_form_data";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (inputFromPdfData != null && inputFromPdfData.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(inputFromPdfData); // http body (model) parameter
            }
            else
            {
                localVarPostBody = inputFromPdfData; // byte array
            }

            // authentication (oauth2_auth) required
            // oauth required
            if (!String.IsNullOrEmpty(Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + Configuration.AccessToken;
            }
            // authentication (api_key) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("api_key")))
            {
                localVarHeaderParams["api_key"] = Configuration.GetApiKeyWithPrefix("api_key");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ExportFormData", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<OperationResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (OperationResponse) Configuration.ApiClient.Deserialize(localVarResponse, typeof(OperationResponse)));
            
        }

        /// <summary>
        /// Import PDF Forms data Import PDF Forms data.
        /// </summary>
        /// <exception cref="Muhimbi.PDF.Online.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="inputXmlData"></param>
        /// <returns>OperationResponse</returns>
        public OperationResponse ImportFormData (ImportFormData inputXmlData)
        {
             ApiResponse<OperationResponse> localVarResponse = ImportFormDataWithHttpInfo(inputXmlData);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Import PDF Forms data Import PDF Forms data.
        /// </summary>
        /// <exception cref="Muhimbi.PDF.Online.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="inputXmlData"></param>
        /// <returns>ApiResponse of OperationResponse</returns>
        public ApiResponse< OperationResponse > ImportFormDataWithHttpInfo (ImportFormData inputXmlData)
        {
            // verify the required parameter 'inputXmlData' is set
            if (inputXmlData == null)
                throw new ApiException(400, "Missing required parameter 'inputXmlData' when calling ConvertApi->ImportFormData");

            var localVarPath = "/v1/operations/import_form_data";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (inputXmlData != null && inputXmlData.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(inputXmlData); // http body (model) parameter
            }
            else
            {
                localVarPostBody = inputXmlData; // byte array
            }

            // authentication (oauth2_auth) required
            // oauth required
            if (!String.IsNullOrEmpty(Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + Configuration.AccessToken;
            }
            // authentication (api_key) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("api_key")))
            {
                localVarHeaderParams["api_key"] = Configuration.GetApiKeyWithPrefix("api_key");
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ImportFormData", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<OperationResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (OperationResponse) Configuration.ApiClient.Deserialize(localVarResponse, typeof(OperationResponse)));
            
        }

        /// <summary>
        /// Import PDF Forms data Import PDF Forms data.
        /// </summary>
        /// <exception cref="Muhimbi.PDF.Online.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="inputXmlData"></param>
        /// <returns>Task of OperationResponse</returns>
        public async System.Threading.Tasks.Task<OperationResponse> ImportFormDataAsync (ImportFormData inputXmlData)
        {
             ApiResponse<OperationResponse> localVarResponse = await ImportFormDataAsyncWithHttpInfo(inputXmlData);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Import PDF Forms data Import PDF Forms data.
        /// </summary>
        /// <exception cref="Muhimbi.PDF.Online.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="inputXmlData"></param>
        /// <returns>Task of ApiResponse (OperationResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<OperationResponse>> ImportFormDataAsyncWithHttpInfo (ImportFormData inputXmlData)
        {
            // verify the required parameter 'inputXmlData' is set
            if (inputXmlData == null)
                throw new ApiException(400, "Missing required parameter 'inputXmlData' when calling ConvertApi->ImportFormData");

            var localVarPath = "/v1/operations/import_form_data";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (inputXmlData != null && inputXmlData.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(inputXmlData); // http body (model) parameter
            }
            else
            {
                localVarPostBody = inputXmlData; // byte array
            }

            // authentication (oauth2_auth) required
            // oauth required
            if (!String.IsNullOrEmpty(Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + Configuration.AccessToken;
            }
            // authentication (api_key) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("api_key")))
            {
                localVarHeaderParams["api_key"] = Configuration.GetApiKeyWithPrefix("api_key");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ImportFormData", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<OperationResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (OperationResponse) Configuration.ApiClient.Deserialize(localVarResponse, typeof(OperationResponse)));
            
        }

    }
}
