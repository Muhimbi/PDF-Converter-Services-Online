/* 
 * Muhimbi PDF
 *
 * Convert, Merge, Watermark, Secure and OCR files.
 *
 * OpenAPI spec version: 9.14
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;

namespace Muhimbi.PDF.Online.Client.Model
{
    /// <summary>
    /// SharePoint file information for operation
    /// </summary>
    [DataContract]
    public partial class SharepointFile :  IEquatable<SharepointFile>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="SharepointFile" /> class.
        /// </summary>
        /// <param name="SiteUrl">SharePoint site url (example: http://contoso.sharepoint.com/sites/mysite).</param>
        /// <param name="SourceFileUrl">Path to the source file.</param>
        /// <param name="DestinationFileUrl">Path to the destination file.</param>
        /// <param name="Username">User name to log in to the SharePoint site.</param>
        /// <param name="Password">Password to log in to the SharePoint site’.</param>
        public SharepointFile(string SiteUrl = default(string), string SourceFileUrl = default(string), string DestinationFileUrl = default(string), string Username = default(string), string Password = default(string))
        {
            this.SiteUrl = SiteUrl;
            this.SourceFileUrl = SourceFileUrl;
            this.DestinationFileUrl = DestinationFileUrl;
            this.Username = Username;
            this.Password = Password;
        }
        
        /// <summary>
        /// SharePoint site url (example: http://contoso.sharepoint.com/sites/mysite)
        /// </summary>
        /// <value>SharePoint site url (example: http://contoso.sharepoint.com/sites/mysite)</value>
        [DataMember(Name="site_url", EmitDefaultValue=false)]
        public string SiteUrl { get; set; }
        /// <summary>
        /// Path to the source file
        /// </summary>
        /// <value>Path to the source file</value>
        [DataMember(Name="source_file_url", EmitDefaultValue=false)]
        public string SourceFileUrl { get; set; }
        /// <summary>
        /// Path to the destination file
        /// </summary>
        /// <value>Path to the destination file</value>
        [DataMember(Name="destination_file_url", EmitDefaultValue=false)]
        public string DestinationFileUrl { get; set; }
        /// <summary>
        /// User name to log in to the SharePoint site
        /// </summary>
        /// <value>User name to log in to the SharePoint site</value>
        [DataMember(Name="username", EmitDefaultValue=false)]
        public string Username { get; set; }
        /// <summary>
        /// Password to log in to the SharePoint site’
        /// </summary>
        /// <value>Password to log in to the SharePoint site’</value>
        [DataMember(Name="password", EmitDefaultValue=false)]
        public string Password { get; set; }
        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class SharepointFile {\n");
            sb.Append("  SiteUrl: ").Append(SiteUrl).Append("\n");
            sb.Append("  SourceFileUrl: ").Append(SourceFileUrl).Append("\n");
            sb.Append("  DestinationFileUrl: ").Append(DestinationFileUrl).Append("\n");
            sb.Append("  Username: ").Append(Username).Append("\n");
            sb.Append("  Password: ").Append(Password).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="obj">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object obj)
        {
            // credit: http://stackoverflow.com/a/10454552/677735
            return this.Equals(obj as SharepointFile);
        }

        /// <summary>
        /// Returns true if SharepointFile instances are equal
        /// </summary>
        /// <param name="other">Instance of SharepointFile to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(SharepointFile other)
        {
            // credit: http://stackoverflow.com/a/10454552/677735
            if (other == null)
                return false;

            return 
                (
                    this.SiteUrl == other.SiteUrl ||
                    this.SiteUrl != null &&
                    this.SiteUrl.Equals(other.SiteUrl)
                ) && 
                (
                    this.SourceFileUrl == other.SourceFileUrl ||
                    this.SourceFileUrl != null &&
                    this.SourceFileUrl.Equals(other.SourceFileUrl)
                ) && 
                (
                    this.DestinationFileUrl == other.DestinationFileUrl ||
                    this.DestinationFileUrl != null &&
                    this.DestinationFileUrl.Equals(other.DestinationFileUrl)
                ) && 
                (
                    this.Username == other.Username ||
                    this.Username != null &&
                    this.Username.Equals(other.Username)
                ) && 
                (
                    this.Password == other.Password ||
                    this.Password != null &&
                    this.Password.Equals(other.Password)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            // credit: http://stackoverflow.com/a/263416/677735
            unchecked // Overflow is fine, just wrap
            {
                int hash = 41;
                // Suitable nullity checks etc, of course :)
                if (this.SiteUrl != null)
                    hash = hash * 59 + this.SiteUrl.GetHashCode();
                if (this.SourceFileUrl != null)
                    hash = hash * 59 + this.SourceFileUrl.GetHashCode();
                if (this.DestinationFileUrl != null)
                    hash = hash * 59 + this.DestinationFileUrl.GetHashCode();
                if (this.Username != null)
                    hash = hash * 59 + this.Username.GetHashCode();
                if (this.Password != null)
                    hash = hash * 59 + this.Password.GetHashCode();
                return hash;
            }
        }

        public IEnumerable<ValidationResult> Validate(ValidationContext validationContext)
        { 
            yield break;
        }
    }

}
