/* 
 * Muhimbi PDF
 *
 * Convert, Merge, Watermark, Secure and OCR files.
 *
 * OpenAPI spec version: 9.16
 * Contact: support@muhimbi.com
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;

namespace Muhimbi.PDF.Online.Client.Model
{
    /// <summary>
    /// Parameters for Convert Infopath operation
    /// </summary>
    [DataContract]
    public partial class ImportFormData :  IEquatable<ImportFormData>, IValidatableObject
    {
        /// <summary>
        /// Flatten the result
        /// </summary>
        /// <value>Flatten the result</value>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum FlattenEnum
        {
            
            /// <summary>
            /// Enum Default for "Default"
            /// </summary>
            [EnumMember(Value = "Default")]
            Default,
            
            /// <summary>
            /// Enum Yes for "Yes"
            /// </summary>
            [EnumMember(Value = "Yes")]
            Yes,
            
            /// <summary>
            /// Enum No for "No"
            /// </summary>
            [EnumMember(Value = "No")]
            No
        }

        /// <summary>
        /// Make the result read-only 
        /// </summary>
        /// <value>Make the result read-only </value>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum ReadOnlyEnum
        {
            
            /// <summary>
            /// Enum Default for "Default"
            /// </summary>
            [EnumMember(Value = "Default")]
            Default,
            
            /// <summary>
            /// Enum Yes for "Yes"
            /// </summary>
            [EnumMember(Value = "Yes")]
            Yes,
            
            /// <summary>
            /// Enum No for "No"
            /// </summary>
            [EnumMember(Value = "No")]
            No
        }

        /// <summary>
        /// Flatten the result
        /// </summary>
        /// <value>Flatten the result</value>
        [DataMember(Name="flatten", EmitDefaultValue=false)]
        public FlattenEnum? Flatten { get; set; }
        /// <summary>
        /// Make the result read-only 
        /// </summary>
        /// <value>Make the result read-only </value>
        [DataMember(Name="read_only", EmitDefaultValue=false)]
        public ReadOnlyEnum? _ReadOnly { get; set; }
        /// <summary>
        /// Initializes a new instance of the <see cref="ImportFormData" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected ImportFormData() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="ImportFormData" /> class.
        /// </summary>
        /// <param name="UseAsyncPattern">Use async behaviour for API request (required) (default to false).</param>
        /// <param name="SourceFileName">Name of the source file including extension (required).</param>
        /// <param name="SharepointFile">SharepointFile.</param>
        /// <param name="SourceFileContent">Content of the file to convert (required).</param>
        /// <param name="CopyMetadata">Copy metadata (Only for SharePoint operations) (required) (default to false).</param>
        /// <param name="PdfTemplateFileContent">Content of the PDF Form file.</param>
        /// <param name="PdfTemplateUrl">URL of the PDF Form.</param>
        /// <param name="PdfTemplateUsername">Username to access PDF Form URL.</param>
        /// <param name="PdfTemplateDomain">Domain for Username to access PDF Form URL.</param>
        /// <param name="PdfTemplatePassword">Password to access PDF Form URL.</param>
        /// <param name="Flatten">Flatten the result (default to FlattenEnum.Default).</param>
        /// <param name="_ReadOnly">Make the result read-only  (default to ReadOnlyEnum.Default).</param>
        /// <param name="OverrideSettings">Optional settings using Muhimbi&#39;s XML syntax.</param>
        /// <param name="FailOnError">Fail on error (default to true).</param>
        public ImportFormData(bool? UseAsyncPattern = false, string SourceFileName = default(string), SharepointFile SharepointFile = default(SharepointFile), byte[] SourceFileContent = default(byte[]), bool? CopyMetadata = false, byte[] PdfTemplateFileContent = default(byte[]), string PdfTemplateUrl = default(string), string PdfTemplateUsername = default(string), string PdfTemplateDomain = default(string), string PdfTemplatePassword = default(string), FlattenEnum? Flatten = FlattenEnum.Default, ReadOnlyEnum? _ReadOnly = ReadOnlyEnum.Default, string OverrideSettings = default(string), bool? FailOnError = true)
        {
            // to ensure "UseAsyncPattern" is required (not null)
            if (UseAsyncPattern == null)
            {
                throw new InvalidDataException("UseAsyncPattern is a required property for ImportFormData and cannot be null");
            }
            else
            {
                this.UseAsyncPattern = UseAsyncPattern;
            }
            // to ensure "SourceFileName" is required (not null)
            if (SourceFileName == null)
            {
                throw new InvalidDataException("SourceFileName is a required property for ImportFormData and cannot be null");
            }
            else
            {
                this.SourceFileName = SourceFileName;
            }
            // to ensure "SourceFileContent" is required (not null)
            if (SourceFileContent == null)
            {
                throw new InvalidDataException("SourceFileContent is a required property for ImportFormData and cannot be null");
            }
            else
            {
                this.SourceFileContent = SourceFileContent;
            }
            // to ensure "CopyMetadata" is required (not null)
            if (CopyMetadata == null)
            {
                throw new InvalidDataException("CopyMetadata is a required property for ImportFormData and cannot be null");
            }
            else
            {
                this.CopyMetadata = CopyMetadata;
            }
            this.SharepointFile = SharepointFile;
            this.PdfTemplateFileContent = PdfTemplateFileContent;
            this.PdfTemplateUrl = PdfTemplateUrl;
            this.PdfTemplateUsername = PdfTemplateUsername;
            this.PdfTemplateDomain = PdfTemplateDomain;
            this.PdfTemplatePassword = PdfTemplatePassword;
            // use default value if no "Flatten" provided
            if (Flatten == null)
            {
                this.Flatten = FlattenEnum.Default;
            }
            else
            {
                this.Flatten = Flatten;
            }
            // use default value if no "_ReadOnly" provided
            if (_ReadOnly == null)
            {
                this._ReadOnly = ReadOnlyEnum.Default;
            }
            else
            {
                this._ReadOnly = _ReadOnly;
            }
            this.OverrideSettings = OverrideSettings;
            // use default value if no "FailOnError" provided
            if (FailOnError == null)
            {
                this.FailOnError = true;
            }
            else
            {
                this.FailOnError = FailOnError;
            }
        }
        
        /// <summary>
        /// Use async behaviour for API request
        /// </summary>
        /// <value>Use async behaviour for API request</value>
        [DataMember(Name="use_async_pattern", EmitDefaultValue=false)]
        public bool? UseAsyncPattern { get; set; }
        /// <summary>
        /// Name of the source file including extension
        /// </summary>
        /// <value>Name of the source file including extension</value>
        [DataMember(Name="source_file_name", EmitDefaultValue=false)]
        public string SourceFileName { get; set; }
        /// <summary>
        /// Gets or Sets SharepointFile
        /// </summary>
        [DataMember(Name="sharepoint_file", EmitDefaultValue=false)]
        public SharepointFile SharepointFile { get; set; }
        /// <summary>
        /// Content of the file to convert
        /// </summary>
        /// <value>Content of the file to convert</value>
        [DataMember(Name="source_file_content", EmitDefaultValue=false)]
        public byte[] SourceFileContent { get; set; }
        /// <summary>
        /// Copy metadata (Only for SharePoint operations)
        /// </summary>
        /// <value>Copy metadata (Only for SharePoint operations)</value>
        [DataMember(Name="copy_metadata", EmitDefaultValue=false)]
        public bool? CopyMetadata { get; set; }
        /// <summary>
        /// Content of the PDF Form file
        /// </summary>
        /// <value>Content of the PDF Form file</value>
        [DataMember(Name="pdf_template_file_content", EmitDefaultValue=false)]
        public byte[] PdfTemplateFileContent { get; set; }
        /// <summary>
        /// URL of the PDF Form
        /// </summary>
        /// <value>URL of the PDF Form</value>
        [DataMember(Name="pdf_template_url", EmitDefaultValue=false)]
        public string PdfTemplateUrl { get; set; }
        /// <summary>
        /// Username to access PDF Form URL
        /// </summary>
        /// <value>Username to access PDF Form URL</value>
        [DataMember(Name="pdf_template_username", EmitDefaultValue=false)]
        public string PdfTemplateUsername { get; set; }
        /// <summary>
        /// Domain for Username to access PDF Form URL
        /// </summary>
        /// <value>Domain for Username to access PDF Form URL</value>
        [DataMember(Name="pdf_template_domain", EmitDefaultValue=false)]
        public string PdfTemplateDomain { get; set; }
        /// <summary>
        /// Password to access PDF Form URL
        /// </summary>
        /// <value>Password to access PDF Form URL</value>
        [DataMember(Name="pdf_template_password", EmitDefaultValue=false)]
        public string PdfTemplatePassword { get; set; }
        /// <summary>
        /// Optional settings using Muhimbi&#39;s XML syntax
        /// </summary>
        /// <value>Optional settings using Muhimbi&#39;s XML syntax</value>
        [DataMember(Name="override_settings", EmitDefaultValue=false)]
        public string OverrideSettings { get; set; }
        /// <summary>
        /// Fail on error
        /// </summary>
        /// <value>Fail on error</value>
        [DataMember(Name="fail_on_error", EmitDefaultValue=false)]
        public bool? FailOnError { get; set; }
        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class ImportFormData {\n");
            sb.Append("  UseAsyncPattern: ").Append(UseAsyncPattern).Append("\n");
            sb.Append("  SourceFileName: ").Append(SourceFileName).Append("\n");
            sb.Append("  SharepointFile: ").Append(SharepointFile).Append("\n");
            sb.Append("  SourceFileContent: ").Append(SourceFileContent).Append("\n");
            sb.Append("  CopyMetadata: ").Append(CopyMetadata).Append("\n");
            sb.Append("  PdfTemplateFileContent: ").Append(PdfTemplateFileContent).Append("\n");
            sb.Append("  PdfTemplateUrl: ").Append(PdfTemplateUrl).Append("\n");
            sb.Append("  PdfTemplateUsername: ").Append(PdfTemplateUsername).Append("\n");
            sb.Append("  PdfTemplateDomain: ").Append(PdfTemplateDomain).Append("\n");
            sb.Append("  PdfTemplatePassword: ").Append(PdfTemplatePassword).Append("\n");
            sb.Append("  Flatten: ").Append(Flatten).Append("\n");
            sb.Append("  _ReadOnly: ").Append(_ReadOnly).Append("\n");
            sb.Append("  OverrideSettings: ").Append(OverrideSettings).Append("\n");
            sb.Append("  FailOnError: ").Append(FailOnError).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="obj">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object obj)
        {
            // credit: http://stackoverflow.com/a/10454552/677735
            return this.Equals(obj as ImportFormData);
        }

        /// <summary>
        /// Returns true if ImportFormData instances are equal
        /// </summary>
        /// <param name="other">Instance of ImportFormData to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(ImportFormData other)
        {
            // credit: http://stackoverflow.com/a/10454552/677735
            if (other == null)
                return false;

            return 
                (
                    this.UseAsyncPattern == other.UseAsyncPattern ||
                    this.UseAsyncPattern != null &&
                    this.UseAsyncPattern.Equals(other.UseAsyncPattern)
                ) && 
                (
                    this.SourceFileName == other.SourceFileName ||
                    this.SourceFileName != null &&
                    this.SourceFileName.Equals(other.SourceFileName)
                ) && 
                (
                    this.SharepointFile == other.SharepointFile ||
                    this.SharepointFile != null &&
                    this.SharepointFile.Equals(other.SharepointFile)
                ) && 
                (
                    this.SourceFileContent == other.SourceFileContent ||
                    this.SourceFileContent != null &&
                    this.SourceFileContent.Equals(other.SourceFileContent)
                ) && 
                (
                    this.CopyMetadata == other.CopyMetadata ||
                    this.CopyMetadata != null &&
                    this.CopyMetadata.Equals(other.CopyMetadata)
                ) && 
                (
                    this.PdfTemplateFileContent == other.PdfTemplateFileContent ||
                    this.PdfTemplateFileContent != null &&
                    this.PdfTemplateFileContent.Equals(other.PdfTemplateFileContent)
                ) && 
                (
                    this.PdfTemplateUrl == other.PdfTemplateUrl ||
                    this.PdfTemplateUrl != null &&
                    this.PdfTemplateUrl.Equals(other.PdfTemplateUrl)
                ) && 
                (
                    this.PdfTemplateUsername == other.PdfTemplateUsername ||
                    this.PdfTemplateUsername != null &&
                    this.PdfTemplateUsername.Equals(other.PdfTemplateUsername)
                ) && 
                (
                    this.PdfTemplateDomain == other.PdfTemplateDomain ||
                    this.PdfTemplateDomain != null &&
                    this.PdfTemplateDomain.Equals(other.PdfTemplateDomain)
                ) && 
                (
                    this.PdfTemplatePassword == other.PdfTemplatePassword ||
                    this.PdfTemplatePassword != null &&
                    this.PdfTemplatePassword.Equals(other.PdfTemplatePassword)
                ) && 
                (
                    this.Flatten == other.Flatten ||
                    this.Flatten != null &&
                    this.Flatten.Equals(other.Flatten)
                ) && 
                (
                    this._ReadOnly == other._ReadOnly ||
                    this._ReadOnly != null &&
                    this._ReadOnly.Equals(other._ReadOnly)
                ) && 
                (
                    this.OverrideSettings == other.OverrideSettings ||
                    this.OverrideSettings != null &&
                    this.OverrideSettings.Equals(other.OverrideSettings)
                ) && 
                (
                    this.FailOnError == other.FailOnError ||
                    this.FailOnError != null &&
                    this.FailOnError.Equals(other.FailOnError)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            // credit: http://stackoverflow.com/a/263416/677735
            unchecked // Overflow is fine, just wrap
            {
                int hash = 41;
                // Suitable nullity checks etc, of course :)
                if (this.UseAsyncPattern != null)
                    hash = hash * 59 + this.UseAsyncPattern.GetHashCode();
                if (this.SourceFileName != null)
                    hash = hash * 59 + this.SourceFileName.GetHashCode();
                if (this.SharepointFile != null)
                    hash = hash * 59 + this.SharepointFile.GetHashCode();
                if (this.SourceFileContent != null)
                    hash = hash * 59 + this.SourceFileContent.GetHashCode();
                if (this.CopyMetadata != null)
                    hash = hash * 59 + this.CopyMetadata.GetHashCode();
                if (this.PdfTemplateFileContent != null)
                    hash = hash * 59 + this.PdfTemplateFileContent.GetHashCode();
                if (this.PdfTemplateUrl != null)
                    hash = hash * 59 + this.PdfTemplateUrl.GetHashCode();
                if (this.PdfTemplateUsername != null)
                    hash = hash * 59 + this.PdfTemplateUsername.GetHashCode();
                if (this.PdfTemplateDomain != null)
                    hash = hash * 59 + this.PdfTemplateDomain.GetHashCode();
                if (this.PdfTemplatePassword != null)
                    hash = hash * 59 + this.PdfTemplatePassword.GetHashCode();
                if (this.Flatten != null)
                    hash = hash * 59 + this.Flatten.GetHashCode();
                if (this._ReadOnly != null)
                    hash = hash * 59 + this._ReadOnly.GetHashCode();
                if (this.OverrideSettings != null)
                    hash = hash * 59 + this.OverrideSettings.GetHashCode();
                if (this.FailOnError != null)
                    hash = hash * 59 + this.FailOnError.GetHashCode();
                return hash;
            }
        }

        public IEnumerable<ValidationResult> Validate(ValidationContext validationContext)
        { 
            yield break;
        }
    }

}
