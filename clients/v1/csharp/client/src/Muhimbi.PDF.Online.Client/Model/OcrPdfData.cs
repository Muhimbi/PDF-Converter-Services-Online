/* 
 * Muhimbi PDF
 *
 * Convert, Merge, Watermark, Secure and OCR files.
 *
 * OpenAPI spec version: 9.16
 * Contact: support@muhimbi.com
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;

namespace Muhimbi.PDF.Online.Client.Model
{
    /// <summary>
    /// Parameters for OCRText operation
    /// </summary>
    [DataContract]
    public partial class OcrPdfData :  IEquatable<OcrPdfData>, IValidatableObject
    {
        /// <summary>
        /// Language
        /// </summary>
        /// <value>Language</value>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum LanguageEnum
        {
            
            /// <summary>
            /// Enum English for "English"
            /// </summary>
            [EnumMember(Value = "English")]
            English,
            
            /// <summary>
            /// Enum Arabic for "Arabic"
            /// </summary>
            [EnumMember(Value = "Arabic")]
            Arabic,
            
            /// <summary>
            /// Enum Danish for "Danish"
            /// </summary>
            [EnumMember(Value = "Danish")]
            Danish,
            
            /// <summary>
            /// Enum German for "German"
            /// </summary>
            [EnumMember(Value = "German")]
            German,
            
            /// <summary>
            /// Enum Dutch for "Dutch"
            /// </summary>
            [EnumMember(Value = "Dutch")]
            Dutch,
            
            /// <summary>
            /// Enum Finnish for "Finnish"
            /// </summary>
            [EnumMember(Value = "Finnish")]
            Finnish,
            
            /// <summary>
            /// Enum French for "French"
            /// </summary>
            [EnumMember(Value = "French")]
            French,
            
            /// <summary>
            /// Enum Hebrew for "Hebrew"
            /// </summary>
            [EnumMember(Value = "Hebrew")]
            Hebrew,
            
            /// <summary>
            /// Enum Hungarian for "Hungarian"
            /// </summary>
            [EnumMember(Value = "Hungarian")]
            Hungarian,
            
            /// <summary>
            /// Enum Italian for "Italian"
            /// </summary>
            [EnumMember(Value = "Italian")]
            Italian,
            
            /// <summary>
            /// Enum Norwegian for "Norwegian"
            /// </summary>
            [EnumMember(Value = "Norwegian")]
            Norwegian,
            
            /// <summary>
            /// Enum Portuguese for "Portuguese"
            /// </summary>
            [EnumMember(Value = "Portuguese")]
            Portuguese,
            
            /// <summary>
            /// Enum Spanish for "Spanish"
            /// </summary>
            [EnumMember(Value = "Spanish")]
            Spanish,
            
            /// <summary>
            /// Enum Swedish for "Swedish"
            /// </summary>
            [EnumMember(Value = "Swedish")]
            Swedish,
            
            /// <summary>
            /// Enum Russian for "Russian"
            /// </summary>
            [EnumMember(Value = "Russian")]
            Russian
        }

        /// <summary>
        /// Performance
        /// </summary>
        /// <value>Performance</value>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum PerformanceEnum
        {
            
            /// <summary>
            /// Enum Slowbutaccurate for "Slow but accurate"
            /// </summary>
            [EnumMember(Value = "Slow but accurate")]
            Slowbutaccurate,
            
            /// <summary>
            /// Enum Fasterandlessaccurate for "Faster and less accurate"
            /// </summary>
            [EnumMember(Value = "Faster and less accurate")]
            Fasterandlessaccurate,
            
            /// <summary>
            /// Enum Fastestandleastaccurate for "Fastest and least accurate"
            /// </summary>
            [EnumMember(Value = "Fastest and least accurate")]
            Fastestandleastaccurate
        }

        /// <summary>
        /// Characters option
        /// </summary>
        /// <value>Characters option</value>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum CharactersOptionEnum
        {
            
            /// <summary>
            /// Enum None for "None"
            /// </summary>
            [EnumMember(Value = "None")]
            None,
            
            /// <summary>
            /// Enum Whitelist for "Whitelist"
            /// </summary>
            [EnumMember(Value = "Whitelist")]
            Whitelist,
            
            /// <summary>
            /// Enum Blacklist for "Blacklist"
            /// </summary>
            [EnumMember(Value = "Blacklist")]
            Blacklist
        }

        /// <summary>
        /// Language
        /// </summary>
        /// <value>Language</value>
        [DataMember(Name="language", EmitDefaultValue=false)]
        public LanguageEnum? Language { get; set; }
        /// <summary>
        /// Performance
        /// </summary>
        /// <value>Performance</value>
        [DataMember(Name="performance", EmitDefaultValue=false)]
        public PerformanceEnum? Performance { get; set; }
        /// <summary>
        /// Characters option
        /// </summary>
        /// <value>Characters option</value>
        [DataMember(Name="characters_option", EmitDefaultValue=false)]
        public CharactersOptionEnum? CharactersOption { get; set; }
        /// <summary>
        /// Initializes a new instance of the <see cref="OcrPdfData" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected OcrPdfData() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="OcrPdfData" /> class.
        /// </summary>
        /// <param name="UseAsyncPattern">Use async behaviour for API request (required) (default to false).</param>
        /// <param name="SourceFileName">Name of the source file including extension (required).</param>
        /// <param name="SourceFileContent">Content of the file to OCR (required).</param>
        /// <param name="SharepointFile">SharepointFile.</param>
        /// <param name="CopyMetadata">Copy metadata (For SharePoint only) (required) (default to false).</param>
        /// <param name="Language">Language (default to LanguageEnum.English).</param>
        /// <param name="Performance">Performance (default to PerformanceEnum.Slowbutaccurate).</param>
        /// <param name="CharactersOption">Characters option (default to CharactersOptionEnum.None).</param>
        /// <param name="Characters">Characters to blacklist or whitelist.</param>
        /// <param name="Paginate">Paginate (default to false).</param>
        /// <param name="Regions">Limit the area to OCR to one or more specific areas.</param>
        /// <param name="FailOnError">Fail on error (default to true).</param>
        public OcrPdfData(bool? UseAsyncPattern = false, string SourceFileName = default(string), byte[] SourceFileContent = default(byte[]), SharepointFile SharepointFile = default(SharepointFile), bool? CopyMetadata = false, LanguageEnum? Language = LanguageEnum.English, PerformanceEnum? Performance = PerformanceEnum.Slowbutaccurate, CharactersOptionEnum? CharactersOption = CharactersOptionEnum.None, string Characters = default(string), bool? Paginate = false, string Regions = default(string), bool? FailOnError = true)
        {
            // to ensure "UseAsyncPattern" is required (not null)
            if (UseAsyncPattern == null)
            {
                throw new InvalidDataException("UseAsyncPattern is a required property for OcrPdfData and cannot be null");
            }
            else
            {
                this.UseAsyncPattern = UseAsyncPattern;
            }
            // to ensure "SourceFileName" is required (not null)
            if (SourceFileName == null)
            {
                throw new InvalidDataException("SourceFileName is a required property for OcrPdfData and cannot be null");
            }
            else
            {
                this.SourceFileName = SourceFileName;
            }
            // to ensure "SourceFileContent" is required (not null)
            if (SourceFileContent == null)
            {
                throw new InvalidDataException("SourceFileContent is a required property for OcrPdfData and cannot be null");
            }
            else
            {
                this.SourceFileContent = SourceFileContent;
            }
            // to ensure "CopyMetadata" is required (not null)
            if (CopyMetadata == null)
            {
                throw new InvalidDataException("CopyMetadata is a required property for OcrPdfData and cannot be null");
            }
            else
            {
                this.CopyMetadata = CopyMetadata;
            }
            this.SharepointFile = SharepointFile;
            // use default value if no "Language" provided
            if (Language == null)
            {
                this.Language = LanguageEnum.English;
            }
            else
            {
                this.Language = Language;
            }
            // use default value if no "Performance" provided
            if (Performance == null)
            {
                this.Performance = PerformanceEnum.Slowbutaccurate;
            }
            else
            {
                this.Performance = Performance;
            }
            // use default value if no "CharactersOption" provided
            if (CharactersOption == null)
            {
                this.CharactersOption = CharactersOptionEnum.None;
            }
            else
            {
                this.CharactersOption = CharactersOption;
            }
            this.Characters = Characters;
            // use default value if no "Paginate" provided
            if (Paginate == null)
            {
                this.Paginate = false;
            }
            else
            {
                this.Paginate = Paginate;
            }
            this.Regions = Regions;
            // use default value if no "FailOnError" provided
            if (FailOnError == null)
            {
                this.FailOnError = true;
            }
            else
            {
                this.FailOnError = FailOnError;
            }
        }
        
        /// <summary>
        /// Use async behaviour for API request
        /// </summary>
        /// <value>Use async behaviour for API request</value>
        [DataMember(Name="use_async_pattern", EmitDefaultValue=false)]
        public bool? UseAsyncPattern { get; set; }
        /// <summary>
        /// Name of the source file including extension
        /// </summary>
        /// <value>Name of the source file including extension</value>
        [DataMember(Name="source_file_name", EmitDefaultValue=false)]
        public string SourceFileName { get; set; }
        /// <summary>
        /// Content of the file to OCR
        /// </summary>
        /// <value>Content of the file to OCR</value>
        [DataMember(Name="source_file_content", EmitDefaultValue=false)]
        public byte[] SourceFileContent { get; set; }
        /// <summary>
        /// Gets or Sets SharepointFile
        /// </summary>
        [DataMember(Name="sharepoint_file", EmitDefaultValue=false)]
        public SharepointFile SharepointFile { get; set; }
        /// <summary>
        /// Copy metadata (For SharePoint only)
        /// </summary>
        /// <value>Copy metadata (For SharePoint only)</value>
        [DataMember(Name="copy_metadata", EmitDefaultValue=false)]
        public bool? CopyMetadata { get; set; }
        /// <summary>
        /// Characters to blacklist or whitelist
        /// </summary>
        /// <value>Characters to blacklist or whitelist</value>
        [DataMember(Name="characters", EmitDefaultValue=false)]
        public string Characters { get; set; }
        /// <summary>
        /// Paginate
        /// </summary>
        /// <value>Paginate</value>
        [DataMember(Name="paginate", EmitDefaultValue=false)]
        public bool? Paginate { get; set; }
        /// <summary>
        /// Limit the area to OCR to one or more specific areas
        /// </summary>
        /// <value>Limit the area to OCR to one or more specific areas</value>
        [DataMember(Name="regions", EmitDefaultValue=false)]
        public string Regions { get; set; }
        /// <summary>
        /// Fail on error
        /// </summary>
        /// <value>Fail on error</value>
        [DataMember(Name="fail_on_error", EmitDefaultValue=false)]
        public bool? FailOnError { get; set; }
        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class OcrPdfData {\n");
            sb.Append("  UseAsyncPattern: ").Append(UseAsyncPattern).Append("\n");
            sb.Append("  SourceFileName: ").Append(SourceFileName).Append("\n");
            sb.Append("  SourceFileContent: ").Append(SourceFileContent).Append("\n");
            sb.Append("  SharepointFile: ").Append(SharepointFile).Append("\n");
            sb.Append("  CopyMetadata: ").Append(CopyMetadata).Append("\n");
            sb.Append("  Language: ").Append(Language).Append("\n");
            sb.Append("  Performance: ").Append(Performance).Append("\n");
            sb.Append("  CharactersOption: ").Append(CharactersOption).Append("\n");
            sb.Append("  Characters: ").Append(Characters).Append("\n");
            sb.Append("  Paginate: ").Append(Paginate).Append("\n");
            sb.Append("  Regions: ").Append(Regions).Append("\n");
            sb.Append("  FailOnError: ").Append(FailOnError).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="obj">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object obj)
        {
            // credit: http://stackoverflow.com/a/10454552/677735
            return this.Equals(obj as OcrPdfData);
        }

        /// <summary>
        /// Returns true if OcrPdfData instances are equal
        /// </summary>
        /// <param name="other">Instance of OcrPdfData to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(OcrPdfData other)
        {
            // credit: http://stackoverflow.com/a/10454552/677735
            if (other == null)
                return false;

            return 
                (
                    this.UseAsyncPattern == other.UseAsyncPattern ||
                    this.UseAsyncPattern != null &&
                    this.UseAsyncPattern.Equals(other.UseAsyncPattern)
                ) && 
                (
                    this.SourceFileName == other.SourceFileName ||
                    this.SourceFileName != null &&
                    this.SourceFileName.Equals(other.SourceFileName)
                ) && 
                (
                    this.SourceFileContent == other.SourceFileContent ||
                    this.SourceFileContent != null &&
                    this.SourceFileContent.Equals(other.SourceFileContent)
                ) && 
                (
                    this.SharepointFile == other.SharepointFile ||
                    this.SharepointFile != null &&
                    this.SharepointFile.Equals(other.SharepointFile)
                ) && 
                (
                    this.CopyMetadata == other.CopyMetadata ||
                    this.CopyMetadata != null &&
                    this.CopyMetadata.Equals(other.CopyMetadata)
                ) && 
                (
                    this.Language == other.Language ||
                    this.Language != null &&
                    this.Language.Equals(other.Language)
                ) && 
                (
                    this.Performance == other.Performance ||
                    this.Performance != null &&
                    this.Performance.Equals(other.Performance)
                ) && 
                (
                    this.CharactersOption == other.CharactersOption ||
                    this.CharactersOption != null &&
                    this.CharactersOption.Equals(other.CharactersOption)
                ) && 
                (
                    this.Characters == other.Characters ||
                    this.Characters != null &&
                    this.Characters.Equals(other.Characters)
                ) && 
                (
                    this.Paginate == other.Paginate ||
                    this.Paginate != null &&
                    this.Paginate.Equals(other.Paginate)
                ) && 
                (
                    this.Regions == other.Regions ||
                    this.Regions != null &&
                    this.Regions.Equals(other.Regions)
                ) && 
                (
                    this.FailOnError == other.FailOnError ||
                    this.FailOnError != null &&
                    this.FailOnError.Equals(other.FailOnError)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            // credit: http://stackoverflow.com/a/263416/677735
            unchecked // Overflow is fine, just wrap
            {
                int hash = 41;
                // Suitable nullity checks etc, of course :)
                if (this.UseAsyncPattern != null)
                    hash = hash * 59 + this.UseAsyncPattern.GetHashCode();
                if (this.SourceFileName != null)
                    hash = hash * 59 + this.SourceFileName.GetHashCode();
                if (this.SourceFileContent != null)
                    hash = hash * 59 + this.SourceFileContent.GetHashCode();
                if (this.SharepointFile != null)
                    hash = hash * 59 + this.SharepointFile.GetHashCode();
                if (this.CopyMetadata != null)
                    hash = hash * 59 + this.CopyMetadata.GetHashCode();
                if (this.Language != null)
                    hash = hash * 59 + this.Language.GetHashCode();
                if (this.Performance != null)
                    hash = hash * 59 + this.Performance.GetHashCode();
                if (this.CharactersOption != null)
                    hash = hash * 59 + this.CharactersOption.GetHashCode();
                if (this.Characters != null)
                    hash = hash * 59 + this.Characters.GetHashCode();
                if (this.Paginate != null)
                    hash = hash * 59 + this.Paginate.GetHashCode();
                if (this.Regions != null)
                    hash = hash * 59 + this.Regions.GetHashCode();
                if (this.FailOnError != null)
                    hash = hash * 59 + this.FailOnError.GetHashCode();
                return hash;
            }
        }

        public IEnumerable<ValidationResult> Validate(ValidationContext validationContext)
        { 
            yield break;
        }
    }

}
