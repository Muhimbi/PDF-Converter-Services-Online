/* 
 * Muhimbi PDF
 *
 * Convert, Merge, Watermark, Secure and OCR files.
 *
 * OpenAPI spec version: 9.16
 * Contact: support@muhimbi.com
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;

namespace Muhimbi.PDF.Online.Client.Model
{
    /// <summary>
    /// Parameters for Convert CAD operation
    /// </summary>
    [DataContract]
    public partial class ConvertCadData :  IEquatable<ConvertCadData>, IValidatableObject
    {
        /// <summary>
        /// Paper size for the output
        /// </summary>
        /// <value>Paper size for the output</value>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum PaperSizeEnum
        {
            
            /// <summary>
            /// Enum A3 for "A3"
            /// </summary>
            [EnumMember(Value = "A3")]
            A3,
            
            /// <summary>
            /// Enum A4 for "A4"
            /// </summary>
            [EnumMember(Value = "A4")]
            A4,
            
            /// <summary>
            /// Enum A5 for "A5"
            /// </summary>
            [EnumMember(Value = "A5")]
            A5,
            
            /// <summary>
            /// Enum Legal for "Legal"
            /// </summary>
            [EnumMember(Value = "Legal")]
            Legal,
            
            /// <summary>
            /// Enum Letter for "Letter"
            /// </summary>
            [EnumMember(Value = "Letter")]
            Letter,
            
            /// <summary>
            /// Enum Custom for "Custom"
            /// </summary>
            [EnumMember(Value = "Custom")]
            Custom
        }

        /// <summary>
        /// The foreground effect or color
        /// </summary>
        /// <value>The foreground effect or color</value>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum ForegroundColorEnum
        {
            
            /// <summary>
            /// Enum Default for "Default"
            /// </summary>
            [EnumMember(Value = "Default")]
            Default,
            
            /// <summary>
            /// Enum CorrectForBackground for "CorrectForBackground"
            /// </summary>
            [EnumMember(Value = "CorrectForBackground")]
            CorrectForBackground,
            
            /// <summary>
            /// Enum Greyscale for "Greyscale"
            /// </summary>
            [EnumMember(Value = "Greyscale")]
            Greyscale,
            
            /// <summary>
            /// Enum GreyscaleDarken for "GreyscaleDarken"
            /// </summary>
            [EnumMember(Value = "GreyscaleDarken")]
            GreyscaleDarken,
            
            /// <summary>
            /// Enum GreyscaleLighten for "GreyscaleLighten"
            /// </summary>
            [EnumMember(Value = "GreyscaleLighten")]
            GreyscaleLighten,
            
            /// <summary>
            /// Enum Darken for "Darken"
            /// </summary>
            [EnumMember(Value = "Darken")]
            Darken,
            
            /// <summary>
            /// Enum Lighten for "Lighten"
            /// </summary>
            [EnumMember(Value = "Lighten")]
            Lighten,
            
            /// <summary>
            /// Enum Custom for "Custom"
            /// </summary>
            [EnumMember(Value = "Custom")]
            Custom
        }

        /// <summary>
        /// Select which layouts should be skipped
        /// </summary>
        /// <value>Select which layouts should be skipped</value>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum EmptyLayoutDetectionModeEnum
        {
            
            /// <summary>
            /// Enum Default for "Default"
            /// </summary>
            [EnumMember(Value = "Default")]
            Default,
            
            /// <summary>
            /// Enum SkipNone for "SkipNone"
            /// </summary>
            [EnumMember(Value = "SkipNone")]
            SkipNone,
            
            /// <summary>
            /// Enum SkipEmptyLayouts for "SkipEmptyLayouts"
            /// </summary>
            [EnumMember(Value = "SkipEmptyLayouts")]
            SkipEmptyLayouts,
            
            /// <summary>
            /// Enum SkipLayoutsWithoutViewports for "SkipLayoutsWithoutViewports"
            /// </summary>
            [EnumMember(Value = "SkipLayoutsWithoutViewports")]
            SkipLayoutsWithoutViewports
        }

        /// <summary>
        /// Specify the sort order in which the layouts are converted
        /// </summary>
        /// <value>Specify the sort order in which the layouts are converted</value>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum LayoutSortOrderEnum
        {
            
            /// <summary>
            /// Enum Default for "Default"
            /// </summary>
            [EnumMember(Value = "Default")]
            Default,
            
            /// <summary>
            /// Enum Ascending for "Ascending"
            /// </summary>
            [EnumMember(Value = "Ascending")]
            Ascending,
            
            /// <summary>
            /// Enum Descending for "Descending"
            /// </summary>
            [EnumMember(Value = "Descending")]
            Descending,
            
            /// <summary>
            /// Enum TabOrder for "TabOrder"
            /// </summary>
            [EnumMember(Value = "TabOrder")]
            TabOrder
        }

        /// <summary>
        /// Paper size for the output
        /// </summary>
        /// <value>Paper size for the output</value>
        [DataMember(Name="paper_size", EmitDefaultValue=false)]
        public PaperSizeEnum? PaperSize { get; set; }
        /// <summary>
        /// The foreground effect or color
        /// </summary>
        /// <value>The foreground effect or color</value>
        [DataMember(Name="foreground_color", EmitDefaultValue=false)]
        public ForegroundColorEnum? ForegroundColor { get; set; }
        /// <summary>
        /// Select which layouts should be skipped
        /// </summary>
        /// <value>Select which layouts should be skipped</value>
        [DataMember(Name="empty_layout_detection_mode", EmitDefaultValue=false)]
        public EmptyLayoutDetectionModeEnum? EmptyLayoutDetectionMode { get; set; }
        /// <summary>
        /// Specify the sort order in which the layouts are converted
        /// </summary>
        /// <value>Specify the sort order in which the layouts are converted</value>
        [DataMember(Name="layout_sort_order", EmitDefaultValue=false)]
        public LayoutSortOrderEnum? LayoutSortOrder { get; set; }
        /// <summary>
        /// Initializes a new instance of the <see cref="ConvertCadData" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected ConvertCadData() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="ConvertCadData" /> class.
        /// </summary>
        /// <param name="UseAsyncPattern">Use async behaviour for API request (required) (default to false).</param>
        /// <param name="SourceFileName">Name of the source file including extension (required).</param>
        /// <param name="SharepointFile">SharepointFile.</param>
        /// <param name="SourceFileContent">Content of the file to convert (required).</param>
        /// <param name="CopyMetadata">Copy metadata (Only for SharePoint operations) (required) (default to false).</param>
        /// <param name="PaperSize">Paper size for the output (default to PaperSizeEnum.Letter).</param>
        /// <param name="PaperSizeCustom">Applicable if &#39;Paper size&#39; is set to &#39;Custom&#39;.</param>
        /// <param name="PageMargins">E.g. &#39;1.5cm&#39; (for uniform) or &#39;0.5in, 0.25in, 0.5in, 0.25in&#39; (for non-uniform) margins (default to &quot;0.25&quot;).</param>
        /// <param name="BackgroundColor">.Net color name or hex color (#aarrggbb or #rrggbb) (default to &quot;White&quot;).</param>
        /// <param name="ForegroundColor">The foreground effect or color (default to ForegroundColorEnum.GreyscaleDarken).</param>
        /// <param name="ForegroundColorCustom">.Net color name or hex color (#aarrggbb or #rrggbb). Applicable if &#39;Foreground color&#39; is set to &#39;Custom&#39;.</param>
        /// <param name="EmptyLayoutDetectionMode">Select which layouts should be skipped (default to EmptyLayoutDetectionModeEnum.SkipEmptyLayouts).</param>
        /// <param name="LayoutSortOrder">Specify the sort order in which the layouts are converted (default to LayoutSortOrderEnum.Ascending).</param>
        /// <param name="StartPage">The first page to include.</param>
        /// <param name="EndPage">The last page to include.</param>
        /// <param name="OverrideSettings">Optional settings using Muhimbi&#39;s XML syntax.</param>
        /// <param name="FailOnError">Fail on error (default to true).</param>
        public ConvertCadData(bool? UseAsyncPattern = false, string SourceFileName = default(string), SharepointFile SharepointFile = default(SharepointFile), byte[] SourceFileContent = default(byte[]), bool? CopyMetadata = false, PaperSizeEnum? PaperSize = PaperSizeEnum.Letter, string PaperSizeCustom = default(string), string PageMargins = "0.25", string BackgroundColor = "White", ForegroundColorEnum? ForegroundColor = ForegroundColorEnum.GreyscaleDarken, string ForegroundColorCustom = default(string), EmptyLayoutDetectionModeEnum? EmptyLayoutDetectionMode = EmptyLayoutDetectionModeEnum.SkipEmptyLayouts, LayoutSortOrderEnum? LayoutSortOrder = LayoutSortOrderEnum.Ascending, int? StartPage = default(int?), int? EndPage = default(int?), string OverrideSettings = default(string), bool? FailOnError = true)
        {
            // to ensure "UseAsyncPattern" is required (not null)
            if (UseAsyncPattern == null)
            {
                throw new InvalidDataException("UseAsyncPattern is a required property for ConvertCadData and cannot be null");
            }
            else
            {
                this.UseAsyncPattern = UseAsyncPattern;
            }
            // to ensure "SourceFileName" is required (not null)
            if (SourceFileName == null)
            {
                throw new InvalidDataException("SourceFileName is a required property for ConvertCadData and cannot be null");
            }
            else
            {
                this.SourceFileName = SourceFileName;
            }
            // to ensure "SourceFileContent" is required (not null)
            if (SourceFileContent == null)
            {
                throw new InvalidDataException("SourceFileContent is a required property for ConvertCadData and cannot be null");
            }
            else
            {
                this.SourceFileContent = SourceFileContent;
            }
            // to ensure "CopyMetadata" is required (not null)
            if (CopyMetadata == null)
            {
                throw new InvalidDataException("CopyMetadata is a required property for ConvertCadData and cannot be null");
            }
            else
            {
                this.CopyMetadata = CopyMetadata;
            }
            this.SharepointFile = SharepointFile;
            // use default value if no "PaperSize" provided
            if (PaperSize == null)
            {
                this.PaperSize = PaperSizeEnum.Letter;
            }
            else
            {
                this.PaperSize = PaperSize;
            }
            this.PaperSizeCustom = PaperSizeCustom;
            // use default value if no "PageMargins" provided
            if (PageMargins == null)
            {
                this.PageMargins = "0.25";
            }
            else
            {
                this.PageMargins = PageMargins;
            }
            // use default value if no "BackgroundColor" provided
            if (BackgroundColor == null)
            {
                this.BackgroundColor = "White";
            }
            else
            {
                this.BackgroundColor = BackgroundColor;
            }
            // use default value if no "ForegroundColor" provided
            if (ForegroundColor == null)
            {
                this.ForegroundColor = ForegroundColorEnum.GreyscaleDarken;
            }
            else
            {
                this.ForegroundColor = ForegroundColor;
            }
            this.ForegroundColorCustom = ForegroundColorCustom;
            // use default value if no "EmptyLayoutDetectionMode" provided
            if (EmptyLayoutDetectionMode == null)
            {
                this.EmptyLayoutDetectionMode = EmptyLayoutDetectionModeEnum.SkipEmptyLayouts;
            }
            else
            {
                this.EmptyLayoutDetectionMode = EmptyLayoutDetectionMode;
            }
            // use default value if no "LayoutSortOrder" provided
            if (LayoutSortOrder == null)
            {
                this.LayoutSortOrder = LayoutSortOrderEnum.Ascending;
            }
            else
            {
                this.LayoutSortOrder = LayoutSortOrder;
            }
            this.StartPage = StartPage;
            this.EndPage = EndPage;
            this.OverrideSettings = OverrideSettings;
            // use default value if no "FailOnError" provided
            if (FailOnError == null)
            {
                this.FailOnError = true;
            }
            else
            {
                this.FailOnError = FailOnError;
            }
        }
        
        /// <summary>
        /// Use async behaviour for API request
        /// </summary>
        /// <value>Use async behaviour for API request</value>
        [DataMember(Name="use_async_pattern", EmitDefaultValue=false)]
        public bool? UseAsyncPattern { get; set; }
        /// <summary>
        /// Name of the source file including extension
        /// </summary>
        /// <value>Name of the source file including extension</value>
        [DataMember(Name="source_file_name", EmitDefaultValue=false)]
        public string SourceFileName { get; set; }
        /// <summary>
        /// Gets or Sets SharepointFile
        /// </summary>
        [DataMember(Name="sharepoint_file", EmitDefaultValue=false)]
        public SharepointFile SharepointFile { get; set; }
        /// <summary>
        /// Content of the file to convert
        /// </summary>
        /// <value>Content of the file to convert</value>
        [DataMember(Name="source_file_content", EmitDefaultValue=false)]
        public byte[] SourceFileContent { get; set; }
        /// <summary>
        /// Copy metadata (Only for SharePoint operations)
        /// </summary>
        /// <value>Copy metadata (Only for SharePoint operations)</value>
        [DataMember(Name="copy_metadata", EmitDefaultValue=false)]
        public bool? CopyMetadata { get; set; }
        /// <summary>
        /// Applicable if &#39;Paper size&#39; is set to &#39;Custom&#39;
        /// </summary>
        /// <value>Applicable if &#39;Paper size&#39; is set to &#39;Custom&#39;</value>
        [DataMember(Name="paper_size_custom", EmitDefaultValue=false)]
        public string PaperSizeCustom { get; set; }
        /// <summary>
        /// E.g. &#39;1.5cm&#39; (for uniform) or &#39;0.5in, 0.25in, 0.5in, 0.25in&#39; (for non-uniform) margins
        /// </summary>
        /// <value>E.g. &#39;1.5cm&#39; (for uniform) or &#39;0.5in, 0.25in, 0.5in, 0.25in&#39; (for non-uniform) margins</value>
        [DataMember(Name="page_margins", EmitDefaultValue=false)]
        public string PageMargins { get; set; }
        /// <summary>
        /// .Net color name or hex color (#aarrggbb or #rrggbb)
        /// </summary>
        /// <value>.Net color name or hex color (#aarrggbb or #rrggbb)</value>
        [DataMember(Name="background_color", EmitDefaultValue=false)]
        public string BackgroundColor { get; set; }
        /// <summary>
        /// .Net color name or hex color (#aarrggbb or #rrggbb). Applicable if &#39;Foreground color&#39; is set to &#39;Custom&#39;
        /// </summary>
        /// <value>.Net color name or hex color (#aarrggbb or #rrggbb). Applicable if &#39;Foreground color&#39; is set to &#39;Custom&#39;</value>
        [DataMember(Name="foreground_color_custom", EmitDefaultValue=false)]
        public string ForegroundColorCustom { get; set; }
        /// <summary>
        /// The first page to include
        /// </summary>
        /// <value>The first page to include</value>
        [DataMember(Name="start_page", EmitDefaultValue=false)]
        public int? StartPage { get; set; }
        /// <summary>
        /// The last page to include
        /// </summary>
        /// <value>The last page to include</value>
        [DataMember(Name="end_page", EmitDefaultValue=false)]
        public int? EndPage { get; set; }
        /// <summary>
        /// Optional settings using Muhimbi&#39;s XML syntax
        /// </summary>
        /// <value>Optional settings using Muhimbi&#39;s XML syntax</value>
        [DataMember(Name="override_settings", EmitDefaultValue=false)]
        public string OverrideSettings { get; set; }
        /// <summary>
        /// Fail on error
        /// </summary>
        /// <value>Fail on error</value>
        [DataMember(Name="fail_on_error", EmitDefaultValue=false)]
        public bool? FailOnError { get; set; }
        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class ConvertCadData {\n");
            sb.Append("  UseAsyncPattern: ").Append(UseAsyncPattern).Append("\n");
            sb.Append("  SourceFileName: ").Append(SourceFileName).Append("\n");
            sb.Append("  SharepointFile: ").Append(SharepointFile).Append("\n");
            sb.Append("  SourceFileContent: ").Append(SourceFileContent).Append("\n");
            sb.Append("  CopyMetadata: ").Append(CopyMetadata).Append("\n");
            sb.Append("  PaperSize: ").Append(PaperSize).Append("\n");
            sb.Append("  PaperSizeCustom: ").Append(PaperSizeCustom).Append("\n");
            sb.Append("  PageMargins: ").Append(PageMargins).Append("\n");
            sb.Append("  BackgroundColor: ").Append(BackgroundColor).Append("\n");
            sb.Append("  ForegroundColor: ").Append(ForegroundColor).Append("\n");
            sb.Append("  ForegroundColorCustom: ").Append(ForegroundColorCustom).Append("\n");
            sb.Append("  EmptyLayoutDetectionMode: ").Append(EmptyLayoutDetectionMode).Append("\n");
            sb.Append("  LayoutSortOrder: ").Append(LayoutSortOrder).Append("\n");
            sb.Append("  StartPage: ").Append(StartPage).Append("\n");
            sb.Append("  EndPage: ").Append(EndPage).Append("\n");
            sb.Append("  OverrideSettings: ").Append(OverrideSettings).Append("\n");
            sb.Append("  FailOnError: ").Append(FailOnError).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="obj">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object obj)
        {
            // credit: http://stackoverflow.com/a/10454552/677735
            return this.Equals(obj as ConvertCadData);
        }

        /// <summary>
        /// Returns true if ConvertCadData instances are equal
        /// </summary>
        /// <param name="other">Instance of ConvertCadData to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(ConvertCadData other)
        {
            // credit: http://stackoverflow.com/a/10454552/677735
            if (other == null)
                return false;

            return 
                (
                    this.UseAsyncPattern == other.UseAsyncPattern ||
                    this.UseAsyncPattern != null &&
                    this.UseAsyncPattern.Equals(other.UseAsyncPattern)
                ) && 
                (
                    this.SourceFileName == other.SourceFileName ||
                    this.SourceFileName != null &&
                    this.SourceFileName.Equals(other.SourceFileName)
                ) && 
                (
                    this.SharepointFile == other.SharepointFile ||
                    this.SharepointFile != null &&
                    this.SharepointFile.Equals(other.SharepointFile)
                ) && 
                (
                    this.SourceFileContent == other.SourceFileContent ||
                    this.SourceFileContent != null &&
                    this.SourceFileContent.Equals(other.SourceFileContent)
                ) && 
                (
                    this.CopyMetadata == other.CopyMetadata ||
                    this.CopyMetadata != null &&
                    this.CopyMetadata.Equals(other.CopyMetadata)
                ) && 
                (
                    this.PaperSize == other.PaperSize ||
                    this.PaperSize != null &&
                    this.PaperSize.Equals(other.PaperSize)
                ) && 
                (
                    this.PaperSizeCustom == other.PaperSizeCustom ||
                    this.PaperSizeCustom != null &&
                    this.PaperSizeCustom.Equals(other.PaperSizeCustom)
                ) && 
                (
                    this.PageMargins == other.PageMargins ||
                    this.PageMargins != null &&
                    this.PageMargins.Equals(other.PageMargins)
                ) && 
                (
                    this.BackgroundColor == other.BackgroundColor ||
                    this.BackgroundColor != null &&
                    this.BackgroundColor.Equals(other.BackgroundColor)
                ) && 
                (
                    this.ForegroundColor == other.ForegroundColor ||
                    this.ForegroundColor != null &&
                    this.ForegroundColor.Equals(other.ForegroundColor)
                ) && 
                (
                    this.ForegroundColorCustom == other.ForegroundColorCustom ||
                    this.ForegroundColorCustom != null &&
                    this.ForegroundColorCustom.Equals(other.ForegroundColorCustom)
                ) && 
                (
                    this.EmptyLayoutDetectionMode == other.EmptyLayoutDetectionMode ||
                    this.EmptyLayoutDetectionMode != null &&
                    this.EmptyLayoutDetectionMode.Equals(other.EmptyLayoutDetectionMode)
                ) && 
                (
                    this.LayoutSortOrder == other.LayoutSortOrder ||
                    this.LayoutSortOrder != null &&
                    this.LayoutSortOrder.Equals(other.LayoutSortOrder)
                ) && 
                (
                    this.StartPage == other.StartPage ||
                    this.StartPage != null &&
                    this.StartPage.Equals(other.StartPage)
                ) && 
                (
                    this.EndPage == other.EndPage ||
                    this.EndPage != null &&
                    this.EndPage.Equals(other.EndPage)
                ) && 
                (
                    this.OverrideSettings == other.OverrideSettings ||
                    this.OverrideSettings != null &&
                    this.OverrideSettings.Equals(other.OverrideSettings)
                ) && 
                (
                    this.FailOnError == other.FailOnError ||
                    this.FailOnError != null &&
                    this.FailOnError.Equals(other.FailOnError)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            // credit: http://stackoverflow.com/a/263416/677735
            unchecked // Overflow is fine, just wrap
            {
                int hash = 41;
                // Suitable nullity checks etc, of course :)
                if (this.UseAsyncPattern != null)
                    hash = hash * 59 + this.UseAsyncPattern.GetHashCode();
                if (this.SourceFileName != null)
                    hash = hash * 59 + this.SourceFileName.GetHashCode();
                if (this.SharepointFile != null)
                    hash = hash * 59 + this.SharepointFile.GetHashCode();
                if (this.SourceFileContent != null)
                    hash = hash * 59 + this.SourceFileContent.GetHashCode();
                if (this.CopyMetadata != null)
                    hash = hash * 59 + this.CopyMetadata.GetHashCode();
                if (this.PaperSize != null)
                    hash = hash * 59 + this.PaperSize.GetHashCode();
                if (this.PaperSizeCustom != null)
                    hash = hash * 59 + this.PaperSizeCustom.GetHashCode();
                if (this.PageMargins != null)
                    hash = hash * 59 + this.PageMargins.GetHashCode();
                if (this.BackgroundColor != null)
                    hash = hash * 59 + this.BackgroundColor.GetHashCode();
                if (this.ForegroundColor != null)
                    hash = hash * 59 + this.ForegroundColor.GetHashCode();
                if (this.ForegroundColorCustom != null)
                    hash = hash * 59 + this.ForegroundColorCustom.GetHashCode();
                if (this.EmptyLayoutDetectionMode != null)
                    hash = hash * 59 + this.EmptyLayoutDetectionMode.GetHashCode();
                if (this.LayoutSortOrder != null)
                    hash = hash * 59 + this.LayoutSortOrder.GetHashCode();
                if (this.StartPage != null)
                    hash = hash * 59 + this.StartPage.GetHashCode();
                if (this.EndPage != null)
                    hash = hash * 59 + this.EndPage.GetHashCode();
                if (this.OverrideSettings != null)
                    hash = hash * 59 + this.OverrideSettings.GetHashCode();
                if (this.FailOnError != null)
                    hash = hash * 59 + this.FailOnError.GetHashCode();
                return hash;
            }
        }

        public IEnumerable<ValidationResult> Validate(ValidationContext validationContext)
        { 
            yield break;
        }
    }

}
