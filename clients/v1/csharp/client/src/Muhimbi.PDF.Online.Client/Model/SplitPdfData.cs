/* 
 * Muhimbi PDF
 *
 * Convert, Merge, Watermark, Secure and OCR files.
 *
 * OpenAPI spec version: 9.14.1
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;

namespace Muhimbi.PDF.Online.Client.Model
{
    /// <summary>
    /// Parameters for SplitPdf operation
    /// </summary>
    [DataContract]
    public partial class SplitPdfData :  IEquatable<SplitPdfData>, IValidatableObject
    {
        /// <summary>
        /// Split by option
        /// </summary>
        /// <value>Split by option</value>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum FileSplitByEnum
        {
            
            /// <summary>
            /// Enum NumberofPages for "Number of Pages"
            /// </summary>
            [EnumMember(Value = "Number of Pages")]
            NumberofPages,
            
            /// <summary>
            /// Enum BookmarkLevel for "Bookmark Level"
            /// </summary>
            [EnumMember(Value = "Bookmark Level")]
            BookmarkLevel
        }

        /// <summary>
        /// Split by option
        /// </summary>
        /// <value>Split by option</value>
        [DataMember(Name="file_split_by", EmitDefaultValue=false)]
        public FileSplitByEnum? FileSplitBy { get; set; }
        /// <summary>
        /// Initializes a new instance of the <see cref="SplitPdfData" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected SplitPdfData() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="SplitPdfData" /> class.
        /// </summary>
        /// <param name="UseAsyncPattern">Use async behaviour for API request (required) (default to false).</param>
        /// <param name="SourceFileName">Name of the source file including extension (required).</param>
        /// <param name="SourceFileContent">Content of the file to split (required).</param>
        /// <param name="SharepointFile">SharepointFile.</param>
        /// <param name="FileNameTemplate">File name template for returned files.</param>
        /// <param name="FileSplitBy">Split by option (required) (default to FileSplitByEnum.NumberofPages).</param>
        /// <param name="SplitParameter">Split parameter (number of pages or level) (required) (default to 1).</param>
        /// <param name="FailOnError">Fail on error (default to true).</param>
        public SplitPdfData(bool? UseAsyncPattern = false, string SourceFileName = default(string), byte[] SourceFileContent = default(byte[]), SharepointFile SharepointFile = default(SharepointFile), string FileNameTemplate = default(string), FileSplitByEnum? FileSplitBy = FileSplitByEnum.NumberofPages, int? SplitParameter = 1, bool? FailOnError = true)
        {
            // to ensure "UseAsyncPattern" is required (not null)
            if (UseAsyncPattern == null)
            {
                throw new InvalidDataException("UseAsyncPattern is a required property for SplitPdfData and cannot be null");
            }
            else
            {
                this.UseAsyncPattern = UseAsyncPattern;
            }
            // to ensure "SourceFileName" is required (not null)
            if (SourceFileName == null)
            {
                throw new InvalidDataException("SourceFileName is a required property for SplitPdfData and cannot be null");
            }
            else
            {
                this.SourceFileName = SourceFileName;
            }
            // to ensure "SourceFileContent" is required (not null)
            if (SourceFileContent == null)
            {
                throw new InvalidDataException("SourceFileContent is a required property for SplitPdfData and cannot be null");
            }
            else
            {
                this.SourceFileContent = SourceFileContent;
            }
            // to ensure "FileSplitBy" is required (not null)
            if (FileSplitBy == null)
            {
                throw new InvalidDataException("FileSplitBy is a required property for SplitPdfData and cannot be null");
            }
            else
            {
                this.FileSplitBy = FileSplitBy;
            }
            // to ensure "SplitParameter" is required (not null)
            if (SplitParameter == null)
            {
                throw new InvalidDataException("SplitParameter is a required property for SplitPdfData and cannot be null");
            }
            else
            {
                this.SplitParameter = SplitParameter;
            }
            this.SharepointFile = SharepointFile;
            this.FileNameTemplate = FileNameTemplate;
            // use default value if no "FailOnError" provided
            if (FailOnError == null)
            {
                this.FailOnError = true;
            }
            else
            {
                this.FailOnError = FailOnError;
            }
        }
        
        /// <summary>
        /// Use async behaviour for API request
        /// </summary>
        /// <value>Use async behaviour for API request</value>
        [DataMember(Name="use_async_pattern", EmitDefaultValue=false)]
        public bool? UseAsyncPattern { get; set; }
        /// <summary>
        /// Name of the source file including extension
        /// </summary>
        /// <value>Name of the source file including extension</value>
        [DataMember(Name="source_file_name", EmitDefaultValue=false)]
        public string SourceFileName { get; set; }
        /// <summary>
        /// Content of the file to split
        /// </summary>
        /// <value>Content of the file to split</value>
        [DataMember(Name="source_file_content", EmitDefaultValue=false)]
        public byte[] SourceFileContent { get; set; }
        /// <summary>
        /// Gets or Sets SharepointFile
        /// </summary>
        [DataMember(Name="sharepoint_file", EmitDefaultValue=false)]
        public SharepointFile SharepointFile { get; set; }
        /// <summary>
        /// File name template for returned files
        /// </summary>
        /// <value>File name template for returned files</value>
        [DataMember(Name="file_name_template", EmitDefaultValue=false)]
        public string FileNameTemplate { get; set; }
        /// <summary>
        /// Split parameter (number of pages or level)
        /// </summary>
        /// <value>Split parameter (number of pages or level)</value>
        [DataMember(Name="split_parameter", EmitDefaultValue=false)]
        public int? SplitParameter { get; set; }
        /// <summary>
        /// Fail on error
        /// </summary>
        /// <value>Fail on error</value>
        [DataMember(Name="fail_on_error", EmitDefaultValue=false)]
        public bool? FailOnError { get; set; }
        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class SplitPdfData {\n");
            sb.Append("  UseAsyncPattern: ").Append(UseAsyncPattern).Append("\n");
            sb.Append("  SourceFileName: ").Append(SourceFileName).Append("\n");
            sb.Append("  SourceFileContent: ").Append(SourceFileContent).Append("\n");
            sb.Append("  SharepointFile: ").Append(SharepointFile).Append("\n");
            sb.Append("  FileNameTemplate: ").Append(FileNameTemplate).Append("\n");
            sb.Append("  FileSplitBy: ").Append(FileSplitBy).Append("\n");
            sb.Append("  SplitParameter: ").Append(SplitParameter).Append("\n");
            sb.Append("  FailOnError: ").Append(FailOnError).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="obj">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object obj)
        {
            // credit: http://stackoverflow.com/a/10454552/677735
            return this.Equals(obj as SplitPdfData);
        }

        /// <summary>
        /// Returns true if SplitPdfData instances are equal
        /// </summary>
        /// <param name="other">Instance of SplitPdfData to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(SplitPdfData other)
        {
            // credit: http://stackoverflow.com/a/10454552/677735
            if (other == null)
                return false;

            return 
                (
                    this.UseAsyncPattern == other.UseAsyncPattern ||
                    this.UseAsyncPattern != null &&
                    this.UseAsyncPattern.Equals(other.UseAsyncPattern)
                ) && 
                (
                    this.SourceFileName == other.SourceFileName ||
                    this.SourceFileName != null &&
                    this.SourceFileName.Equals(other.SourceFileName)
                ) && 
                (
                    this.SourceFileContent == other.SourceFileContent ||
                    this.SourceFileContent != null &&
                    this.SourceFileContent.Equals(other.SourceFileContent)
                ) && 
                (
                    this.SharepointFile == other.SharepointFile ||
                    this.SharepointFile != null &&
                    this.SharepointFile.Equals(other.SharepointFile)
                ) && 
                (
                    this.FileNameTemplate == other.FileNameTemplate ||
                    this.FileNameTemplate != null &&
                    this.FileNameTemplate.Equals(other.FileNameTemplate)
                ) && 
                (
                    this.FileSplitBy == other.FileSplitBy ||
                    this.FileSplitBy != null &&
                    this.FileSplitBy.Equals(other.FileSplitBy)
                ) && 
                (
                    this.SplitParameter == other.SplitParameter ||
                    this.SplitParameter != null &&
                    this.SplitParameter.Equals(other.SplitParameter)
                ) && 
                (
                    this.FailOnError == other.FailOnError ||
                    this.FailOnError != null &&
                    this.FailOnError.Equals(other.FailOnError)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            // credit: http://stackoverflow.com/a/263416/677735
            unchecked // Overflow is fine, just wrap
            {
                int hash = 41;
                // Suitable nullity checks etc, of course :)
                if (this.UseAsyncPattern != null)
                    hash = hash * 59 + this.UseAsyncPattern.GetHashCode();
                if (this.SourceFileName != null)
                    hash = hash * 59 + this.SourceFileName.GetHashCode();
                if (this.SourceFileContent != null)
                    hash = hash * 59 + this.SourceFileContent.GetHashCode();
                if (this.SharepointFile != null)
                    hash = hash * 59 + this.SharepointFile.GetHashCode();
                if (this.FileNameTemplate != null)
                    hash = hash * 59 + this.FileNameTemplate.GetHashCode();
                if (this.FileSplitBy != null)
                    hash = hash * 59 + this.FileSplitBy.GetHashCode();
                if (this.SplitParameter != null)
                    hash = hash * 59 + this.SplitParameter.GetHashCode();
                if (this.FailOnError != null)
                    hash = hash * 59 + this.FailOnError.GetHashCode();
                return hash;
            }
        }

        public IEnumerable<ValidationResult> Validate(ValidationContext validationContext)
        { 
            yield break;
        }
    }

}
