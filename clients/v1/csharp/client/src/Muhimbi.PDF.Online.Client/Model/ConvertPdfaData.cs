/* 
 * Muhimbi PDF
 *
 * Convert, Merge, Watermark, Secure and OCR files.
 *
 * OpenAPI spec version: 9.16
 * Contact: support@muhimbi.com
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;

namespace Muhimbi.PDF.Online.Client.Model
{
    /// <summary>
    /// Parameters for Convert PDF operation
    /// </summary>
    [DataContract]
    public partial class ConvertPdfaData :  IEquatable<ConvertPdfaData>, IValidatableObject
    {
        /// <summary>
        /// PDF profile to use for rendering the document
        /// </summary>
        /// <value>PDF profile to use for rendering the document</value>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum PdfProfileEnum
        {
            
            /// <summary>
            /// Enum Default for "Default"
            /// </summary>
            [EnumMember(Value = "Default")]
            Default,
            
            /// <summary>
            /// Enum PDF15 for "PDF_1_5"
            /// </summary>
            [EnumMember(Value = "PDF_1_5")]
            PDF15,
            
            /// <summary>
            /// Enum PDFA1B for "PDF_A1B"
            /// </summary>
            [EnumMember(Value = "PDF_A1B")]
            PDFA1B,
            
            /// <summary>
            /// Enum PDFA2B for "PDF_A2B"
            /// </summary>
            [EnumMember(Value = "PDF_A2B")]
            PDFA2B,
            
            /// <summary>
            /// Enum PDFA2U for "PDF_A2U"
            /// </summary>
            [EnumMember(Value = "PDF_A2U")]
            PDFA2U,
            
            /// <summary>
            /// Enum PDFA3B for "PDF_A3B"
            /// </summary>
            [EnumMember(Value = "PDF_A3B")]
            PDFA3B,
            
            /// <summary>
            /// Enum PDFA3U for "PDF_A3U"
            /// </summary>
            [EnumMember(Value = "PDF_A3U")]
            PDFA3U,
            
            /// <summary>
            /// Enum PDF11 for "PDF_1_1"
            /// </summary>
            [EnumMember(Value = "PDF_1_1")]
            PDF11,
            
            /// <summary>
            /// Enum PDF12 for "PDF_1_2"
            /// </summary>
            [EnumMember(Value = "PDF_1_2")]
            PDF12,
            
            /// <summary>
            /// Enum PDF13 for "PDF_1_3"
            /// </summary>
            [EnumMember(Value = "PDF_1_3")]
            PDF13,
            
            /// <summary>
            /// Enum PDF14 for "PDF_1_4"
            /// </summary>
            [EnumMember(Value = "PDF_1_4")]
            PDF14,
            
            /// <summary>
            /// Enum PDF16 for "PDF_1_6"
            /// </summary>
            [EnumMember(Value = "PDF_1_6")]
            PDF16,
            
            /// <summary>
            /// Enum PDF17 for "PDF_1_7"
            /// </summary>
            [EnumMember(Value = "PDF_1_7")]
            PDF17
        }

        /// <summary>
        /// PDF profile to use for rendering the document
        /// </summary>
        /// <value>PDF profile to use for rendering the document</value>
        [DataMember(Name="pdf_profile", EmitDefaultValue=false)]
        public PdfProfileEnum? PdfProfile { get; set; }
        /// <summary>
        /// Initializes a new instance of the <see cref="ConvertPdfaData" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected ConvertPdfaData() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="ConvertPdfaData" /> class.
        /// </summary>
        /// <param name="UseAsyncPattern">Use async behaviour for API request (required) (default to false).</param>
        /// <param name="SourceFileName">Name of the source file including extension (required).</param>
        /// <param name="SharepointFile">SharepointFile.</param>
        /// <param name="SourceFileContent">Content of the file to convert (required).</param>
        /// <param name="CopyMetadata">Copy metadata (Only for SharePoint operations) (required) (default to false).</param>
        /// <param name="PdfProfile">PDF profile to use for rendering the document (required) (default to PdfProfileEnum.PDFA2B).</param>
        /// <param name="OverrideSettings">Optional settings using Muhimbi&#39;s XML syntax.</param>
        /// <param name="FailOnError">Fail on error (default to true).</param>
        public ConvertPdfaData(bool? UseAsyncPattern = false, string SourceFileName = default(string), SharepointFile SharepointFile = default(SharepointFile), byte[] SourceFileContent = default(byte[]), bool? CopyMetadata = false, PdfProfileEnum? PdfProfile = PdfProfileEnum.PDFA2B, string OverrideSettings = default(string), bool? FailOnError = true)
        {
            // to ensure "UseAsyncPattern" is required (not null)
            if (UseAsyncPattern == null)
            {
                throw new InvalidDataException("UseAsyncPattern is a required property for ConvertPdfaData and cannot be null");
            }
            else
            {
                this.UseAsyncPattern = UseAsyncPattern;
            }
            // to ensure "SourceFileName" is required (not null)
            if (SourceFileName == null)
            {
                throw new InvalidDataException("SourceFileName is a required property for ConvertPdfaData and cannot be null");
            }
            else
            {
                this.SourceFileName = SourceFileName;
            }
            // to ensure "SourceFileContent" is required (not null)
            if (SourceFileContent == null)
            {
                throw new InvalidDataException("SourceFileContent is a required property for ConvertPdfaData and cannot be null");
            }
            else
            {
                this.SourceFileContent = SourceFileContent;
            }
            // to ensure "CopyMetadata" is required (not null)
            if (CopyMetadata == null)
            {
                throw new InvalidDataException("CopyMetadata is a required property for ConvertPdfaData and cannot be null");
            }
            else
            {
                this.CopyMetadata = CopyMetadata;
            }
            // to ensure "PdfProfile" is required (not null)
            if (PdfProfile == null)
            {
                throw new InvalidDataException("PdfProfile is a required property for ConvertPdfaData and cannot be null");
            }
            else
            {
                this.PdfProfile = PdfProfile;
            }
            this.SharepointFile = SharepointFile;
            this.OverrideSettings = OverrideSettings;
            // use default value if no "FailOnError" provided
            if (FailOnError == null)
            {
                this.FailOnError = true;
            }
            else
            {
                this.FailOnError = FailOnError;
            }
        }
        
        /// <summary>
        /// Use async behaviour for API request
        /// </summary>
        /// <value>Use async behaviour for API request</value>
        [DataMember(Name="use_async_pattern", EmitDefaultValue=false)]
        public bool? UseAsyncPattern { get; set; }
        /// <summary>
        /// Name of the source file including extension
        /// </summary>
        /// <value>Name of the source file including extension</value>
        [DataMember(Name="source_file_name", EmitDefaultValue=false)]
        public string SourceFileName { get; set; }
        /// <summary>
        /// Gets or Sets SharepointFile
        /// </summary>
        [DataMember(Name="sharepoint_file", EmitDefaultValue=false)]
        public SharepointFile SharepointFile { get; set; }
        /// <summary>
        /// Content of the file to convert
        /// </summary>
        /// <value>Content of the file to convert</value>
        [DataMember(Name="source_file_content", EmitDefaultValue=false)]
        public byte[] SourceFileContent { get; set; }
        /// <summary>
        /// Copy metadata (Only for SharePoint operations)
        /// </summary>
        /// <value>Copy metadata (Only for SharePoint operations)</value>
        [DataMember(Name="copy_metadata", EmitDefaultValue=false)]
        public bool? CopyMetadata { get; set; }
        /// <summary>
        /// Optional settings using Muhimbi&#39;s XML syntax
        /// </summary>
        /// <value>Optional settings using Muhimbi&#39;s XML syntax</value>
        [DataMember(Name="override_settings", EmitDefaultValue=false)]
        public string OverrideSettings { get; set; }
        /// <summary>
        /// Fail on error
        /// </summary>
        /// <value>Fail on error</value>
        [DataMember(Name="fail_on_error", EmitDefaultValue=false)]
        public bool? FailOnError { get; set; }
        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class ConvertPdfaData {\n");
            sb.Append("  UseAsyncPattern: ").Append(UseAsyncPattern).Append("\n");
            sb.Append("  SourceFileName: ").Append(SourceFileName).Append("\n");
            sb.Append("  SharepointFile: ").Append(SharepointFile).Append("\n");
            sb.Append("  SourceFileContent: ").Append(SourceFileContent).Append("\n");
            sb.Append("  CopyMetadata: ").Append(CopyMetadata).Append("\n");
            sb.Append("  PdfProfile: ").Append(PdfProfile).Append("\n");
            sb.Append("  OverrideSettings: ").Append(OverrideSettings).Append("\n");
            sb.Append("  FailOnError: ").Append(FailOnError).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="obj">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object obj)
        {
            // credit: http://stackoverflow.com/a/10454552/677735
            return this.Equals(obj as ConvertPdfaData);
        }

        /// <summary>
        /// Returns true if ConvertPdfaData instances are equal
        /// </summary>
        /// <param name="other">Instance of ConvertPdfaData to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(ConvertPdfaData other)
        {
            // credit: http://stackoverflow.com/a/10454552/677735
            if (other == null)
                return false;

            return 
                (
                    this.UseAsyncPattern == other.UseAsyncPattern ||
                    this.UseAsyncPattern != null &&
                    this.UseAsyncPattern.Equals(other.UseAsyncPattern)
                ) && 
                (
                    this.SourceFileName == other.SourceFileName ||
                    this.SourceFileName != null &&
                    this.SourceFileName.Equals(other.SourceFileName)
                ) && 
                (
                    this.SharepointFile == other.SharepointFile ||
                    this.SharepointFile != null &&
                    this.SharepointFile.Equals(other.SharepointFile)
                ) && 
                (
                    this.SourceFileContent == other.SourceFileContent ||
                    this.SourceFileContent != null &&
                    this.SourceFileContent.Equals(other.SourceFileContent)
                ) && 
                (
                    this.CopyMetadata == other.CopyMetadata ||
                    this.CopyMetadata != null &&
                    this.CopyMetadata.Equals(other.CopyMetadata)
                ) && 
                (
                    this.PdfProfile == other.PdfProfile ||
                    this.PdfProfile != null &&
                    this.PdfProfile.Equals(other.PdfProfile)
                ) && 
                (
                    this.OverrideSettings == other.OverrideSettings ||
                    this.OverrideSettings != null &&
                    this.OverrideSettings.Equals(other.OverrideSettings)
                ) && 
                (
                    this.FailOnError == other.FailOnError ||
                    this.FailOnError != null &&
                    this.FailOnError.Equals(other.FailOnError)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            // credit: http://stackoverflow.com/a/263416/677735
            unchecked // Overflow is fine, just wrap
            {
                int hash = 41;
                // Suitable nullity checks etc, of course :)
                if (this.UseAsyncPattern != null)
                    hash = hash * 59 + this.UseAsyncPattern.GetHashCode();
                if (this.SourceFileName != null)
                    hash = hash * 59 + this.SourceFileName.GetHashCode();
                if (this.SharepointFile != null)
                    hash = hash * 59 + this.SharepointFile.GetHashCode();
                if (this.SourceFileContent != null)
                    hash = hash * 59 + this.SourceFileContent.GetHashCode();
                if (this.CopyMetadata != null)
                    hash = hash * 59 + this.CopyMetadata.GetHashCode();
                if (this.PdfProfile != null)
                    hash = hash * 59 + this.PdfProfile.GetHashCode();
                if (this.OverrideSettings != null)
                    hash = hash * 59 + this.OverrideSettings.GetHashCode();
                if (this.FailOnError != null)
                    hash = hash * 59 + this.FailOnError.GetHashCode();
                return hash;
            }
        }

        public IEnumerable<ValidationResult> Validate(ValidationContext validationContext)
        { 
            yield break;
        }
    }

}
