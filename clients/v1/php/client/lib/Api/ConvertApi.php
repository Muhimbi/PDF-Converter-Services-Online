<?php
/**
 * ConvertApi
 * PHP version 5
 *
 * @category Class
 * @package  MuhimbiPDFOnline\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * Muhimbi PDF
 *
 * Convert, Merge, Watermark, Secure and OCR files.
 *
 * OpenAPI spec version: 9.16
 * Contact: support@muhimbi.com
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 *
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace MuhimbiPDFOnline\Client\Api;

use \MuhimbiPDFOnline\Client\ApiClient;
use \MuhimbiPDFOnline\Client\ApiException;
use \MuhimbiPDFOnline\Client\Configuration;
use \MuhimbiPDFOnline\Client\ObjectSerializer;

/**
 * ConvertApi Class Doc Comment
 *
 * @category Class
 * @package  MuhimbiPDFOnline\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class ConvertApi
{
    /**
     * API Client
     *
     * @var \MuhimbiPDFOnline\Client\ApiClient instance of the ApiClient
     */
    protected $apiClient;

    /**
     * Constructor
     *
     * @param \MuhimbiPDFOnline\Client\ApiClient|null $apiClient The api client to use
     */
    public function __construct(\MuhimbiPDFOnline\Client\ApiClient $apiClient = null)
    {
        if ($apiClient === null) {
            $apiClient = new ApiClient();
        }

        $this->apiClient = $apiClient;
    }

    /**
     * Get API client
     *
     * @return \MuhimbiPDFOnline\Client\ApiClient get the API client
     */
    public function getApiClient()
    {
        return $this->apiClient;
    }

    /**
     * Set the API client
     *
     * @param \MuhimbiPDFOnline\Client\ApiClient $apiClient set the API client
     *
     * @return ConvertApi
     */
    public function setApiClient(\MuhimbiPDFOnline\Client\ApiClient $apiClient)
    {
        $this->apiClient = $apiClient;
        return $this;
    }

    /**
     * Operation convert
     *
     * Convert document
     *
     * @param \MuhimbiPDFOnline\Client\Model\ConvertData $input_data  (required)
     * @throws \MuhimbiPDFOnline\Client\ApiException on non-2xx response
     * @return \MuhimbiPDFOnline\Client\Model\OperationResponse
     */
    public function convert($input_data)
    {
        list($response) = $this->convertWithHttpInfo($input_data);
        return $response;
    }

    /**
     * Operation convertWithHttpInfo
     *
     * Convert document
     *
     * @param \MuhimbiPDFOnline\Client\Model\ConvertData $input_data  (required)
     * @throws \MuhimbiPDFOnline\Client\ApiException on non-2xx response
     * @return array of \MuhimbiPDFOnline\Client\Model\OperationResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function convertWithHttpInfo($input_data)
    {
        // verify the required parameter 'input_data' is set
        if ($input_data === null) {
            throw new \InvalidArgumentException('Missing the required parameter $input_data when calling convert');
        }
        // parse inputs
        $resourcePath = "/v1/operations/convert";
        $httpBody = '';
        $queryParams = [];
        $headerParams = [];
        $formParams = [];
        $_header_accept = $this->apiClient->selectHeaderAccept(['application/json']);
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(['application/json']);

        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        // body params
        $_tempBody = null;
        if (isset($input_data)) {
            $_tempBody = $input_data;
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // this endpoint requires OAuth (access token)
        if (strlen($this->apiClient->getConfig()->getAccessToken()) !== 0) {
            $headerParams['Authorization'] = 'Bearer ' . $this->apiClient->getConfig()->getAccessToken();
        }
        // this endpoint requires API key authentication
        $apiKey = $this->apiClient->getApiKeyWithPrefix('api_key');
        if (strlen($apiKey) !== 0) {
            $headerParams['api_key'] = $apiKey;
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'POST',
                $queryParams,
                $httpBody,
                $headerParams,
                '\MuhimbiPDFOnline\Client\Model\OperationResponse',
                '/v1/operations/convert'
            );

            return [$this->apiClient->getSerializer()->deserialize($response, '\MuhimbiPDFOnline\Client\Model\OperationResponse', $httpHeader), $statusCode, $httpHeader];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\MuhimbiPDFOnline\Client\Model\OperationResponse', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation convertCad
     *
     * Convert CAD drawing to PDF
     *
     * @param \MuhimbiPDFOnline\Client\Model\ConvertCadData $input_cad_data  (required)
     * @throws \MuhimbiPDFOnline\Client\ApiException on non-2xx response
     * @return \MuhimbiPDFOnline\Client\Model\OperationResponse
     */
    public function convertCad($input_cad_data)
    {
        list($response) = $this->convertCadWithHttpInfo($input_cad_data);
        return $response;
    }

    /**
     * Operation convertCadWithHttpInfo
     *
     * Convert CAD drawing to PDF
     *
     * @param \MuhimbiPDFOnline\Client\Model\ConvertCadData $input_cad_data  (required)
     * @throws \MuhimbiPDFOnline\Client\ApiException on non-2xx response
     * @return array of \MuhimbiPDFOnline\Client\Model\OperationResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function convertCadWithHttpInfo($input_cad_data)
    {
        // verify the required parameter 'input_cad_data' is set
        if ($input_cad_data === null) {
            throw new \InvalidArgumentException('Missing the required parameter $input_cad_data when calling convertCad');
        }
        // parse inputs
        $resourcePath = "/v1/operations/convert_cad";
        $httpBody = '';
        $queryParams = [];
        $headerParams = [];
        $formParams = [];
        $_header_accept = $this->apiClient->selectHeaderAccept(['application/json']);
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(['application/json']);

        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        // body params
        $_tempBody = null;
        if (isset($input_cad_data)) {
            $_tempBody = $input_cad_data;
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // this endpoint requires OAuth (access token)
        if (strlen($this->apiClient->getConfig()->getAccessToken()) !== 0) {
            $headerParams['Authorization'] = 'Bearer ' . $this->apiClient->getConfig()->getAccessToken();
        }
        // this endpoint requires API key authentication
        $apiKey = $this->apiClient->getApiKeyWithPrefix('api_key');
        if (strlen($apiKey) !== 0) {
            $headerParams['api_key'] = $apiKey;
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'POST',
                $queryParams,
                $httpBody,
                $headerParams,
                '\MuhimbiPDFOnline\Client\Model\OperationResponse',
                '/v1/operations/convert_cad'
            );

            return [$this->apiClient->getSerializer()->deserialize($response, '\MuhimbiPDFOnline\Client\Model\OperationResponse', $httpHeader), $statusCode, $httpHeader];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\MuhimbiPDFOnline\Client\Model\OperationResponse', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation convertEmail
     *
     * Convert email to PDF
     *
     * @param \MuhimbiPDFOnline\Client\Model\ConvertEmailData $input_email_data  (required)
     * @throws \MuhimbiPDFOnline\Client\ApiException on non-2xx response
     * @return \MuhimbiPDFOnline\Client\Model\OperationResponse
     */
    public function convertEmail($input_email_data)
    {
        list($response) = $this->convertEmailWithHttpInfo($input_email_data);
        return $response;
    }

    /**
     * Operation convertEmailWithHttpInfo
     *
     * Convert email to PDF
     *
     * @param \MuhimbiPDFOnline\Client\Model\ConvertEmailData $input_email_data  (required)
     * @throws \MuhimbiPDFOnline\Client\ApiException on non-2xx response
     * @return array of \MuhimbiPDFOnline\Client\Model\OperationResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function convertEmailWithHttpInfo($input_email_data)
    {
        // verify the required parameter 'input_email_data' is set
        if ($input_email_data === null) {
            throw new \InvalidArgumentException('Missing the required parameter $input_email_data when calling convertEmail');
        }
        // parse inputs
        $resourcePath = "/v1/operations/convert_email";
        $httpBody = '';
        $queryParams = [];
        $headerParams = [];
        $formParams = [];
        $_header_accept = $this->apiClient->selectHeaderAccept(['application/json']);
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(['application/json']);

        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        // body params
        $_tempBody = null;
        if (isset($input_email_data)) {
            $_tempBody = $input_email_data;
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // this endpoint requires OAuth (access token)
        if (strlen($this->apiClient->getConfig()->getAccessToken()) !== 0) {
            $headerParams['Authorization'] = 'Bearer ' . $this->apiClient->getConfig()->getAccessToken();
        }
        // this endpoint requires API key authentication
        $apiKey = $this->apiClient->getApiKeyWithPrefix('api_key');
        if (strlen($apiKey) !== 0) {
            $headerParams['api_key'] = $apiKey;
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'POST',
                $queryParams,
                $httpBody,
                $headerParams,
                '\MuhimbiPDFOnline\Client\Model\OperationResponse',
                '/v1/operations/convert_email'
            );

            return [$this->apiClient->getSerializer()->deserialize($response, '\MuhimbiPDFOnline\Client\Model\OperationResponse', $httpHeader), $statusCode, $httpHeader];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\MuhimbiPDFOnline\Client\Model\OperationResponse', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation convertExcel
     *
     * Convert Excel document
     *
     * @param \MuhimbiPDFOnline\Client\Model\ConvertExcelData $input_excel_data  (required)
     * @throws \MuhimbiPDFOnline\Client\ApiException on non-2xx response
     * @return \MuhimbiPDFOnline\Client\Model\OperationResponse
     */
    public function convertExcel($input_excel_data)
    {
        list($response) = $this->convertExcelWithHttpInfo($input_excel_data);
        return $response;
    }

    /**
     * Operation convertExcelWithHttpInfo
     *
     * Convert Excel document
     *
     * @param \MuhimbiPDFOnline\Client\Model\ConvertExcelData $input_excel_data  (required)
     * @throws \MuhimbiPDFOnline\Client\ApiException on non-2xx response
     * @return array of \MuhimbiPDFOnline\Client\Model\OperationResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function convertExcelWithHttpInfo($input_excel_data)
    {
        // verify the required parameter 'input_excel_data' is set
        if ($input_excel_data === null) {
            throw new \InvalidArgumentException('Missing the required parameter $input_excel_data when calling convertExcel');
        }
        // parse inputs
        $resourcePath = "/v1/operations/convert_excel";
        $httpBody = '';
        $queryParams = [];
        $headerParams = [];
        $formParams = [];
        $_header_accept = $this->apiClient->selectHeaderAccept(['application/json']);
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(['application/json']);

        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        // body params
        $_tempBody = null;
        if (isset($input_excel_data)) {
            $_tempBody = $input_excel_data;
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // this endpoint requires OAuth (access token)
        if (strlen($this->apiClient->getConfig()->getAccessToken()) !== 0) {
            $headerParams['Authorization'] = 'Bearer ' . $this->apiClient->getConfig()->getAccessToken();
        }
        // this endpoint requires API key authentication
        $apiKey = $this->apiClient->getApiKeyWithPrefix('api_key');
        if (strlen($apiKey) !== 0) {
            $headerParams['api_key'] = $apiKey;
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'POST',
                $queryParams,
                $httpBody,
                $headerParams,
                '\MuhimbiPDFOnline\Client\Model\OperationResponse',
                '/v1/operations/convert_excel'
            );

            return [$this->apiClient->getSerializer()->deserialize($response, '\MuhimbiPDFOnline\Client\Model\OperationResponse', $httpHeader), $statusCode, $httpHeader];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\MuhimbiPDFOnline\Client\Model\OperationResponse', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation convertHtml
     *
     * Convert HTML to PDF
     *
     * @param \MuhimbiPDFOnline\Client\Model\ConvertHtmlData $input_data  (required)
     * @throws \MuhimbiPDFOnline\Client\ApiException on non-2xx response
     * @return \MuhimbiPDFOnline\Client\Model\OperationResponse
     */
    public function convertHtml($input_data)
    {
        list($response) = $this->convertHtmlWithHttpInfo($input_data);
        return $response;
    }

    /**
     * Operation convertHtmlWithHttpInfo
     *
     * Convert HTML to PDF
     *
     * @param \MuhimbiPDFOnline\Client\Model\ConvertHtmlData $input_data  (required)
     * @throws \MuhimbiPDFOnline\Client\ApiException on non-2xx response
     * @return array of \MuhimbiPDFOnline\Client\Model\OperationResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function convertHtmlWithHttpInfo($input_data)
    {
        // verify the required parameter 'input_data' is set
        if ($input_data === null) {
            throw new \InvalidArgumentException('Missing the required parameter $input_data when calling convertHtml');
        }
        // parse inputs
        $resourcePath = "/v1/operations/convert_html";
        $httpBody = '';
        $queryParams = [];
        $headerParams = [];
        $formParams = [];
        $_header_accept = $this->apiClient->selectHeaderAccept(['application/json']);
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(['application/json']);

        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        // body params
        $_tempBody = null;
        if (isset($input_data)) {
            $_tempBody = $input_data;
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // this endpoint requires OAuth (access token)
        if (strlen($this->apiClient->getConfig()->getAccessToken()) !== 0) {
            $headerParams['Authorization'] = 'Bearer ' . $this->apiClient->getConfig()->getAccessToken();
        }
        // this endpoint requires API key authentication
        $apiKey = $this->apiClient->getApiKeyWithPrefix('api_key');
        if (strlen($apiKey) !== 0) {
            $headerParams['api_key'] = $apiKey;
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'POST',
                $queryParams,
                $httpBody,
                $headerParams,
                '\MuhimbiPDFOnline\Client\Model\OperationResponse',
                '/v1/operations/convert_html'
            );

            return [$this->apiClient->getSerializer()->deserialize($response, '\MuhimbiPDFOnline\Client\Model\OperationResponse', $httpHeader), $statusCode, $httpHeader];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\MuhimbiPDFOnline\Client\Model\OperationResponse', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation convertInfopath
     *
     * Convert InfoPath document
     *
     * @param \MuhimbiPDFOnline\Client\Model\ConvertInfopathData $input_infopath_data  (required)
     * @throws \MuhimbiPDFOnline\Client\ApiException on non-2xx response
     * @return \MuhimbiPDFOnline\Client\Model\OperationResponse
     */
    public function convertInfopath($input_infopath_data)
    {
        list($response) = $this->convertInfopathWithHttpInfo($input_infopath_data);
        return $response;
    }

    /**
     * Operation convertInfopathWithHttpInfo
     *
     * Convert InfoPath document
     *
     * @param \MuhimbiPDFOnline\Client\Model\ConvertInfopathData $input_infopath_data  (required)
     * @throws \MuhimbiPDFOnline\Client\ApiException on non-2xx response
     * @return array of \MuhimbiPDFOnline\Client\Model\OperationResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function convertInfopathWithHttpInfo($input_infopath_data)
    {
        // verify the required parameter 'input_infopath_data' is set
        if ($input_infopath_data === null) {
            throw new \InvalidArgumentException('Missing the required parameter $input_infopath_data when calling convertInfopath');
        }
        // parse inputs
        $resourcePath = "/v1/operations/convert_infopath";
        $httpBody = '';
        $queryParams = [];
        $headerParams = [];
        $formParams = [];
        $_header_accept = $this->apiClient->selectHeaderAccept(['application/json']);
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(['application/json']);

        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        // body params
        $_tempBody = null;
        if (isset($input_infopath_data)) {
            $_tempBody = $input_infopath_data;
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // this endpoint requires OAuth (access token)
        if (strlen($this->apiClient->getConfig()->getAccessToken()) !== 0) {
            $headerParams['Authorization'] = 'Bearer ' . $this->apiClient->getConfig()->getAccessToken();
        }
        // this endpoint requires API key authentication
        $apiKey = $this->apiClient->getApiKeyWithPrefix('api_key');
        if (strlen($apiKey) !== 0) {
            $headerParams['api_key'] = $apiKey;
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'POST',
                $queryParams,
                $httpBody,
                $headerParams,
                '\MuhimbiPDFOnline\Client\Model\OperationResponse',
                '/v1/operations/convert_infopath'
            );

            return [$this->apiClient->getSerializer()->deserialize($response, '\MuhimbiPDFOnline\Client\Model\OperationResponse', $httpHeader), $statusCode, $httpHeader];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\MuhimbiPDFOnline\Client\Model\OperationResponse', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation convertPdfa
     *
     * Convert document to PDF-A
     *
     * @param \MuhimbiPDFOnline\Client\Model\ConvertPdfaData $input_pdf_data  (required)
     * @throws \MuhimbiPDFOnline\Client\ApiException on non-2xx response
     * @return \MuhimbiPDFOnline\Client\Model\OperationResponse
     */
    public function convertPdfa($input_pdf_data)
    {
        list($response) = $this->convertPdfaWithHttpInfo($input_pdf_data);
        return $response;
    }

    /**
     * Operation convertPdfaWithHttpInfo
     *
     * Convert document to PDF-A
     *
     * @param \MuhimbiPDFOnline\Client\Model\ConvertPdfaData $input_pdf_data  (required)
     * @throws \MuhimbiPDFOnline\Client\ApiException on non-2xx response
     * @return array of \MuhimbiPDFOnline\Client\Model\OperationResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function convertPdfaWithHttpInfo($input_pdf_data)
    {
        // verify the required parameter 'input_pdf_data' is set
        if ($input_pdf_data === null) {
            throw new \InvalidArgumentException('Missing the required parameter $input_pdf_data when calling convertPdfa');
        }
        // parse inputs
        $resourcePath = "/v1/operations/convert_pdfa";
        $httpBody = '';
        $queryParams = [];
        $headerParams = [];
        $formParams = [];
        $_header_accept = $this->apiClient->selectHeaderAccept(['application/json']);
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(['application/json']);

        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        // body params
        $_tempBody = null;
        if (isset($input_pdf_data)) {
            $_tempBody = $input_pdf_data;
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // this endpoint requires OAuth (access token)
        if (strlen($this->apiClient->getConfig()->getAccessToken()) !== 0) {
            $headerParams['Authorization'] = 'Bearer ' . $this->apiClient->getConfig()->getAccessToken();
        }
        // this endpoint requires API key authentication
        $apiKey = $this->apiClient->getApiKeyWithPrefix('api_key');
        if (strlen($apiKey) !== 0) {
            $headerParams['api_key'] = $apiKey;
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'POST',
                $queryParams,
                $httpBody,
                $headerParams,
                '\MuhimbiPDFOnline\Client\Model\OperationResponse',
                '/v1/operations/convert_pdfa'
            );

            return [$this->apiClient->getSerializer()->deserialize($response, '\MuhimbiPDFOnline\Client\Model\OperationResponse', $httpHeader), $statusCode, $httpHeader];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\MuhimbiPDFOnline\Client\Model\OperationResponse', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation convertPowerpoint
     *
     * Convert PowerPoint document
     *
     * @param \MuhimbiPDFOnline\Client\Model\ConvertPowerpointData $input_powerpoint_data  (required)
     * @throws \MuhimbiPDFOnline\Client\ApiException on non-2xx response
     * @return \MuhimbiPDFOnline\Client\Model\OperationResponse
     */
    public function convertPowerpoint($input_powerpoint_data)
    {
        list($response) = $this->convertPowerpointWithHttpInfo($input_powerpoint_data);
        return $response;
    }

    /**
     * Operation convertPowerpointWithHttpInfo
     *
     * Convert PowerPoint document
     *
     * @param \MuhimbiPDFOnline\Client\Model\ConvertPowerpointData $input_powerpoint_data  (required)
     * @throws \MuhimbiPDFOnline\Client\ApiException on non-2xx response
     * @return array of \MuhimbiPDFOnline\Client\Model\OperationResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function convertPowerpointWithHttpInfo($input_powerpoint_data)
    {
        // verify the required parameter 'input_powerpoint_data' is set
        if ($input_powerpoint_data === null) {
            throw new \InvalidArgumentException('Missing the required parameter $input_powerpoint_data when calling convertPowerpoint');
        }
        // parse inputs
        $resourcePath = "/v1/operations/convert_powerpoint";
        $httpBody = '';
        $queryParams = [];
        $headerParams = [];
        $formParams = [];
        $_header_accept = $this->apiClient->selectHeaderAccept(['application/json']);
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(['application/json']);

        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        // body params
        $_tempBody = null;
        if (isset($input_powerpoint_data)) {
            $_tempBody = $input_powerpoint_data;
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // this endpoint requires OAuth (access token)
        if (strlen($this->apiClient->getConfig()->getAccessToken()) !== 0) {
            $headerParams['Authorization'] = 'Bearer ' . $this->apiClient->getConfig()->getAccessToken();
        }
        // this endpoint requires API key authentication
        $apiKey = $this->apiClient->getApiKeyWithPrefix('api_key');
        if (strlen($apiKey) !== 0) {
            $headerParams['api_key'] = $apiKey;
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'POST',
                $queryParams,
                $httpBody,
                $headerParams,
                '\MuhimbiPDFOnline\Client\Model\OperationResponse',
                '/v1/operations/convert_powerpoint'
            );

            return [$this->apiClient->getSerializer()->deserialize($response, '\MuhimbiPDFOnline\Client\Model\OperationResponse', $httpHeader), $statusCode, $httpHeader];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\MuhimbiPDFOnline\Client\Model\OperationResponse', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation convertVisio
     *
     * Convert Visio document
     *
     * @param \MuhimbiPDFOnline\Client\Model\ConvertVisioData $input_visio_data  (required)
     * @throws \MuhimbiPDFOnline\Client\ApiException on non-2xx response
     * @return \MuhimbiPDFOnline\Client\Model\OperationResponse
     */
    public function convertVisio($input_visio_data)
    {
        list($response) = $this->convertVisioWithHttpInfo($input_visio_data);
        return $response;
    }

    /**
     * Operation convertVisioWithHttpInfo
     *
     * Convert Visio document
     *
     * @param \MuhimbiPDFOnline\Client\Model\ConvertVisioData $input_visio_data  (required)
     * @throws \MuhimbiPDFOnline\Client\ApiException on non-2xx response
     * @return array of \MuhimbiPDFOnline\Client\Model\OperationResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function convertVisioWithHttpInfo($input_visio_data)
    {
        // verify the required parameter 'input_visio_data' is set
        if ($input_visio_data === null) {
            throw new \InvalidArgumentException('Missing the required parameter $input_visio_data when calling convertVisio');
        }
        // parse inputs
        $resourcePath = "/v1/operations/convert_visio";
        $httpBody = '';
        $queryParams = [];
        $headerParams = [];
        $formParams = [];
        $_header_accept = $this->apiClient->selectHeaderAccept(['application/json']);
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(['application/json']);

        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        // body params
        $_tempBody = null;
        if (isset($input_visio_data)) {
            $_tempBody = $input_visio_data;
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // this endpoint requires OAuth (access token)
        if (strlen($this->apiClient->getConfig()->getAccessToken()) !== 0) {
            $headerParams['Authorization'] = 'Bearer ' . $this->apiClient->getConfig()->getAccessToken();
        }
        // this endpoint requires API key authentication
        $apiKey = $this->apiClient->getApiKeyWithPrefix('api_key');
        if (strlen($apiKey) !== 0) {
            $headerParams['api_key'] = $apiKey;
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'POST',
                $queryParams,
                $httpBody,
                $headerParams,
                '\MuhimbiPDFOnline\Client\Model\OperationResponse',
                '/v1/operations/convert_visio'
            );

            return [$this->apiClient->getSerializer()->deserialize($response, '\MuhimbiPDFOnline\Client\Model\OperationResponse', $httpHeader), $statusCode, $httpHeader];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\MuhimbiPDFOnline\Client\Model\OperationResponse', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation convertWord
     *
     * Convert Word document
     *
     * @param \MuhimbiPDFOnline\Client\Model\ConvertWordData $input_word_data  (required)
     * @throws \MuhimbiPDFOnline\Client\ApiException on non-2xx response
     * @return \MuhimbiPDFOnline\Client\Model\OperationResponse
     */
    public function convertWord($input_word_data)
    {
        list($response) = $this->convertWordWithHttpInfo($input_word_data);
        return $response;
    }

    /**
     * Operation convertWordWithHttpInfo
     *
     * Convert Word document
     *
     * @param \MuhimbiPDFOnline\Client\Model\ConvertWordData $input_word_data  (required)
     * @throws \MuhimbiPDFOnline\Client\ApiException on non-2xx response
     * @return array of \MuhimbiPDFOnline\Client\Model\OperationResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function convertWordWithHttpInfo($input_word_data)
    {
        // verify the required parameter 'input_word_data' is set
        if ($input_word_data === null) {
            throw new \InvalidArgumentException('Missing the required parameter $input_word_data when calling convertWord');
        }
        // parse inputs
        $resourcePath = "/v1/operations/convert_word";
        $httpBody = '';
        $queryParams = [];
        $headerParams = [];
        $formParams = [];
        $_header_accept = $this->apiClient->selectHeaderAccept(['application/json']);
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(['application/json']);

        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        // body params
        $_tempBody = null;
        if (isset($input_word_data)) {
            $_tempBody = $input_word_data;
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // this endpoint requires OAuth (access token)
        if (strlen($this->apiClient->getConfig()->getAccessToken()) !== 0) {
            $headerParams['Authorization'] = 'Bearer ' . $this->apiClient->getConfig()->getAccessToken();
        }
        // this endpoint requires API key authentication
        $apiKey = $this->apiClient->getApiKeyWithPrefix('api_key');
        if (strlen($apiKey) !== 0) {
            $headerParams['api_key'] = $apiKey;
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'POST',
                $queryParams,
                $httpBody,
                $headerParams,
                '\MuhimbiPDFOnline\Client\Model\OperationResponse',
                '/v1/operations/convert_word'
            );

            return [$this->apiClient->getSerializer()->deserialize($response, '\MuhimbiPDFOnline\Client\Model\OperationResponse', $httpHeader), $statusCode, $httpHeader];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\MuhimbiPDFOnline\Client\Model\OperationResponse', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation exportFormData
     *
     * Export PDF Forms Data
     *
     * @param \MuhimbiPDFOnline\Client\Model\ExportFormData $input_from_pdf_data  (required)
     * @throws \MuhimbiPDFOnline\Client\ApiException on non-2xx response
     * @return \MuhimbiPDFOnline\Client\Model\OperationResponse
     */
    public function exportFormData($input_from_pdf_data)
    {
        list($response) = $this->exportFormDataWithHttpInfo($input_from_pdf_data);
        return $response;
    }

    /**
     * Operation exportFormDataWithHttpInfo
     *
     * Export PDF Forms Data
     *
     * @param \MuhimbiPDFOnline\Client\Model\ExportFormData $input_from_pdf_data  (required)
     * @throws \MuhimbiPDFOnline\Client\ApiException on non-2xx response
     * @return array of \MuhimbiPDFOnline\Client\Model\OperationResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function exportFormDataWithHttpInfo($input_from_pdf_data)
    {
        // verify the required parameter 'input_from_pdf_data' is set
        if ($input_from_pdf_data === null) {
            throw new \InvalidArgumentException('Missing the required parameter $input_from_pdf_data when calling exportFormData');
        }
        // parse inputs
        $resourcePath = "/v1/operations/export_form_data";
        $httpBody = '';
        $queryParams = [];
        $headerParams = [];
        $formParams = [];
        $_header_accept = $this->apiClient->selectHeaderAccept(['application/json']);
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(['application/json']);

        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        // body params
        $_tempBody = null;
        if (isset($input_from_pdf_data)) {
            $_tempBody = $input_from_pdf_data;
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // this endpoint requires OAuth (access token)
        if (strlen($this->apiClient->getConfig()->getAccessToken()) !== 0) {
            $headerParams['Authorization'] = 'Bearer ' . $this->apiClient->getConfig()->getAccessToken();
        }
        // this endpoint requires API key authentication
        $apiKey = $this->apiClient->getApiKeyWithPrefix('api_key');
        if (strlen($apiKey) !== 0) {
            $headerParams['api_key'] = $apiKey;
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'POST',
                $queryParams,
                $httpBody,
                $headerParams,
                '\MuhimbiPDFOnline\Client\Model\OperationResponse',
                '/v1/operations/export_form_data'
            );

            return [$this->apiClient->getSerializer()->deserialize($response, '\MuhimbiPDFOnline\Client\Model\OperationResponse', $httpHeader), $statusCode, $httpHeader];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\MuhimbiPDFOnline\Client\Model\OperationResponse', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation importFormData
     *
     * Import PDF Forms data
     *
     * @param \MuhimbiPDFOnline\Client\Model\ImportFormData $input_xml_data  (required)
     * @throws \MuhimbiPDFOnline\Client\ApiException on non-2xx response
     * @return \MuhimbiPDFOnline\Client\Model\OperationResponse
     */
    public function importFormData($input_xml_data)
    {
        list($response) = $this->importFormDataWithHttpInfo($input_xml_data);
        return $response;
    }

    /**
     * Operation importFormDataWithHttpInfo
     *
     * Import PDF Forms data
     *
     * @param \MuhimbiPDFOnline\Client\Model\ImportFormData $input_xml_data  (required)
     * @throws \MuhimbiPDFOnline\Client\ApiException on non-2xx response
     * @return array of \MuhimbiPDFOnline\Client\Model\OperationResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function importFormDataWithHttpInfo($input_xml_data)
    {
        // verify the required parameter 'input_xml_data' is set
        if ($input_xml_data === null) {
            throw new \InvalidArgumentException('Missing the required parameter $input_xml_data when calling importFormData');
        }
        // parse inputs
        $resourcePath = "/v1/operations/import_form_data";
        $httpBody = '';
        $queryParams = [];
        $headerParams = [];
        $formParams = [];
        $_header_accept = $this->apiClient->selectHeaderAccept(['application/json']);
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(['application/json']);

        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        // body params
        $_tempBody = null;
        if (isset($input_xml_data)) {
            $_tempBody = $input_xml_data;
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // this endpoint requires OAuth (access token)
        if (strlen($this->apiClient->getConfig()->getAccessToken()) !== 0) {
            $headerParams['Authorization'] = 'Bearer ' . $this->apiClient->getConfig()->getAccessToken();
        }
        // this endpoint requires API key authentication
        $apiKey = $this->apiClient->getApiKeyWithPrefix('api_key');
        if (strlen($apiKey) !== 0) {
            $headerParams['api_key'] = $apiKey;
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'POST',
                $queryParams,
                $httpBody,
                $headerParams,
                '\MuhimbiPDFOnline\Client\Model\OperationResponse',
                '/v1/operations/import_form_data'
            );

            return [$this->apiClient->getSerializer()->deserialize($response, '\MuhimbiPDFOnline\Client\Model\OperationResponse', $httpHeader), $statusCode, $httpHeader];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\MuhimbiPDFOnline\Client\Model\OperationResponse', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }
}
