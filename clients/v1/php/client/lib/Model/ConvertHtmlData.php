<?php
/**
 * ConvertHtmlData
 *
 * PHP version 5
 *
 * @category Class
 * @package  MuhimbiPDFOnline\Client
 * @author   Swaagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * Muhimbi PDF
 *
 * Convert, Merge, Watermark, Secure and OCR files.
 *
 * OpenAPI spec version: 9.15
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 *
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace MuhimbiPDFOnline\Client\Model;

use \ArrayAccess;

/**
 * ConvertHtmlData Class Doc Comment
 *
 * @category    Class
 * @description Parameters for ConvertHtml operation
 * @package     MuhimbiPDFOnline\Client
 * @author      Swagger Codegen team
 * @link        https://github.com/swagger-api/swagger-codegen
 */
class ConvertHtmlData implements ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      * @var string
      */
    protected static $swaggerModelName = 'convert_html_data';

    /**
      * Array of property to type mappings. Used for (de)serialization
      * @var string[]
      */
    protected static $swaggerTypes = [
        'use_async_pattern' => 'bool',
        'source_url_or_html' => 'string',
        'page_orientation' => 'string',
        'media_type' => 'string',
        'authentication_type' => 'string',
        'username' => 'string',
        'password' => 'string',
        'viewport_size' => 'string',
        'conversion_delay' => 'int',
        'fail_on_error' => 'bool'
    ];

    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of attributes where the key is the local name, and the value is the original name
     * @var string[]
     */
    protected static $attributeMap = [
        'use_async_pattern' => 'use_async_pattern',
        'source_url_or_html' => 'source_url_or_html',
        'page_orientation' => 'page_orientation',
        'media_type' => 'media_type',
        'authentication_type' => 'authentication_type',
        'username' => 'username',
        'password' => 'password',
        'viewport_size' => 'viewport_size',
        'conversion_delay' => 'conversion_delay',
        'fail_on_error' => 'fail_on_error'
    ];


    /**
     * Array of attributes to setter functions (for deserialization of responses)
     * @var string[]
     */
    protected static $setters = [
        'use_async_pattern' => 'setUseAsyncPattern',
        'source_url_or_html' => 'setSourceUrlOrHtml',
        'page_orientation' => 'setPageOrientation',
        'media_type' => 'setMediaType',
        'authentication_type' => 'setAuthenticationType',
        'username' => 'setUsername',
        'password' => 'setPassword',
        'viewport_size' => 'setViewportSize',
        'conversion_delay' => 'setConversionDelay',
        'fail_on_error' => 'setFailOnError'
    ];


    /**
     * Array of attributes to getter functions (for serialization of requests)
     * @var string[]
     */
    protected static $getters = [
        'use_async_pattern' => 'getUseAsyncPattern',
        'source_url_or_html' => 'getSourceUrlOrHtml',
        'page_orientation' => 'getPageOrientation',
        'media_type' => 'getMediaType',
        'authentication_type' => 'getAuthenticationType',
        'username' => 'getUsername',
        'password' => 'getPassword',
        'viewport_size' => 'getViewportSize',
        'conversion_delay' => 'getConversionDelay',
        'fail_on_error' => 'getFailOnError'
    ];

    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    public static function setters()
    {
        return self::$setters;
    }

    public static function getters()
    {
        return self::$getters;
    }

    const PAGE_ORIENTATION_PORTRAIT = 'Portrait';
    const PAGE_ORIENTATION_LANDSCAPE = 'Landscape';
    const MEDIA_TYPE_SCREEN = 'Screen';
    const MEDIA_TYPE_PRINT = 'Print';
    const AUTHENTICATION_TYPE_ANONYMOUS = 'Anonymous';
    const AUTHENTICATION_TYPE_SHARE_POINT_ONLINE = 'SharePoint Online';
    const AUTHENTICATION_TYPE_WEB = 'Web';
    

    
    /**
     * Gets allowable values of the enum
     * @return string[]
     */
    public function getPageOrientationAllowableValues()
    {
        return [
            self::PAGE_ORIENTATION_PORTRAIT,
            self::PAGE_ORIENTATION_LANDSCAPE,
        ];
    }
    
    /**
     * Gets allowable values of the enum
     * @return string[]
     */
    public function getMediaTypeAllowableValues()
    {
        return [
            self::MEDIA_TYPE_SCREEN,
            self::MEDIA_TYPE_PRINT,
        ];
    }
    
    /**
     * Gets allowable values of the enum
     * @return string[]
     */
    public function getAuthenticationTypeAllowableValues()
    {
        return [
            self::AUTHENTICATION_TYPE_ANONYMOUS,
            self::AUTHENTICATION_TYPE_SHARE_POINT_ONLINE,
            self::AUTHENTICATION_TYPE_WEB,
        ];
    }
    

    /**
     * Associative array for storing property values
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     * @param mixed[] $data Associated array of property values initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['use_async_pattern'] = isset($data['use_async_pattern']) ? $data['use_async_pattern'] : false;
        $this->container['source_url_or_html'] = isset($data['source_url_or_html']) ? $data['source_url_or_html'] : null;
        $this->container['page_orientation'] = isset($data['page_orientation']) ? $data['page_orientation'] : 'Portrait';
        $this->container['media_type'] = isset($data['media_type']) ? $data['media_type'] : 'Screen';
        $this->container['authentication_type'] = isset($data['authentication_type']) ? $data['authentication_type'] : 'Anonymous';
        $this->container['username'] = isset($data['username']) ? $data['username'] : null;
        $this->container['password'] = isset($data['password']) ? $data['password'] : null;
        $this->container['viewport_size'] = isset($data['viewport_size']) ? $data['viewport_size'] : null;
        $this->container['conversion_delay'] = isset($data['conversion_delay']) ? $data['conversion_delay'] : null;
        $this->container['fail_on_error'] = isset($data['fail_on_error']) ? $data['fail_on_error'] : true;
    }

    /**
     * show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalid_properties = [];

        if ($this->container['use_async_pattern'] === null) {
            $invalid_properties[] = "'use_async_pattern' can't be null";
        }
        if ($this->container['source_url_or_html'] === null) {
            $invalid_properties[] = "'source_url_or_html' can't be null";
        }
        $allowed_values = ["Portrait", "Landscape"];
        if (!in_array($this->container['page_orientation'], $allowed_values)) {
            $invalid_properties[] = "invalid value for 'page_orientation', must be one of 'Portrait', 'Landscape'.";
        }

        $allowed_values = ["Screen", "Print"];
        if (!in_array($this->container['media_type'], $allowed_values)) {
            $invalid_properties[] = "invalid value for 'media_type', must be one of 'Screen', 'Print'.";
        }

        $allowed_values = ["Anonymous", "SharePoint Online", "Web"];
        if (!in_array($this->container['authentication_type'], $allowed_values)) {
            $invalid_properties[] = "invalid value for 'authentication_type', must be one of 'Anonymous', 'SharePoint Online', 'Web'.";
        }

        return $invalid_properties;
    }

    /**
     * validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {

        if ($this->container['use_async_pattern'] === null) {
            return false;
        }
        if ($this->container['source_url_or_html'] === null) {
            return false;
        }
        $allowed_values = ["Portrait", "Landscape"];
        if (!in_array($this->container['page_orientation'], $allowed_values)) {
            return false;
        }
        $allowed_values = ["Screen", "Print"];
        if (!in_array($this->container['media_type'], $allowed_values)) {
            return false;
        }
        $allowed_values = ["Anonymous", "SharePoint Online", "Web"];
        if (!in_array($this->container['authentication_type'], $allowed_values)) {
            return false;
        }
        return true;
    }


    /**
     * Gets use_async_pattern
     * @return bool
     */
    public function getUseAsyncPattern()
    {
        return $this->container['use_async_pattern'];
    }

    /**
     * Sets use_async_pattern
     * @param bool $use_async_pattern Use async behaviour for API request
     * @return $this
     */
    public function setUseAsyncPattern($use_async_pattern)
    {
        $this->container['use_async_pattern'] = $use_async_pattern;

        return $this;
    }

    /**
     * Gets source_url_or_html
     * @return string
     */
    public function getSourceUrlOrHtml()
    {
        return $this->container['source_url_or_html'];
    }

    /**
     * Sets source_url_or_html
     * @param string $source_url_or_html HTML fragment or URL to convert
     * @return $this
     */
    public function setSourceUrlOrHtml($source_url_or_html)
    {
        $this->container['source_url_or_html'] = $source_url_or_html;

        return $this;
    }

    /**
     * Gets page_orientation
     * @return string
     */
    public function getPageOrientation()
    {
        return $this->container['page_orientation'];
    }

    /**
     * Sets page_orientation
     * @param string $page_orientation Page orientation
     * @return $this
     */
    public function setPageOrientation($page_orientation)
    {
        $allowed_values = array('Portrait', 'Landscape');
        if (!is_null($page_orientation) && (!in_array($page_orientation, $allowed_values))) {
            throw new \InvalidArgumentException("Invalid value for 'page_orientation', must be one of 'Portrait', 'Landscape'");
        }
        $this->container['page_orientation'] = $page_orientation;

        return $this;
    }

    /**
     * Gets media_type
     * @return string
     */
    public function getMediaType()
    {
        return $this->container['media_type'];
    }

    /**
     * Sets media_type
     * @param string $media_type Media type
     * @return $this
     */
    public function setMediaType($media_type)
    {
        $allowed_values = array('Screen', 'Print');
        if (!is_null($media_type) && (!in_array($media_type, $allowed_values))) {
            throw new \InvalidArgumentException("Invalid value for 'media_type', must be one of 'Screen', 'Print'");
        }
        $this->container['media_type'] = $media_type;

        return $this;
    }

    /**
     * Gets authentication_type
     * @return string
     */
    public function getAuthenticationType()
    {
        return $this->container['authentication_type'];
    }

    /**
     * Sets authentication_type
     * @param string $authentication_type Authentication type
     * @return $this
     */
    public function setAuthenticationType($authentication_type)
    {
        $allowed_values = array('Anonymous', 'SharePoint Online', 'Web');
        if (!is_null($authentication_type) && (!in_array($authentication_type, $allowed_values))) {
            throw new \InvalidArgumentException("Invalid value for 'authentication_type', must be one of 'Anonymous', 'SharePoint Online', 'Web'");
        }
        $this->container['authentication_type'] = $authentication_type;

        return $this;
    }

    /**
     * Gets username
     * @return string
     */
    public function getUsername()
    {
        return $this->container['username'];
    }

    /**
     * Sets username
     * @param string $username User name
     * @return $this
     */
    public function setUsername($username)
    {
        $this->container['username'] = $username;

        return $this;
    }

    /**
     * Gets password
     * @return string
     */
    public function getPassword()
    {
        return $this->container['password'];
    }

    /**
     * Sets password
     * @param string $password Password
     * @return $this
     */
    public function setPassword($password)
    {
        $this->container['password'] = $password;

        return $this;
    }

    /**
     * Gets viewport_size
     * @return string
     */
    public function getViewportSize()
    {
        return $this->container['viewport_size'];
    }

    /**
     * Sets viewport_size
     * @param string $viewport_size Optional width and height of the simulated browser (e.g. 1024x768)
     * @return $this
     */
    public function setViewportSize($viewport_size)
    {
        $this->container['viewport_size'] = $viewport_size;

        return $this;
    }

    /**
     * Gets conversion_delay
     * @return int
     */
    public function getConversionDelay()
    {
        return $this->container['conversion_delay'];
    }

    /**
     * Sets conversion_delay
     * @param int $conversion_delay Conversion delay (in milliseconds)
     * @return $this
     */
    public function setConversionDelay($conversion_delay)
    {
        $this->container['conversion_delay'] = $conversion_delay;

        return $this;
    }

    /**
     * Gets fail_on_error
     * @return bool
     */
    public function getFailOnError()
    {
        return $this->container['fail_on_error'];
    }

    /**
     * Sets fail_on_error
     * @param bool $fail_on_error Fail on error
     * @return $this
     */
    public function setFailOnError($fail_on_error)
    {
        $this->container['fail_on_error'] = $fail_on_error;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     * @param  integer $offset Offset
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     * @param  integer $offset Offset
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     * @param  integer $offset Offset
     * @param  mixed   $value  Value to be set
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     * @param  integer $offset Offset
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(\MuhimbiPDFOnline\Client\ObjectSerializer::sanitizeForSerialization($this), JSON_PRETTY_PRINT);
        }

        return json_encode(\MuhimbiPDFOnline\Client\ObjectSerializer::sanitizeForSerialization($this));
    }
}


