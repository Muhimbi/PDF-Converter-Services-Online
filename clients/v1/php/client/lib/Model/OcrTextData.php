<?php
/**
 * OcrTextData
 *
 * PHP version 5
 *
 * @category Class
 * @package  MuhimbiPDFOnline\Client
 * @author   Swaagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * Muhimbi PDF
 *
 * Convert, Merge, Watermark, Secure and OCR files.
 *
 * OpenAPI spec version: 9.16
 * Contact: support@muhimbi.com
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 *
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace MuhimbiPDFOnline\Client\Model;

use \ArrayAccess;

/**
 * OcrTextData Class Doc Comment
 *
 * @category    Class
 * @description Parameters for OCRText operation
 * @package     MuhimbiPDFOnline\Client
 * @author      Swagger Codegen team
 * @link        https://github.com/swagger-api/swagger-codegen
 */
class OcrTextData implements ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      * @var string
      */
    protected static $swaggerModelName = 'ocr_text_data';

    /**
      * Array of property to type mappings. Used for (de)serialization
      * @var string[]
      */
    protected static $swaggerTypes = [
        'use_async_pattern' => 'bool',
        'source_file_name' => 'string',
        'source_file_content' => 'string',
        'sharepoint_file' => '\MuhimbiPDFOnline\Client\Model\SharepointFile',
        'language' => 'string',
        'x' => 'string',
        'y' => 'string',
        'width' => 'string',
        'height' => 'string',
        'page_number' => 'string',
        'performance' => 'string',
        'characters_option' => 'string',
        'characters' => 'string',
        'paginate' => 'bool',
        'fail_on_error' => 'bool'
    ];

    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of attributes where the key is the local name, and the value is the original name
     * @var string[]
     */
    protected static $attributeMap = [
        'use_async_pattern' => 'use_async_pattern',
        'source_file_name' => 'source_file_name',
        'source_file_content' => 'source_file_content',
        'sharepoint_file' => 'sharepoint_file',
        'language' => 'language',
        'x' => 'x',
        'y' => 'y',
        'width' => 'width',
        'height' => 'height',
        'page_number' => 'page_number',
        'performance' => 'performance',
        'characters_option' => 'characters_option',
        'characters' => 'characters',
        'paginate' => 'paginate',
        'fail_on_error' => 'fail_on_error'
    ];


    /**
     * Array of attributes to setter functions (for deserialization of responses)
     * @var string[]
     */
    protected static $setters = [
        'use_async_pattern' => 'setUseAsyncPattern',
        'source_file_name' => 'setSourceFileName',
        'source_file_content' => 'setSourceFileContent',
        'sharepoint_file' => 'setSharepointFile',
        'language' => 'setLanguage',
        'x' => 'setX',
        'y' => 'setY',
        'width' => 'setWidth',
        'height' => 'setHeight',
        'page_number' => 'setPageNumber',
        'performance' => 'setPerformance',
        'characters_option' => 'setCharactersOption',
        'characters' => 'setCharacters',
        'paginate' => 'setPaginate',
        'fail_on_error' => 'setFailOnError'
    ];


    /**
     * Array of attributes to getter functions (for serialization of requests)
     * @var string[]
     */
    protected static $getters = [
        'use_async_pattern' => 'getUseAsyncPattern',
        'source_file_name' => 'getSourceFileName',
        'source_file_content' => 'getSourceFileContent',
        'sharepoint_file' => 'getSharepointFile',
        'language' => 'getLanguage',
        'x' => 'getX',
        'y' => 'getY',
        'width' => 'getWidth',
        'height' => 'getHeight',
        'page_number' => 'getPageNumber',
        'performance' => 'getPerformance',
        'characters_option' => 'getCharactersOption',
        'characters' => 'getCharacters',
        'paginate' => 'getPaginate',
        'fail_on_error' => 'getFailOnError'
    ];

    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    public static function setters()
    {
        return self::$setters;
    }

    public static function getters()
    {
        return self::$getters;
    }

    const LANGUAGE_ENGLISH = 'English';
    const LANGUAGE_ARABIC = 'Arabic';
    const LANGUAGE_DANISH = 'Danish';
    const LANGUAGE_GERMAN = 'German';
    const LANGUAGE_DUTCH = 'Dutch';
    const LANGUAGE_FINNISH = 'Finnish';
    const LANGUAGE_FRENCH = 'French';
    const LANGUAGE_HEBREW = 'Hebrew';
    const LANGUAGE_HUNGARIAN = 'Hungarian';
    const LANGUAGE_ITALIAN = 'Italian';
    const LANGUAGE_NORWEGIAN = 'Norwegian';
    const LANGUAGE_PORTUGUESE = 'Portuguese';
    const LANGUAGE_SPANISH = 'Spanish';
    const LANGUAGE_SWEDISH = 'Swedish';
    const LANGUAGE_RUSSIAN = 'Russian';
    const PERFORMANCE_SLOW_BUT_ACCURATE = 'Slow but accurate';
    const PERFORMANCE_FASTER_AND_LESS_ACCURATE = 'Faster and less accurate';
    const PERFORMANCE_FASTEST_AND_LEAST_ACCURATE = 'Fastest and least accurate';
    const CHARACTERS_OPTION_NONE = 'None';
    const CHARACTERS_OPTION_WHITELIST = 'Whitelist';
    const CHARACTERS_OPTION_BLACKLIST = 'Blacklist';
    

    
    /**
     * Gets allowable values of the enum
     * @return string[]
     */
    public function getLanguageAllowableValues()
    {
        return [
            self::LANGUAGE_ENGLISH,
            self::LANGUAGE_ARABIC,
            self::LANGUAGE_DANISH,
            self::LANGUAGE_GERMAN,
            self::LANGUAGE_DUTCH,
            self::LANGUAGE_FINNISH,
            self::LANGUAGE_FRENCH,
            self::LANGUAGE_HEBREW,
            self::LANGUAGE_HUNGARIAN,
            self::LANGUAGE_ITALIAN,
            self::LANGUAGE_NORWEGIAN,
            self::LANGUAGE_PORTUGUESE,
            self::LANGUAGE_SPANISH,
            self::LANGUAGE_SWEDISH,
            self::LANGUAGE_RUSSIAN,
        ];
    }
    
    /**
     * Gets allowable values of the enum
     * @return string[]
     */
    public function getPerformanceAllowableValues()
    {
        return [
            self::PERFORMANCE_SLOW_BUT_ACCURATE,
            self::PERFORMANCE_FASTER_AND_LESS_ACCURATE,
            self::PERFORMANCE_FASTEST_AND_LEAST_ACCURATE,
        ];
    }
    
    /**
     * Gets allowable values of the enum
     * @return string[]
     */
    public function getCharactersOptionAllowableValues()
    {
        return [
            self::CHARACTERS_OPTION_NONE,
            self::CHARACTERS_OPTION_WHITELIST,
            self::CHARACTERS_OPTION_BLACKLIST,
        ];
    }
    

    /**
     * Associative array for storing property values
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     * @param mixed[] $data Associated array of property values initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['use_async_pattern'] = isset($data['use_async_pattern']) ? $data['use_async_pattern'] : false;
        $this->container['source_file_name'] = isset($data['source_file_name']) ? $data['source_file_name'] : null;
        $this->container['source_file_content'] = isset($data['source_file_content']) ? $data['source_file_content'] : null;
        $this->container['sharepoint_file'] = isset($data['sharepoint_file']) ? $data['sharepoint_file'] : null;
        $this->container['language'] = isset($data['language']) ? $data['language'] : 'English';
        $this->container['x'] = isset($data['x']) ? $data['x'] : null;
        $this->container['y'] = isset($data['y']) ? $data['y'] : null;
        $this->container['width'] = isset($data['width']) ? $data['width'] : null;
        $this->container['height'] = isset($data['height']) ? $data['height'] : null;
        $this->container['page_number'] = isset($data['page_number']) ? $data['page_number'] : '';
        $this->container['performance'] = isset($data['performance']) ? $data['performance'] : 'Slow but accurate';
        $this->container['characters_option'] = isset($data['characters_option']) ? $data['characters_option'] : 'None';
        $this->container['characters'] = isset($data['characters']) ? $data['characters'] : null;
        $this->container['paginate'] = isset($data['paginate']) ? $data['paginate'] : false;
        $this->container['fail_on_error'] = isset($data['fail_on_error']) ? $data['fail_on_error'] : true;
    }

    /**
     * show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalid_properties = [];

        if ($this->container['use_async_pattern'] === null) {
            $invalid_properties[] = "'use_async_pattern' can't be null";
        }
        if ($this->container['source_file_name'] === null) {
            $invalid_properties[] = "'source_file_name' can't be null";
        }
        if ($this->container['source_file_content'] === null) {
            $invalid_properties[] = "'source_file_content' can't be null";
        }
        $allowed_values = ["English", "Arabic", "Danish", "German", "Dutch", "Finnish", "French", "Hebrew", "Hungarian", "Italian", "Norwegian", "Portuguese", "Spanish", "Swedish", "Russian"];
        if (!in_array($this->container['language'], $allowed_values)) {
            $invalid_properties[] = "invalid value for 'language', must be one of 'English', 'Arabic', 'Danish', 'German', 'Dutch', 'Finnish', 'French', 'Hebrew', 'Hungarian', 'Italian', 'Norwegian', 'Portuguese', 'Spanish', 'Swedish', 'Russian'.";
        }

        $allowed_values = ["Slow but accurate", "Faster and less accurate", "Fastest and least accurate"];
        if (!in_array($this->container['performance'], $allowed_values)) {
            $invalid_properties[] = "invalid value for 'performance', must be one of 'Slow but accurate', 'Faster and less accurate', 'Fastest and least accurate'.";
        }

        $allowed_values = ["None", "Whitelist", "Blacklist"];
        if (!in_array($this->container['characters_option'], $allowed_values)) {
            $invalid_properties[] = "invalid value for 'characters_option', must be one of 'None', 'Whitelist', 'Blacklist'.";
        }

        return $invalid_properties;
    }

    /**
     * validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {

        if ($this->container['use_async_pattern'] === null) {
            return false;
        }
        if ($this->container['source_file_name'] === null) {
            return false;
        }
        if ($this->container['source_file_content'] === null) {
            return false;
        }
        $allowed_values = ["English", "Arabic", "Danish", "German", "Dutch", "Finnish", "French", "Hebrew", "Hungarian", "Italian", "Norwegian", "Portuguese", "Spanish", "Swedish", "Russian"];
        if (!in_array($this->container['language'], $allowed_values)) {
            return false;
        }
        $allowed_values = ["Slow but accurate", "Faster and less accurate", "Fastest and least accurate"];
        if (!in_array($this->container['performance'], $allowed_values)) {
            return false;
        }
        $allowed_values = ["None", "Whitelist", "Blacklist"];
        if (!in_array($this->container['characters_option'], $allowed_values)) {
            return false;
        }
        return true;
    }


    /**
     * Gets use_async_pattern
     * @return bool
     */
    public function getUseAsyncPattern()
    {
        return $this->container['use_async_pattern'];
    }

    /**
     * Sets use_async_pattern
     * @param bool $use_async_pattern Use async behaviour for API request
     * @return $this
     */
    public function setUseAsyncPattern($use_async_pattern)
    {
        $this->container['use_async_pattern'] = $use_async_pattern;

        return $this;
    }

    /**
     * Gets source_file_name
     * @return string
     */
    public function getSourceFileName()
    {
        return $this->container['source_file_name'];
    }

    /**
     * Sets source_file_name
     * @param string $source_file_name Name of the source file including extension
     * @return $this
     */
    public function setSourceFileName($source_file_name)
    {
        $this->container['source_file_name'] = $source_file_name;

        return $this;
    }

    /**
     * Gets source_file_content
     * @return string
     */
    public function getSourceFileContent()
    {
        return $this->container['source_file_content'];
    }

    /**
     * Sets source_file_content
     * @param string $source_file_content Content of the file to OCR
     * @return $this
     */
    public function setSourceFileContent($source_file_content)
    {
        $this->container['source_file_content'] = $source_file_content;

        return $this;
    }

    /**
     * Gets sharepoint_file
     * @return \MuhimbiPDFOnline\Client\Model\SharepointFile
     */
    public function getSharepointFile()
    {
        return $this->container['sharepoint_file'];
    }

    /**
     * Sets sharepoint_file
     * @param \MuhimbiPDFOnline\Client\Model\SharepointFile $sharepoint_file
     * @return $this
     */
    public function setSharepointFile($sharepoint_file)
    {
        $this->container['sharepoint_file'] = $sharepoint_file;

        return $this;
    }

    /**
     * Gets language
     * @return string
     */
    public function getLanguage()
    {
        return $this->container['language'];
    }

    /**
     * Sets language
     * @param string $language Language
     * @return $this
     */
    public function setLanguage($language)
    {
        $allowed_values = array('English', 'Arabic', 'Danish', 'German', 'Dutch', 'Finnish', 'French', 'Hebrew', 'Hungarian', 'Italian', 'Norwegian', 'Portuguese', 'Spanish', 'Swedish', 'Russian');
        if (!is_null($language) && (!in_array($language, $allowed_values))) {
            throw new \InvalidArgumentException("Invalid value for 'language', must be one of 'English', 'Arabic', 'Danish', 'German', 'Dutch', 'Finnish', 'French', 'Hebrew', 'Hungarian', 'Italian', 'Norwegian', 'Portuguese', 'Spanish', 'Swedish', 'Russian'");
        }
        $this->container['language'] = $language;

        return $this;
    }

    /**
     * Gets x
     * @return string
     */
    public function getX()
    {
        return $this->container['x'];
    }

    /**
     * Sets x
     * @param string $x X Coordinate (in Pts, 1/72 of an inch)
     * @return $this
     */
    public function setX($x)
    {
        $this->container['x'] = $x;

        return $this;
    }

    /**
     * Gets y
     * @return string
     */
    public function getY()
    {
        return $this->container['y'];
    }

    /**
     * Sets y
     * @param string $y Y Coordinate (in Pts, 1/72 of an inch)
     * @return $this
     */
    public function setY($y)
    {
        $this->container['y'] = $y;

        return $this;
    }

    /**
     * Gets width
     * @return string
     */
    public function getWidth()
    {
        return $this->container['width'];
    }

    /**
     * Sets width
     * @param string $width Width of the OCR area (in Pts, 1/72 of an inch)
     * @return $this
     */
    public function setWidth($width)
    {
        $this->container['width'] = $width;

        return $this;
    }

    /**
     * Gets height
     * @return string
     */
    public function getHeight()
    {
        return $this->container['height'];
    }

    /**
     * Sets height
     * @param string $height Height of the OCR area (in Pts, 1/72 of an inch)
     * @return $this
     */
    public function setHeight($height)
    {
        $this->container['height'] = $height;

        return $this;
    }

    /**
     * Gets page_number
     * @return string
     */
    public function getPageNumber()
    {
        return $this->container['page_number'];
    }

    /**
     * Sets page_number
     * @param string $page_number Page number (leave blank to OCR all pages)
     * @return $this
     */
    public function setPageNumber($page_number)
    {
        $this->container['page_number'] = $page_number;

        return $this;
    }

    /**
     * Gets performance
     * @return string
     */
    public function getPerformance()
    {
        return $this->container['performance'];
    }

    /**
     * Sets performance
     * @param string $performance Performance ()
     * @return $this
     */
    public function setPerformance($performance)
    {
        $allowed_values = array('Slow but accurate', 'Faster and less accurate', 'Fastest and least accurate');
        if (!is_null($performance) && (!in_array($performance, $allowed_values))) {
            throw new \InvalidArgumentException("Invalid value for 'performance', must be one of 'Slow but accurate', 'Faster and less accurate', 'Fastest and least accurate'");
        }
        $this->container['performance'] = $performance;

        return $this;
    }

    /**
     * Gets characters_option
     * @return string
     */
    public function getCharactersOption()
    {
        return $this->container['characters_option'];
    }

    /**
     * Sets characters_option
     * @param string $characters_option Characters option
     * @return $this
     */
    public function setCharactersOption($characters_option)
    {
        $allowed_values = array('None', 'Whitelist', 'Blacklist');
        if (!is_null($characters_option) && (!in_array($characters_option, $allowed_values))) {
            throw new \InvalidArgumentException("Invalid value for 'characters_option', must be one of 'None', 'Whitelist', 'Blacklist'");
        }
        $this->container['characters_option'] = $characters_option;

        return $this;
    }

    /**
     * Gets characters
     * @return string
     */
    public function getCharacters()
    {
        return $this->container['characters'];
    }

    /**
     * Sets characters
     * @param string $characters Characters to blacklist or whitelist
     * @return $this
     */
    public function setCharacters($characters)
    {
        $this->container['characters'] = $characters;

        return $this;
    }

    /**
     * Gets paginate
     * @return bool
     */
    public function getPaginate()
    {
        return $this->container['paginate'];
    }

    /**
     * Sets paginate
     * @param bool $paginate Paginate
     * @return $this
     */
    public function setPaginate($paginate)
    {
        $this->container['paginate'] = $paginate;

        return $this;
    }

    /**
     * Gets fail_on_error
     * @return bool
     */
    public function getFailOnError()
    {
        return $this->container['fail_on_error'];
    }

    /**
     * Sets fail_on_error
     * @param bool $fail_on_error Fail on error
     * @return $this
     */
    public function setFailOnError($fail_on_error)
    {
        $this->container['fail_on_error'] = $fail_on_error;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     * @param  integer $offset Offset
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     * @param  integer $offset Offset
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     * @param  integer $offset Offset
     * @param  mixed   $value  Value to be set
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     * @param  integer $offset Offset
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(\MuhimbiPDFOnline\Client\ObjectSerializer::sanitizeForSerialization($this), JSON_PRETTY_PRINT);
        }

        return json_encode(\MuhimbiPDFOnline\Client\ObjectSerializer::sanitizeForSerialization($this));
    }
}


