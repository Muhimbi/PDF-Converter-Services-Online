<?php
/**
 * ConvertPdfaData
 *
 * PHP version 5
 *
 * @category Class
 * @package  MuhimbiPDFOnline\Client
 * @author   Swaagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * Muhimbi PDF
 *
 * Convert, Merge, Watermark, Secure and OCR files.
 *
 * OpenAPI spec version: 9.16
 * Contact: support@muhimbi.com
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 *
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace MuhimbiPDFOnline\Client\Model;

use \ArrayAccess;

/**
 * ConvertPdfaData Class Doc Comment
 *
 * @category    Class
 * @description Parameters for Convert PDF operation
 * @package     MuhimbiPDFOnline\Client
 * @author      Swagger Codegen team
 * @link        https://github.com/swagger-api/swagger-codegen
 */
class ConvertPdfaData implements ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      * @var string
      */
    protected static $swaggerModelName = 'convert_pdfa_data';

    /**
      * Array of property to type mappings. Used for (de)serialization
      * @var string[]
      */
    protected static $swaggerTypes = [
        'use_async_pattern' => 'bool',
        'source_file_name' => 'string',
        'sharepoint_file' => '\MuhimbiPDFOnline\Client\Model\SharepointFile',
        'source_file_content' => 'string',
        'copy_metadata' => 'bool',
        'pdf_profile' => 'string',
        'override_settings' => 'string',
        'fail_on_error' => 'bool'
    ];

    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of attributes where the key is the local name, and the value is the original name
     * @var string[]
     */
    protected static $attributeMap = [
        'use_async_pattern' => 'use_async_pattern',
        'source_file_name' => 'source_file_name',
        'sharepoint_file' => 'sharepoint_file',
        'source_file_content' => 'source_file_content',
        'copy_metadata' => 'copy_metadata',
        'pdf_profile' => 'pdf_profile',
        'override_settings' => 'override_settings',
        'fail_on_error' => 'fail_on_error'
    ];


    /**
     * Array of attributes to setter functions (for deserialization of responses)
     * @var string[]
     */
    protected static $setters = [
        'use_async_pattern' => 'setUseAsyncPattern',
        'source_file_name' => 'setSourceFileName',
        'sharepoint_file' => 'setSharepointFile',
        'source_file_content' => 'setSourceFileContent',
        'copy_metadata' => 'setCopyMetadata',
        'pdf_profile' => 'setPdfProfile',
        'override_settings' => 'setOverrideSettings',
        'fail_on_error' => 'setFailOnError'
    ];


    /**
     * Array of attributes to getter functions (for serialization of requests)
     * @var string[]
     */
    protected static $getters = [
        'use_async_pattern' => 'getUseAsyncPattern',
        'source_file_name' => 'getSourceFileName',
        'sharepoint_file' => 'getSharepointFile',
        'source_file_content' => 'getSourceFileContent',
        'copy_metadata' => 'getCopyMetadata',
        'pdf_profile' => 'getPdfProfile',
        'override_settings' => 'getOverrideSettings',
        'fail_on_error' => 'getFailOnError'
    ];

    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    public static function setters()
    {
        return self::$setters;
    }

    public static function getters()
    {
        return self::$getters;
    }

    const PDF_PROFILE_DEFAULT = 'Default';
    const PDF_PROFILE_PDF_1_5 = 'PDF_1_5';
    const PDF_PROFILE_PDF_A1_B = 'PDF_A1B';
    const PDF_PROFILE_PDF_A2_B = 'PDF_A2B';
    const PDF_PROFILE_PDF_A2_U = 'PDF_A2U';
    const PDF_PROFILE_PDF_A3_B = 'PDF_A3B';
    const PDF_PROFILE_PDF_A3_U = 'PDF_A3U';
    const PDF_PROFILE_PDF_1_1 = 'PDF_1_1';
    const PDF_PROFILE_PDF_1_2 = 'PDF_1_2';
    const PDF_PROFILE_PDF_1_3 = 'PDF_1_3';
    const PDF_PROFILE_PDF_1_4 = 'PDF_1_4';
    const PDF_PROFILE_PDF_1_6 = 'PDF_1_6';
    const PDF_PROFILE_PDF_1_7 = 'PDF_1_7';
    

    
    /**
     * Gets allowable values of the enum
     * @return string[]
     */
    public function getPdfProfileAllowableValues()
    {
        return [
            self::PDF_PROFILE_DEFAULT,
            self::PDF_PROFILE_PDF_1_5,
            self::PDF_PROFILE_PDF_A1_B,
            self::PDF_PROFILE_PDF_A2_B,
            self::PDF_PROFILE_PDF_A2_U,
            self::PDF_PROFILE_PDF_A3_B,
            self::PDF_PROFILE_PDF_A3_U,
            self::PDF_PROFILE_PDF_1_1,
            self::PDF_PROFILE_PDF_1_2,
            self::PDF_PROFILE_PDF_1_3,
            self::PDF_PROFILE_PDF_1_4,
            self::PDF_PROFILE_PDF_1_6,
            self::PDF_PROFILE_PDF_1_7,
        ];
    }
    

    /**
     * Associative array for storing property values
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     * @param mixed[] $data Associated array of property values initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['use_async_pattern'] = isset($data['use_async_pattern']) ? $data['use_async_pattern'] : false;
        $this->container['source_file_name'] = isset($data['source_file_name']) ? $data['source_file_name'] : null;
        $this->container['sharepoint_file'] = isset($data['sharepoint_file']) ? $data['sharepoint_file'] : null;
        $this->container['source_file_content'] = isset($data['source_file_content']) ? $data['source_file_content'] : null;
        $this->container['copy_metadata'] = isset($data['copy_metadata']) ? $data['copy_metadata'] : false;
        $this->container['pdf_profile'] = isset($data['pdf_profile']) ? $data['pdf_profile'] : 'PDF_A2B';
        $this->container['override_settings'] = isset($data['override_settings']) ? $data['override_settings'] : null;
        $this->container['fail_on_error'] = isset($data['fail_on_error']) ? $data['fail_on_error'] : true;
    }

    /**
     * show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalid_properties = [];

        if ($this->container['use_async_pattern'] === null) {
            $invalid_properties[] = "'use_async_pattern' can't be null";
        }
        if ($this->container['source_file_name'] === null) {
            $invalid_properties[] = "'source_file_name' can't be null";
        }
        if ($this->container['source_file_content'] === null) {
            $invalid_properties[] = "'source_file_content' can't be null";
        }
        if ($this->container['copy_metadata'] === null) {
            $invalid_properties[] = "'copy_metadata' can't be null";
        }
        if ($this->container['pdf_profile'] === null) {
            $invalid_properties[] = "'pdf_profile' can't be null";
        }
        $allowed_values = ["Default", "PDF_1_5", "PDF_A1B", "PDF_A2B", "PDF_A2U", "PDF_A3B", "PDF_A3U", "PDF_1_1", "PDF_1_2", "PDF_1_3", "PDF_1_4", "PDF_1_6", "PDF_1_7"];
        if (!in_array($this->container['pdf_profile'], $allowed_values)) {
            $invalid_properties[] = "invalid value for 'pdf_profile', must be one of 'Default', 'PDF_1_5', 'PDF_A1B', 'PDF_A2B', 'PDF_A2U', 'PDF_A3B', 'PDF_A3U', 'PDF_1_1', 'PDF_1_2', 'PDF_1_3', 'PDF_1_4', 'PDF_1_6', 'PDF_1_7'.";
        }

        return $invalid_properties;
    }

    /**
     * validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {

        if ($this->container['use_async_pattern'] === null) {
            return false;
        }
        if ($this->container['source_file_name'] === null) {
            return false;
        }
        if ($this->container['source_file_content'] === null) {
            return false;
        }
        if ($this->container['copy_metadata'] === null) {
            return false;
        }
        if ($this->container['pdf_profile'] === null) {
            return false;
        }
        $allowed_values = ["Default", "PDF_1_5", "PDF_A1B", "PDF_A2B", "PDF_A2U", "PDF_A3B", "PDF_A3U", "PDF_1_1", "PDF_1_2", "PDF_1_3", "PDF_1_4", "PDF_1_6", "PDF_1_7"];
        if (!in_array($this->container['pdf_profile'], $allowed_values)) {
            return false;
        }
        return true;
    }


    /**
     * Gets use_async_pattern
     * @return bool
     */
    public function getUseAsyncPattern()
    {
        return $this->container['use_async_pattern'];
    }

    /**
     * Sets use_async_pattern
     * @param bool $use_async_pattern Use async behaviour for API request
     * @return $this
     */
    public function setUseAsyncPattern($use_async_pattern)
    {
        $this->container['use_async_pattern'] = $use_async_pattern;

        return $this;
    }

    /**
     * Gets source_file_name
     * @return string
     */
    public function getSourceFileName()
    {
        return $this->container['source_file_name'];
    }

    /**
     * Sets source_file_name
     * @param string $source_file_name Name of the source file including extension
     * @return $this
     */
    public function setSourceFileName($source_file_name)
    {
        $this->container['source_file_name'] = $source_file_name;

        return $this;
    }

    /**
     * Gets sharepoint_file
     * @return \MuhimbiPDFOnline\Client\Model\SharepointFile
     */
    public function getSharepointFile()
    {
        return $this->container['sharepoint_file'];
    }

    /**
     * Sets sharepoint_file
     * @param \MuhimbiPDFOnline\Client\Model\SharepointFile $sharepoint_file
     * @return $this
     */
    public function setSharepointFile($sharepoint_file)
    {
        $this->container['sharepoint_file'] = $sharepoint_file;

        return $this;
    }

    /**
     * Gets source_file_content
     * @return string
     */
    public function getSourceFileContent()
    {
        return $this->container['source_file_content'];
    }

    /**
     * Sets source_file_content
     * @param string $source_file_content Content of the file to convert
     * @return $this
     */
    public function setSourceFileContent($source_file_content)
    {
        $this->container['source_file_content'] = $source_file_content;

        return $this;
    }

    /**
     * Gets copy_metadata
     * @return bool
     */
    public function getCopyMetadata()
    {
        return $this->container['copy_metadata'];
    }

    /**
     * Sets copy_metadata
     * @param bool $copy_metadata Copy metadata (Only for SharePoint operations)
     * @return $this
     */
    public function setCopyMetadata($copy_metadata)
    {
        $this->container['copy_metadata'] = $copy_metadata;

        return $this;
    }

    /**
     * Gets pdf_profile
     * @return string
     */
    public function getPdfProfile()
    {
        return $this->container['pdf_profile'];
    }

    /**
     * Sets pdf_profile
     * @param string $pdf_profile PDF profile to use for rendering the document
     * @return $this
     */
    public function setPdfProfile($pdf_profile)
    {
        $allowed_values = array('Default', 'PDF_1_5', 'PDF_A1B', 'PDF_A2B', 'PDF_A2U', 'PDF_A3B', 'PDF_A3U', 'PDF_1_1', 'PDF_1_2', 'PDF_1_3', 'PDF_1_4', 'PDF_1_6', 'PDF_1_7');
        if ((!in_array($pdf_profile, $allowed_values))) {
            throw new \InvalidArgumentException("Invalid value for 'pdf_profile', must be one of 'Default', 'PDF_1_5', 'PDF_A1B', 'PDF_A2B', 'PDF_A2U', 'PDF_A3B', 'PDF_A3U', 'PDF_1_1', 'PDF_1_2', 'PDF_1_3', 'PDF_1_4', 'PDF_1_6', 'PDF_1_7'");
        }
        $this->container['pdf_profile'] = $pdf_profile;

        return $this;
    }

    /**
     * Gets override_settings
     * @return string
     */
    public function getOverrideSettings()
    {
        return $this->container['override_settings'];
    }

    /**
     * Sets override_settings
     * @param string $override_settings Optional settings using Muhimbi's XML syntax
     * @return $this
     */
    public function setOverrideSettings($override_settings)
    {
        $this->container['override_settings'] = $override_settings;

        return $this;
    }

    /**
     * Gets fail_on_error
     * @return bool
     */
    public function getFailOnError()
    {
        return $this->container['fail_on_error'];
    }

    /**
     * Sets fail_on_error
     * @param bool $fail_on_error Fail on error
     * @return $this
     */
    public function setFailOnError($fail_on_error)
    {
        $this->container['fail_on_error'] = $fail_on_error;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     * @param  integer $offset Offset
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     * @param  integer $offset Offset
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     * @param  integer $offset Offset
     * @param  mixed   $value  Value to be set
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     * @param  integer $offset Offset
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(\MuhimbiPDFOnline\Client\ObjectSerializer::sanitizeForSerialization($this), JSON_PRETTY_PRINT);
        }

        return json_encode(\MuhimbiPDFOnline\Client\ObjectSerializer::sanitizeForSerialization($this));
    }
}


