<?php
/**
 * ConvertExcelData
 *
 * PHP version 5
 *
 * @category Class
 * @package  MuhimbiPDFOnline\Client
 * @author   Swaagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * Muhimbi PDF
 *
 * Convert, Merge, Watermark, Secure and OCR files.
 *
 * OpenAPI spec version: 9.16
 * Contact: support@muhimbi.com
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 *
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace MuhimbiPDFOnline\Client\Model;

use \ArrayAccess;

/**
 * ConvertExcelData Class Doc Comment
 *
 * @category    Class
 * @description Parameters for Convert Excel operation
 * @package     MuhimbiPDFOnline\Client
 * @author      Swagger Codegen team
 * @link        https://github.com/swagger-api/swagger-codegen
 */
class ConvertExcelData implements ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      * @var string
      */
    protected static $swaggerModelName = 'convert_excel_data';

    /**
      * Array of property to type mappings. Used for (de)serialization
      * @var string[]
      */
    protected static $swaggerTypes = [
        'use_async_pattern' => 'bool',
        'source_file_name' => 'string',
        'sharepoint_file' => '\MuhimbiPDFOnline\Client\Model\SharepointFile',
        'source_file_content' => 'string',
        'output_format' => 'string',
        'copy_metadata' => 'bool',
        'range' => 'string',
        'unhide_all_rows' => 'bool',
        'unhide_all_columns' => 'bool',
        'fit_to_pages_wide' => 'int',
        'fit_to_pages_tall' => 'int',
        'start_page' => 'int',
        'end_page' => 'int',
        'quality' => 'string',
        'override_settings' => 'string',
        'fail_on_error' => 'bool'
    ];

    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of attributes where the key is the local name, and the value is the original name
     * @var string[]
     */
    protected static $attributeMap = [
        'use_async_pattern' => 'use_async_pattern',
        'source_file_name' => 'source_file_name',
        'sharepoint_file' => 'sharepoint_file',
        'source_file_content' => 'source_file_content',
        'output_format' => 'output_format',
        'copy_metadata' => 'copy_metadata',
        'range' => 'range',
        'unhide_all_rows' => 'unhide_all_rows',
        'unhide_all_columns' => 'unhide_all_columns',
        'fit_to_pages_wide' => 'fit_to_pages_wide',
        'fit_to_pages_tall' => 'fit_to_pages_tall',
        'start_page' => 'start_page',
        'end_page' => 'end_page',
        'quality' => 'quality',
        'override_settings' => 'override_settings',
        'fail_on_error' => 'fail_on_error'
    ];


    /**
     * Array of attributes to setter functions (for deserialization of responses)
     * @var string[]
     */
    protected static $setters = [
        'use_async_pattern' => 'setUseAsyncPattern',
        'source_file_name' => 'setSourceFileName',
        'sharepoint_file' => 'setSharepointFile',
        'source_file_content' => 'setSourceFileContent',
        'output_format' => 'setOutputFormat',
        'copy_metadata' => 'setCopyMetadata',
        'range' => 'setRange',
        'unhide_all_rows' => 'setUnhideAllRows',
        'unhide_all_columns' => 'setUnhideAllColumns',
        'fit_to_pages_wide' => 'setFitToPagesWide',
        'fit_to_pages_tall' => 'setFitToPagesTall',
        'start_page' => 'setStartPage',
        'end_page' => 'setEndPage',
        'quality' => 'setQuality',
        'override_settings' => 'setOverrideSettings',
        'fail_on_error' => 'setFailOnError'
    ];


    /**
     * Array of attributes to getter functions (for serialization of requests)
     * @var string[]
     */
    protected static $getters = [
        'use_async_pattern' => 'getUseAsyncPattern',
        'source_file_name' => 'getSourceFileName',
        'sharepoint_file' => 'getSharepointFile',
        'source_file_content' => 'getSourceFileContent',
        'output_format' => 'getOutputFormat',
        'copy_metadata' => 'getCopyMetadata',
        'range' => 'getRange',
        'unhide_all_rows' => 'getUnhideAllRows',
        'unhide_all_columns' => 'getUnhideAllColumns',
        'fit_to_pages_wide' => 'getFitToPagesWide',
        'fit_to_pages_tall' => 'getFitToPagesTall',
        'start_page' => 'getStartPage',
        'end_page' => 'getEndPage',
        'quality' => 'getQuality',
        'override_settings' => 'getOverrideSettings',
        'fail_on_error' => 'getFailOnError'
    ];

    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    public static function setters()
    {
        return self::$setters;
    }

    public static function getters()
    {
        return self::$getters;
    }

    const OUTPUT_FORMAT_PDF = 'PDF';
    const OUTPUT_FORMAT_XPS = 'XPS';
    const OUTPUT_FORMAT_DOCX = 'DOCX';
    const OUTPUT_FORMAT_DOC = 'DOC';
    const OUTPUT_FORMAT_ODT = 'ODT';
    const OUTPUT_FORMAT_RTF = 'RTF';
    const OUTPUT_FORMAT_TXT = 'TXT';
    const OUTPUT_FORMAT_MHT = 'MHT';
    const OUTPUT_FORMAT_HTML = 'HTML';
    const OUTPUT_FORMAT_XML = 'XML';
    const OUTPUT_FORMAT_XLS = 'XLS';
    const OUTPUT_FORMAT_XLSX = 'XLSX';
    const OUTPUT_FORMAT_CSV = 'CSV';
    const OUTPUT_FORMAT_ODS = 'ODS';
    const RANGE_VISIBLE_DOCUMENTS = 'VisibleDocuments';
    const RANGE_ALL_DOCUMENTS = 'AllDocuments';
    const RANGE_ACTIVE_DOCUMENTS = 'ActiveDocuments';
    const QUALITY_OPTIMIZE_FOR_PRINT = 'OptimizeForPrint';
    const QUALITY_OPTIMIZE_FOR_ON_SCREEN = 'OptimizeForOnScreen';
    const QUALITY_ORIGINAL = 'Original';
    

    
    /**
     * Gets allowable values of the enum
     * @return string[]
     */
    public function getOutputFormatAllowableValues()
    {
        return [
            self::OUTPUT_FORMAT_PDF,
            self::OUTPUT_FORMAT_XPS,
            self::OUTPUT_FORMAT_DOCX,
            self::OUTPUT_FORMAT_DOC,
            self::OUTPUT_FORMAT_ODT,
            self::OUTPUT_FORMAT_RTF,
            self::OUTPUT_FORMAT_TXT,
            self::OUTPUT_FORMAT_MHT,
            self::OUTPUT_FORMAT_HTML,
            self::OUTPUT_FORMAT_XML,
            self::OUTPUT_FORMAT_XLS,
            self::OUTPUT_FORMAT_XLSX,
            self::OUTPUT_FORMAT_CSV,
            self::OUTPUT_FORMAT_ODS,
        ];
    }
    
    /**
     * Gets allowable values of the enum
     * @return string[]
     */
    public function getRangeAllowableValues()
    {
        return [
            self::RANGE_VISIBLE_DOCUMENTS,
            self::RANGE_ALL_DOCUMENTS,
            self::RANGE_ACTIVE_DOCUMENTS,
        ];
    }
    
    /**
     * Gets allowable values of the enum
     * @return string[]
     */
    public function getQualityAllowableValues()
    {
        return [
            self::QUALITY_OPTIMIZE_FOR_PRINT,
            self::QUALITY_OPTIMIZE_FOR_ON_SCREEN,
            self::QUALITY_ORIGINAL,
        ];
    }
    

    /**
     * Associative array for storing property values
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     * @param mixed[] $data Associated array of property values initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['use_async_pattern'] = isset($data['use_async_pattern']) ? $data['use_async_pattern'] : false;
        $this->container['source_file_name'] = isset($data['source_file_name']) ? $data['source_file_name'] : null;
        $this->container['sharepoint_file'] = isset($data['sharepoint_file']) ? $data['sharepoint_file'] : null;
        $this->container['source_file_content'] = isset($data['source_file_content']) ? $data['source_file_content'] : null;
        $this->container['output_format'] = isset($data['output_format']) ? $data['output_format'] : 'PDF';
        $this->container['copy_metadata'] = isset($data['copy_metadata']) ? $data['copy_metadata'] : false;
        $this->container['range'] = isset($data['range']) ? $data['range'] : null;
        $this->container['unhide_all_rows'] = isset($data['unhide_all_rows']) ? $data['unhide_all_rows'] : false;
        $this->container['unhide_all_columns'] = isset($data['unhide_all_columns']) ? $data['unhide_all_columns'] : false;
        $this->container['fit_to_pages_wide'] = isset($data['fit_to_pages_wide']) ? $data['fit_to_pages_wide'] : null;
        $this->container['fit_to_pages_tall'] = isset($data['fit_to_pages_tall']) ? $data['fit_to_pages_tall'] : null;
        $this->container['start_page'] = isset($data['start_page']) ? $data['start_page'] : null;
        $this->container['end_page'] = isset($data['end_page']) ? $data['end_page'] : null;
        $this->container['quality'] = isset($data['quality']) ? $data['quality'] : null;
        $this->container['override_settings'] = isset($data['override_settings']) ? $data['override_settings'] : null;
        $this->container['fail_on_error'] = isset($data['fail_on_error']) ? $data['fail_on_error'] : true;
    }

    /**
     * show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalid_properties = [];

        if ($this->container['use_async_pattern'] === null) {
            $invalid_properties[] = "'use_async_pattern' can't be null";
        }
        if ($this->container['source_file_name'] === null) {
            $invalid_properties[] = "'source_file_name' can't be null";
        }
        if ($this->container['source_file_content'] === null) {
            $invalid_properties[] = "'source_file_content' can't be null";
        }
        if ($this->container['output_format'] === null) {
            $invalid_properties[] = "'output_format' can't be null";
        }
        $allowed_values = ["PDF", "XPS", "DOCX", "DOC", "ODT", "RTF", "TXT", "MHT", "HTML", "XML", "XLS", "XLSX", "CSV", "ODS"];
        if (!in_array($this->container['output_format'], $allowed_values)) {
            $invalid_properties[] = "invalid value for 'output_format', must be one of 'PDF', 'XPS', 'DOCX', 'DOC', 'ODT', 'RTF', 'TXT', 'MHT', 'HTML', 'XML', 'XLS', 'XLSX', 'CSV', 'ODS'.";
        }

        if ($this->container['copy_metadata'] === null) {
            $invalid_properties[] = "'copy_metadata' can't be null";
        }
        $allowed_values = ["VisibleDocuments", "AllDocuments", "ActiveDocuments"];
        if (!in_array($this->container['range'], $allowed_values)) {
            $invalid_properties[] = "invalid value for 'range', must be one of 'VisibleDocuments', 'AllDocuments', 'ActiveDocuments'.";
        }

        $allowed_values = ["OptimizeForPrint", "OptimizeForOnScreen", "Original"];
        if (!in_array($this->container['quality'], $allowed_values)) {
            $invalid_properties[] = "invalid value for 'quality', must be one of 'OptimizeForPrint', 'OptimizeForOnScreen', 'Original'.";
        }

        return $invalid_properties;
    }

    /**
     * validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {

        if ($this->container['use_async_pattern'] === null) {
            return false;
        }
        if ($this->container['source_file_name'] === null) {
            return false;
        }
        if ($this->container['source_file_content'] === null) {
            return false;
        }
        if ($this->container['output_format'] === null) {
            return false;
        }
        $allowed_values = ["PDF", "XPS", "DOCX", "DOC", "ODT", "RTF", "TXT", "MHT", "HTML", "XML", "XLS", "XLSX", "CSV", "ODS"];
        if (!in_array($this->container['output_format'], $allowed_values)) {
            return false;
        }
        if ($this->container['copy_metadata'] === null) {
            return false;
        }
        $allowed_values = ["VisibleDocuments", "AllDocuments", "ActiveDocuments"];
        if (!in_array($this->container['range'], $allowed_values)) {
            return false;
        }
        $allowed_values = ["OptimizeForPrint", "OptimizeForOnScreen", "Original"];
        if (!in_array($this->container['quality'], $allowed_values)) {
            return false;
        }
        return true;
    }


    /**
     * Gets use_async_pattern
     * @return bool
     */
    public function getUseAsyncPattern()
    {
        return $this->container['use_async_pattern'];
    }

    /**
     * Sets use_async_pattern
     * @param bool $use_async_pattern Use async behaviour for API request
     * @return $this
     */
    public function setUseAsyncPattern($use_async_pattern)
    {
        $this->container['use_async_pattern'] = $use_async_pattern;

        return $this;
    }

    /**
     * Gets source_file_name
     * @return string
     */
    public function getSourceFileName()
    {
        return $this->container['source_file_name'];
    }

    /**
     * Sets source_file_name
     * @param string $source_file_name Name of the source file including extension
     * @return $this
     */
    public function setSourceFileName($source_file_name)
    {
        $this->container['source_file_name'] = $source_file_name;

        return $this;
    }

    /**
     * Gets sharepoint_file
     * @return \MuhimbiPDFOnline\Client\Model\SharepointFile
     */
    public function getSharepointFile()
    {
        return $this->container['sharepoint_file'];
    }

    /**
     * Sets sharepoint_file
     * @param \MuhimbiPDFOnline\Client\Model\SharepointFile $sharepoint_file
     * @return $this
     */
    public function setSharepointFile($sharepoint_file)
    {
        $this->container['sharepoint_file'] = $sharepoint_file;

        return $this;
    }

    /**
     * Gets source_file_content
     * @return string
     */
    public function getSourceFileContent()
    {
        return $this->container['source_file_content'];
    }

    /**
     * Sets source_file_content
     * @param string $source_file_content Content of the file to convert
     * @return $this
     */
    public function setSourceFileContent($source_file_content)
    {
        $this->container['source_file_content'] = $source_file_content;

        return $this;
    }

    /**
     * Gets output_format
     * @return string
     */
    public function getOutputFormat()
    {
        return $this->container['output_format'];
    }

    /**
     * Sets output_format
     * @param string $output_format Output format
     * @return $this
     */
    public function setOutputFormat($output_format)
    {
        $allowed_values = array('PDF', 'XPS', 'DOCX', 'DOC', 'ODT', 'RTF', 'TXT', 'MHT', 'HTML', 'XML', 'XLS', 'XLSX', 'CSV', 'ODS');
        if ((!in_array($output_format, $allowed_values))) {
            throw new \InvalidArgumentException("Invalid value for 'output_format', must be one of 'PDF', 'XPS', 'DOCX', 'DOC', 'ODT', 'RTF', 'TXT', 'MHT', 'HTML', 'XML', 'XLS', 'XLSX', 'CSV', 'ODS'");
        }
        $this->container['output_format'] = $output_format;

        return $this;
    }

    /**
     * Gets copy_metadata
     * @return bool
     */
    public function getCopyMetadata()
    {
        return $this->container['copy_metadata'];
    }

    /**
     * Sets copy_metadata
     * @param bool $copy_metadata Copy metadata (Only for SharePoint operations)
     * @return $this
     */
    public function setCopyMetadata($copy_metadata)
    {
        $this->container['copy_metadata'] = $copy_metadata;

        return $this;
    }

    /**
     * Gets range
     * @return string
     */
    public function getRange()
    {
        return $this->container['range'];
    }

    /**
     * Sets range
     * @param string $range Specify which parts of the document to process
     * @return $this
     */
    public function setRange($range)
    {
        $allowed_values = array('VisibleDocuments', 'AllDocuments', 'ActiveDocuments');
        if (!is_null($range) && (!in_array($range, $allowed_values))) {
            throw new \InvalidArgumentException("Invalid value for 'range', must be one of 'VisibleDocuments', 'AllDocuments', 'ActiveDocuments'");
        }
        $this->container['range'] = $range;

        return $this;
    }

    /**
     * Gets unhide_all_rows
     * @return bool
     */
    public function getUnhideAllRows()
    {
        return $this->container['unhide_all_rows'];
    }

    /**
     * Sets unhide_all_rows
     * @param bool $unhide_all_rows Specify whether you would like hidden rows to be revealed
     * @return $this
     */
    public function setUnhideAllRows($unhide_all_rows)
    {
        $this->container['unhide_all_rows'] = $unhide_all_rows;

        return $this;
    }

    /**
     * Gets unhide_all_columns
     * @return bool
     */
    public function getUnhideAllColumns()
    {
        return $this->container['unhide_all_columns'];
    }

    /**
     * Sets unhide_all_columns
     * @param bool $unhide_all_columns Specify whether you would like hidden columns to be revealed
     * @return $this
     */
    public function setUnhideAllColumns($unhide_all_columns)
    {
        $this->container['unhide_all_columns'] = $unhide_all_columns;

        return $this;
    }

    /**
     * Gets fit_to_pages_wide
     * @return int
     */
    public function getFitToPagesWide()
    {
        return $this->container['fit_to_pages_wide'];
    }

    /**
     * Sets fit_to_pages_wide
     * @param int $fit_to_pages_wide Fit all columns onto this number of pages
     * @return $this
     */
    public function setFitToPagesWide($fit_to_pages_wide)
    {
        $this->container['fit_to_pages_wide'] = $fit_to_pages_wide;

        return $this;
    }

    /**
     * Gets fit_to_pages_tall
     * @return int
     */
    public function getFitToPagesTall()
    {
        return $this->container['fit_to_pages_tall'];
    }

    /**
     * Sets fit_to_pages_tall
     * @param int $fit_to_pages_tall Fit all rows onto this number of pages
     * @return $this
     */
    public function setFitToPagesTall($fit_to_pages_tall)
    {
        $this->container['fit_to_pages_tall'] = $fit_to_pages_tall;

        return $this;
    }

    /**
     * Gets start_page
     * @return int
     */
    public function getStartPage()
    {
        return $this->container['start_page'];
    }

    /**
     * Sets start_page
     * @param int $start_page The first page to include
     * @return $this
     */
    public function setStartPage($start_page)
    {
        $this->container['start_page'] = $start_page;

        return $this;
    }

    /**
     * Gets end_page
     * @return int
     */
    public function getEndPage()
    {
        return $this->container['end_page'];
    }

    /**
     * Sets end_page
     * @param int $end_page The last page to include
     * @return $this
     */
    public function setEndPage($end_page)
    {
        $this->container['end_page'] = $end_page;

        return $this;
    }

    /**
     * Gets quality
     * @return string
     */
    public function getQuality()
    {
        return $this->container['quality'];
    }

    /**
     * Sets quality
     * @param string $quality Quality of the output file
     * @return $this
     */
    public function setQuality($quality)
    {
        $allowed_values = array('OptimizeForPrint', 'OptimizeForOnScreen', 'Original');
        if (!is_null($quality) && (!in_array($quality, $allowed_values))) {
            throw new \InvalidArgumentException("Invalid value for 'quality', must be one of 'OptimizeForPrint', 'OptimizeForOnScreen', 'Original'");
        }
        $this->container['quality'] = $quality;

        return $this;
    }

    /**
     * Gets override_settings
     * @return string
     */
    public function getOverrideSettings()
    {
        return $this->container['override_settings'];
    }

    /**
     * Sets override_settings
     * @param string $override_settings Optional settings using Muhimbi's XML syntax
     * @return $this
     */
    public function setOverrideSettings($override_settings)
    {
        $this->container['override_settings'] = $override_settings;

        return $this;
    }

    /**
     * Gets fail_on_error
     * @return bool
     */
    public function getFailOnError()
    {
        return $this->container['fail_on_error'];
    }

    /**
     * Sets fail_on_error
     * @param bool $fail_on_error Fail on error
     * @return $this
     */
    public function setFailOnError($fail_on_error)
    {
        $this->container['fail_on_error'] = $fail_on_error;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     * @param  integer $offset Offset
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     * @param  integer $offset Offset
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     * @param  integer $offset Offset
     * @param  mixed   $value  Value to be set
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     * @param  integer $offset Offset
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(\MuhimbiPDFOnline\Client\ObjectSerializer::sanitizeForSerialization($this), JSON_PRETTY_PRINT);
        }

        return json_encode(\MuhimbiPDFOnline\Client\ObjectSerializer::sanitizeForSerialization($this));
    }
}


