<?php
/**
 * ConvertInfopathData
 *
 * PHP version 5
 *
 * @category Class
 * @package  MuhimbiPDFOnline\Client
 * @author   Swaagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * Muhimbi PDF
 *
 * Convert, Merge, Watermark, Secure and OCR files.
 *
 * OpenAPI spec version: 9.16
 * Contact: support@muhimbi.com
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 *
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace MuhimbiPDFOnline\Client\Model;

use \ArrayAccess;

/**
 * ConvertInfopathData Class Doc Comment
 *
 * @category    Class
 * @description Parameters for Convert Infopath operation
 * @package     MuhimbiPDFOnline\Client
 * @author      Swagger Codegen team
 * @link        https://github.com/swagger-api/swagger-codegen
 */
class ConvertInfopathData implements ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      * @var string
      */
    protected static $swaggerModelName = 'convert_infopath_data';

    /**
      * Array of property to type mappings. Used for (de)serialization
      * @var string[]
      */
    protected static $swaggerTypes = [
        'use_async_pattern' => 'bool',
        'source_file_name' => 'string',
        'sharepoint_file' => '\MuhimbiPDFOnline\Client\Model\SharepointFile',
        'source_file_content' => 'string',
        'output_format' => 'string',
        'copy_metadata' => 'bool',
        'template_file_content' => 'string',
        'views_to_convert' => 'string',
        'convert_attachments' => 'bool',
        'attachment_merge_mode' => 'string',
        'unsupported_attachment_behaviour' => 'string',
        'break_merge_on_error' => 'bool',
        'include_attachment_types' => 'string',
        'exclude_attachment_types' => 'string',
        'default_paper_size' => 'string',
        'default_paper_size_custom' => 'string',
        'force_paper_size' => 'string',
        'force_paper_size_custom' => 'string',
        'default_page_orientation' => 'string',
        'force_page_orientation' => 'string',
        'start_page' => 'int',
        'end_page' => 'int',
        'quality' => 'string',
        'override_settings' => 'string',
        'fail_on_error' => 'bool'
    ];

    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of attributes where the key is the local name, and the value is the original name
     * @var string[]
     */
    protected static $attributeMap = [
        'use_async_pattern' => 'use_async_pattern',
        'source_file_name' => 'source_file_name',
        'sharepoint_file' => 'sharepoint_file',
        'source_file_content' => 'source_file_content',
        'output_format' => 'output_format',
        'copy_metadata' => 'copy_metadata',
        'template_file_content' => 'template_file_content',
        'views_to_convert' => 'views_to_convert',
        'convert_attachments' => 'convert_attachments',
        'attachment_merge_mode' => 'attachment_merge_mode',
        'unsupported_attachment_behaviour' => 'unsupported_attachment_behaviour',
        'break_merge_on_error' => 'break_merge_on_error',
        'include_attachment_types' => 'include_attachment_types',
        'exclude_attachment_types' => 'exclude_attachment_types',
        'default_paper_size' => 'default_paper_size',
        'default_paper_size_custom' => 'default_paper_size_custom',
        'force_paper_size' => 'force_paper_size',
        'force_paper_size_custom' => 'force_paper_size_custom',
        'default_page_orientation' => 'default_page_orientation',
        'force_page_orientation' => 'force_page_orientation',
        'start_page' => 'start_page',
        'end_page' => 'end_page',
        'quality' => 'quality',
        'override_settings' => 'override_settings',
        'fail_on_error' => 'fail_on_error'
    ];


    /**
     * Array of attributes to setter functions (for deserialization of responses)
     * @var string[]
     */
    protected static $setters = [
        'use_async_pattern' => 'setUseAsyncPattern',
        'source_file_name' => 'setSourceFileName',
        'sharepoint_file' => 'setSharepointFile',
        'source_file_content' => 'setSourceFileContent',
        'output_format' => 'setOutputFormat',
        'copy_metadata' => 'setCopyMetadata',
        'template_file_content' => 'setTemplateFileContent',
        'views_to_convert' => 'setViewsToConvert',
        'convert_attachments' => 'setConvertAttachments',
        'attachment_merge_mode' => 'setAttachmentMergeMode',
        'unsupported_attachment_behaviour' => 'setUnsupportedAttachmentBehaviour',
        'break_merge_on_error' => 'setBreakMergeOnError',
        'include_attachment_types' => 'setIncludeAttachmentTypes',
        'exclude_attachment_types' => 'setExcludeAttachmentTypes',
        'default_paper_size' => 'setDefaultPaperSize',
        'default_paper_size_custom' => 'setDefaultPaperSizeCustom',
        'force_paper_size' => 'setForcePaperSize',
        'force_paper_size_custom' => 'setForcePaperSizeCustom',
        'default_page_orientation' => 'setDefaultPageOrientation',
        'force_page_orientation' => 'setForcePageOrientation',
        'start_page' => 'setStartPage',
        'end_page' => 'setEndPage',
        'quality' => 'setQuality',
        'override_settings' => 'setOverrideSettings',
        'fail_on_error' => 'setFailOnError'
    ];


    /**
     * Array of attributes to getter functions (for serialization of requests)
     * @var string[]
     */
    protected static $getters = [
        'use_async_pattern' => 'getUseAsyncPattern',
        'source_file_name' => 'getSourceFileName',
        'sharepoint_file' => 'getSharepointFile',
        'source_file_content' => 'getSourceFileContent',
        'output_format' => 'getOutputFormat',
        'copy_metadata' => 'getCopyMetadata',
        'template_file_content' => 'getTemplateFileContent',
        'views_to_convert' => 'getViewsToConvert',
        'convert_attachments' => 'getConvertAttachments',
        'attachment_merge_mode' => 'getAttachmentMergeMode',
        'unsupported_attachment_behaviour' => 'getUnsupportedAttachmentBehaviour',
        'break_merge_on_error' => 'getBreakMergeOnError',
        'include_attachment_types' => 'getIncludeAttachmentTypes',
        'exclude_attachment_types' => 'getExcludeAttachmentTypes',
        'default_paper_size' => 'getDefaultPaperSize',
        'default_paper_size_custom' => 'getDefaultPaperSizeCustom',
        'force_paper_size' => 'getForcePaperSize',
        'force_paper_size_custom' => 'getForcePaperSizeCustom',
        'default_page_orientation' => 'getDefaultPageOrientation',
        'force_page_orientation' => 'getForcePageOrientation',
        'start_page' => 'getStartPage',
        'end_page' => 'getEndPage',
        'quality' => 'getQuality',
        'override_settings' => 'getOverrideSettings',
        'fail_on_error' => 'getFailOnError'
    ];

    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    public static function setters()
    {
        return self::$setters;
    }

    public static function getters()
    {
        return self::$getters;
    }

    const OUTPUT_FORMAT_PDF = 'PDF';
    const OUTPUT_FORMAT_XPS = 'XPS';
    const OUTPUT_FORMAT_DOCX = 'DOCX';
    const OUTPUT_FORMAT_DOC = 'DOC';
    const OUTPUT_FORMAT_ODT = 'ODT';
    const OUTPUT_FORMAT_RTF = 'RTF';
    const OUTPUT_FORMAT_TXT = 'TXT';
    const OUTPUT_FORMAT_MHT = 'MHT';
    const OUTPUT_FORMAT_HTML = 'HTML';
    const OUTPUT_FORMAT_XML = 'XML';
    const OUTPUT_FORMAT_XLS = 'XLS';
    const OUTPUT_FORMAT_XLSX = 'XLSX';
    const OUTPUT_FORMAT_CSV = 'CSV';
    const OUTPUT_FORMAT_ODS = 'ODS';
    const ATTACHMENT_MERGE_MODE_DEFAULT = 'Default';
    const ATTACHMENT_MERGE_MODE_MERGE = 'Merge';
    const ATTACHMENT_MERGE_MODE_ATTACH_AS_PDF = 'AttachAsPDF';
    const ATTACHMENT_MERGE_MODE_ATTACH_ORIGINAL = 'AttachOriginal';
    const UNSUPPORTED_ATTACHMENT_BEHAVIOUR_ERROR = 'Error';
    const UNSUPPORTED_ATTACHMENT_BEHAVIOUR_REMOVE = 'Remove';
    const UNSUPPORTED_ATTACHMENT_BEHAVIOUR_ATTACH_ORIGINAL = 'AttachOriginal';
    const DEFAULT_PAPER_SIZE_A3 = 'A3';
    const DEFAULT_PAPER_SIZE_A4 = 'A4';
    const DEFAULT_PAPER_SIZE_A5 = 'A5';
    const DEFAULT_PAPER_SIZE_LEGAL = 'Legal';
    const DEFAULT_PAPER_SIZE_LETTER = 'Letter';
    const DEFAULT_PAPER_SIZE_CUSTOM = 'Custom';
    const FORCE_PAPER_SIZE_A3 = 'A3';
    const FORCE_PAPER_SIZE_A4 = 'A4';
    const FORCE_PAPER_SIZE_A5 = 'A5';
    const FORCE_PAPER_SIZE_LEGAL = 'Legal';
    const FORCE_PAPER_SIZE_LETTER = 'Letter';
    const FORCE_PAPER_SIZE_CUSTOM = 'Custom';
    const DEFAULT_PAGE_ORIENTATION_DEFAULT = 'Default';
    const DEFAULT_PAGE_ORIENTATION_PORTRAIT = 'Portrait';
    const DEFAULT_PAGE_ORIENTATION_LANDSCAPE = 'Landscape';
    const DEFAULT_PAGE_ORIENTATION_BOTH = 'Both';
    const FORCE_PAGE_ORIENTATION_DEFAULT = 'Default';
    const FORCE_PAGE_ORIENTATION_PORTRAIT = 'Portrait';
    const FORCE_PAGE_ORIENTATION_LANDSCAPE = 'Landscape';
    const FORCE_PAGE_ORIENTATION_BOTH = 'Both';
    const QUALITY_OPTIMIZE_FOR_PRINT = 'OptimizeForPrint';
    const QUALITY_OPTIMIZE_FOR_ON_SCREEN = 'OptimizeForOnScreen';
    const QUALITY_ORIGINAL = 'Original';
    

    
    /**
     * Gets allowable values of the enum
     * @return string[]
     */
    public function getOutputFormatAllowableValues()
    {
        return [
            self::OUTPUT_FORMAT_PDF,
            self::OUTPUT_FORMAT_XPS,
            self::OUTPUT_FORMAT_DOCX,
            self::OUTPUT_FORMAT_DOC,
            self::OUTPUT_FORMAT_ODT,
            self::OUTPUT_FORMAT_RTF,
            self::OUTPUT_FORMAT_TXT,
            self::OUTPUT_FORMAT_MHT,
            self::OUTPUT_FORMAT_HTML,
            self::OUTPUT_FORMAT_XML,
            self::OUTPUT_FORMAT_XLS,
            self::OUTPUT_FORMAT_XLSX,
            self::OUTPUT_FORMAT_CSV,
            self::OUTPUT_FORMAT_ODS,
        ];
    }
    
    /**
     * Gets allowable values of the enum
     * @return string[]
     */
    public function getAttachmentMergeModeAllowableValues()
    {
        return [
            self::ATTACHMENT_MERGE_MODE_DEFAULT,
            self::ATTACHMENT_MERGE_MODE_MERGE,
            self::ATTACHMENT_MERGE_MODE_ATTACH_AS_PDF,
            self::ATTACHMENT_MERGE_MODE_ATTACH_ORIGINAL,
        ];
    }
    
    /**
     * Gets allowable values of the enum
     * @return string[]
     */
    public function getUnsupportedAttachmentBehaviourAllowableValues()
    {
        return [
            self::UNSUPPORTED_ATTACHMENT_BEHAVIOUR_ERROR,
            self::UNSUPPORTED_ATTACHMENT_BEHAVIOUR_REMOVE,
            self::UNSUPPORTED_ATTACHMENT_BEHAVIOUR_ATTACH_ORIGINAL,
        ];
    }
    
    /**
     * Gets allowable values of the enum
     * @return string[]
     */
    public function getDefaultPaperSizeAllowableValues()
    {
        return [
            self::DEFAULT_PAPER_SIZE_A3,
            self::DEFAULT_PAPER_SIZE_A4,
            self::DEFAULT_PAPER_SIZE_A5,
            self::DEFAULT_PAPER_SIZE_LEGAL,
            self::DEFAULT_PAPER_SIZE_LETTER,
            self::DEFAULT_PAPER_SIZE_CUSTOM,
        ];
    }
    
    /**
     * Gets allowable values of the enum
     * @return string[]
     */
    public function getForcePaperSizeAllowableValues()
    {
        return [
            self::FORCE_PAPER_SIZE_A3,
            self::FORCE_PAPER_SIZE_A4,
            self::FORCE_PAPER_SIZE_A5,
            self::FORCE_PAPER_SIZE_LEGAL,
            self::FORCE_PAPER_SIZE_LETTER,
            self::FORCE_PAPER_SIZE_CUSTOM,
        ];
    }
    
    /**
     * Gets allowable values of the enum
     * @return string[]
     */
    public function getDefaultPageOrientationAllowableValues()
    {
        return [
            self::DEFAULT_PAGE_ORIENTATION_DEFAULT,
            self::DEFAULT_PAGE_ORIENTATION_PORTRAIT,
            self::DEFAULT_PAGE_ORIENTATION_LANDSCAPE,
            self::DEFAULT_PAGE_ORIENTATION_BOTH,
        ];
    }
    
    /**
     * Gets allowable values of the enum
     * @return string[]
     */
    public function getForcePageOrientationAllowableValues()
    {
        return [
            self::FORCE_PAGE_ORIENTATION_DEFAULT,
            self::FORCE_PAGE_ORIENTATION_PORTRAIT,
            self::FORCE_PAGE_ORIENTATION_LANDSCAPE,
            self::FORCE_PAGE_ORIENTATION_BOTH,
        ];
    }
    
    /**
     * Gets allowable values of the enum
     * @return string[]
     */
    public function getQualityAllowableValues()
    {
        return [
            self::QUALITY_OPTIMIZE_FOR_PRINT,
            self::QUALITY_OPTIMIZE_FOR_ON_SCREEN,
            self::QUALITY_ORIGINAL,
        ];
    }
    

    /**
     * Associative array for storing property values
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     * @param mixed[] $data Associated array of property values initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['use_async_pattern'] = isset($data['use_async_pattern']) ? $data['use_async_pattern'] : false;
        $this->container['source_file_name'] = isset($data['source_file_name']) ? $data['source_file_name'] : null;
        $this->container['sharepoint_file'] = isset($data['sharepoint_file']) ? $data['sharepoint_file'] : null;
        $this->container['source_file_content'] = isset($data['source_file_content']) ? $data['source_file_content'] : null;
        $this->container['output_format'] = isset($data['output_format']) ? $data['output_format'] : 'PDF';
        $this->container['copy_metadata'] = isset($data['copy_metadata']) ? $data['copy_metadata'] : false;
        $this->container['template_file_content'] = isset($data['template_file_content']) ? $data['template_file_content'] : null;
        $this->container['views_to_convert'] = isset($data['views_to_convert']) ? $data['views_to_convert'] : null;
        $this->container['convert_attachments'] = isset($data['convert_attachments']) ? $data['convert_attachments'] : true;
        $this->container['attachment_merge_mode'] = isset($data['attachment_merge_mode']) ? $data['attachment_merge_mode'] : null;
        $this->container['unsupported_attachment_behaviour'] = isset($data['unsupported_attachment_behaviour']) ? $data['unsupported_attachment_behaviour'] : null;
        $this->container['break_merge_on_error'] = isset($data['break_merge_on_error']) ? $data['break_merge_on_error'] : null;
        $this->container['include_attachment_types'] = isset($data['include_attachment_types']) ? $data['include_attachment_types'] : null;
        $this->container['exclude_attachment_types'] = isset($data['exclude_attachment_types']) ? $data['exclude_attachment_types'] : null;
        $this->container['default_paper_size'] = isset($data['default_paper_size']) ? $data['default_paper_size'] : null;
        $this->container['default_paper_size_custom'] = isset($data['default_paper_size_custom']) ? $data['default_paper_size_custom'] : null;
        $this->container['force_paper_size'] = isset($data['force_paper_size']) ? $data['force_paper_size'] : null;
        $this->container['force_paper_size_custom'] = isset($data['force_paper_size_custom']) ? $data['force_paper_size_custom'] : null;
        $this->container['default_page_orientation'] = isset($data['default_page_orientation']) ? $data['default_page_orientation'] : 'Default';
        $this->container['force_page_orientation'] = isset($data['force_page_orientation']) ? $data['force_page_orientation'] : null;
        $this->container['start_page'] = isset($data['start_page']) ? $data['start_page'] : null;
        $this->container['end_page'] = isset($data['end_page']) ? $data['end_page'] : null;
        $this->container['quality'] = isset($data['quality']) ? $data['quality'] : null;
        $this->container['override_settings'] = isset($data['override_settings']) ? $data['override_settings'] : null;
        $this->container['fail_on_error'] = isset($data['fail_on_error']) ? $data['fail_on_error'] : true;
    }

    /**
     * show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalid_properties = [];

        if ($this->container['use_async_pattern'] === null) {
            $invalid_properties[] = "'use_async_pattern' can't be null";
        }
        if ($this->container['source_file_name'] === null) {
            $invalid_properties[] = "'source_file_name' can't be null";
        }
        if ($this->container['source_file_content'] === null) {
            $invalid_properties[] = "'source_file_content' can't be null";
        }
        if ($this->container['output_format'] === null) {
            $invalid_properties[] = "'output_format' can't be null";
        }
        $allowed_values = ["PDF", "XPS", "DOCX", "DOC", "ODT", "RTF", "TXT", "MHT", "HTML", "XML", "XLS", "XLSX", "CSV", "ODS"];
        if (!in_array($this->container['output_format'], $allowed_values)) {
            $invalid_properties[] = "invalid value for 'output_format', must be one of 'PDF', 'XPS', 'DOCX', 'DOC', 'ODT', 'RTF', 'TXT', 'MHT', 'HTML', 'XML', 'XLS', 'XLSX', 'CSV', 'ODS'.";
        }

        if ($this->container['copy_metadata'] === null) {
            $invalid_properties[] = "'copy_metadata' can't be null";
        }
        $allowed_values = ["Default", "Merge", "AttachAsPDF", "AttachOriginal"];
        if (!in_array($this->container['attachment_merge_mode'], $allowed_values)) {
            $invalid_properties[] = "invalid value for 'attachment_merge_mode', must be one of 'Default', 'Merge', 'AttachAsPDF', 'AttachOriginal'.";
        }

        $allowed_values = ["Error", "Remove", "AttachOriginal"];
        if (!in_array($this->container['unsupported_attachment_behaviour'], $allowed_values)) {
            $invalid_properties[] = "invalid value for 'unsupported_attachment_behaviour', must be one of 'Error', 'Remove', 'AttachOriginal'.";
        }

        $allowed_values = ["A3", "A4", "A5", "Legal", "Letter", "Custom"];
        if (!in_array($this->container['default_paper_size'], $allowed_values)) {
            $invalid_properties[] = "invalid value for 'default_paper_size', must be one of 'A3', 'A4', 'A5', 'Legal', 'Letter', 'Custom'.";
        }

        $allowed_values = ["A3", "A4", "A5", "Legal", "Letter", "Custom"];
        if (!in_array($this->container['force_paper_size'], $allowed_values)) {
            $invalid_properties[] = "invalid value for 'force_paper_size', must be one of 'A3', 'A4', 'A5', 'Legal', 'Letter', 'Custom'.";
        }

        $allowed_values = ["Default", "Portrait", "Landscape", "Both"];
        if (!in_array($this->container['default_page_orientation'], $allowed_values)) {
            $invalid_properties[] = "invalid value for 'default_page_orientation', must be one of 'Default', 'Portrait', 'Landscape', 'Both'.";
        }

        $allowed_values = ["Default", "Portrait", "Landscape", "Both"];
        if (!in_array($this->container['force_page_orientation'], $allowed_values)) {
            $invalid_properties[] = "invalid value for 'force_page_orientation', must be one of 'Default', 'Portrait', 'Landscape', 'Both'.";
        }

        $allowed_values = ["OptimizeForPrint", "OptimizeForOnScreen", "Original"];
        if (!in_array($this->container['quality'], $allowed_values)) {
            $invalid_properties[] = "invalid value for 'quality', must be one of 'OptimizeForPrint', 'OptimizeForOnScreen', 'Original'.";
        }

        return $invalid_properties;
    }

    /**
     * validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {

        if ($this->container['use_async_pattern'] === null) {
            return false;
        }
        if ($this->container['source_file_name'] === null) {
            return false;
        }
        if ($this->container['source_file_content'] === null) {
            return false;
        }
        if ($this->container['output_format'] === null) {
            return false;
        }
        $allowed_values = ["PDF", "XPS", "DOCX", "DOC", "ODT", "RTF", "TXT", "MHT", "HTML", "XML", "XLS", "XLSX", "CSV", "ODS"];
        if (!in_array($this->container['output_format'], $allowed_values)) {
            return false;
        }
        if ($this->container['copy_metadata'] === null) {
            return false;
        }
        $allowed_values = ["Default", "Merge", "AttachAsPDF", "AttachOriginal"];
        if (!in_array($this->container['attachment_merge_mode'], $allowed_values)) {
            return false;
        }
        $allowed_values = ["Error", "Remove", "AttachOriginal"];
        if (!in_array($this->container['unsupported_attachment_behaviour'], $allowed_values)) {
            return false;
        }
        $allowed_values = ["A3", "A4", "A5", "Legal", "Letter", "Custom"];
        if (!in_array($this->container['default_paper_size'], $allowed_values)) {
            return false;
        }
        $allowed_values = ["A3", "A4", "A5", "Legal", "Letter", "Custom"];
        if (!in_array($this->container['force_paper_size'], $allowed_values)) {
            return false;
        }
        $allowed_values = ["Default", "Portrait", "Landscape", "Both"];
        if (!in_array($this->container['default_page_orientation'], $allowed_values)) {
            return false;
        }
        $allowed_values = ["Default", "Portrait", "Landscape", "Both"];
        if (!in_array($this->container['force_page_orientation'], $allowed_values)) {
            return false;
        }
        $allowed_values = ["OptimizeForPrint", "OptimizeForOnScreen", "Original"];
        if (!in_array($this->container['quality'], $allowed_values)) {
            return false;
        }
        return true;
    }


    /**
     * Gets use_async_pattern
     * @return bool
     */
    public function getUseAsyncPattern()
    {
        return $this->container['use_async_pattern'];
    }

    /**
     * Sets use_async_pattern
     * @param bool $use_async_pattern Use async behaviour for API request
     * @return $this
     */
    public function setUseAsyncPattern($use_async_pattern)
    {
        $this->container['use_async_pattern'] = $use_async_pattern;

        return $this;
    }

    /**
     * Gets source_file_name
     * @return string
     */
    public function getSourceFileName()
    {
        return $this->container['source_file_name'];
    }

    /**
     * Sets source_file_name
     * @param string $source_file_name Name of the source file including extension
     * @return $this
     */
    public function setSourceFileName($source_file_name)
    {
        $this->container['source_file_name'] = $source_file_name;

        return $this;
    }

    /**
     * Gets sharepoint_file
     * @return \MuhimbiPDFOnline\Client\Model\SharepointFile
     */
    public function getSharepointFile()
    {
        return $this->container['sharepoint_file'];
    }

    /**
     * Sets sharepoint_file
     * @param \MuhimbiPDFOnline\Client\Model\SharepointFile $sharepoint_file
     * @return $this
     */
    public function setSharepointFile($sharepoint_file)
    {
        $this->container['sharepoint_file'] = $sharepoint_file;

        return $this;
    }

    /**
     * Gets source_file_content
     * @return string
     */
    public function getSourceFileContent()
    {
        return $this->container['source_file_content'];
    }

    /**
     * Sets source_file_content
     * @param string $source_file_content Content of the file to convert
     * @return $this
     */
    public function setSourceFileContent($source_file_content)
    {
        $this->container['source_file_content'] = $source_file_content;

        return $this;
    }

    /**
     * Gets output_format
     * @return string
     */
    public function getOutputFormat()
    {
        return $this->container['output_format'];
    }

    /**
     * Sets output_format
     * @param string $output_format Output format
     * @return $this
     */
    public function setOutputFormat($output_format)
    {
        $allowed_values = array('PDF', 'XPS', 'DOCX', 'DOC', 'ODT', 'RTF', 'TXT', 'MHT', 'HTML', 'XML', 'XLS', 'XLSX', 'CSV', 'ODS');
        if ((!in_array($output_format, $allowed_values))) {
            throw new \InvalidArgumentException("Invalid value for 'output_format', must be one of 'PDF', 'XPS', 'DOCX', 'DOC', 'ODT', 'RTF', 'TXT', 'MHT', 'HTML', 'XML', 'XLS', 'XLSX', 'CSV', 'ODS'");
        }
        $this->container['output_format'] = $output_format;

        return $this;
    }

    /**
     * Gets copy_metadata
     * @return bool
     */
    public function getCopyMetadata()
    {
        return $this->container['copy_metadata'];
    }

    /**
     * Sets copy_metadata
     * @param bool $copy_metadata Copy metadata (Only for SharePoint operations)
     * @return $this
     */
    public function setCopyMetadata($copy_metadata)
    {
        $this->container['copy_metadata'] = $copy_metadata;

        return $this;
    }

    /**
     * Gets template_file_content
     * @return string
     */
    public function getTemplateFileContent()
    {
        return $this->container['template_file_content'];
    }

    /**
     * Sets template_file_content
     * @param string $template_file_content Optional XSN file content
     * @return $this
     */
    public function setTemplateFileContent($template_file_content)
    {
        $this->container['template_file_content'] = $template_file_content;

        return $this;
    }

    /**
     * Gets views_to_convert
     * @return string
     */
    public function getViewsToConvert()
    {
        return $this->container['views_to_convert'];
    }

    /**
     * Sets views_to_convert
     * @param string $views_to_convert Comma separated list view names to convert
     * @return $this
     */
    public function setViewsToConvert($views_to_convert)
    {
        $this->container['views_to_convert'] = $views_to_convert;

        return $this;
    }

    /**
     * Gets convert_attachments
     * @return bool
     */
    public function getConvertAttachments()
    {
        return $this->container['convert_attachments'];
    }

    /**
     * Sets convert_attachments
     * @param bool $convert_attachments Include attachments
     * @return $this
     */
    public function setConvertAttachments($convert_attachments)
    {
        $this->container['convert_attachments'] = $convert_attachments;

        return $this;
    }

    /**
     * Gets attachment_merge_mode
     * @return string
     */
    public function getAttachmentMergeMode()
    {
        return $this->container['attachment_merge_mode'];
    }

    /**
     * Sets attachment_merge_mode
     * @param string $attachment_merge_mode What to do with attachments
     * @return $this
     */
    public function setAttachmentMergeMode($attachment_merge_mode)
    {
        $allowed_values = array('Default', 'Merge', 'AttachAsPDF', 'AttachOriginal');
        if (!is_null($attachment_merge_mode) && (!in_array($attachment_merge_mode, $allowed_values))) {
            throw new \InvalidArgumentException("Invalid value for 'attachment_merge_mode', must be one of 'Default', 'Merge', 'AttachAsPDF', 'AttachOriginal'");
        }
        $this->container['attachment_merge_mode'] = $attachment_merge_mode;

        return $this;
    }

    /**
     * Gets unsupported_attachment_behaviour
     * @return string
     */
    public function getUnsupportedAttachmentBehaviour()
    {
        return $this->container['unsupported_attachment_behaviour'];
    }

    /**
     * Sets unsupported_attachment_behaviour
     * @param string $unsupported_attachment_behaviour What to do with attachments which cannot be converted into PDF
     * @return $this
     */
    public function setUnsupportedAttachmentBehaviour($unsupported_attachment_behaviour)
    {
        $allowed_values = array('Error', 'Remove', 'AttachOriginal');
        if (!is_null($unsupported_attachment_behaviour) && (!in_array($unsupported_attachment_behaviour, $allowed_values))) {
            throw new \InvalidArgumentException("Invalid value for 'unsupported_attachment_behaviour', must be one of 'Error', 'Remove', 'AttachOriginal'");
        }
        $this->container['unsupported_attachment_behaviour'] = $unsupported_attachment_behaviour;

        return $this;
    }

    /**
     * Gets break_merge_on_error
     * @return bool
     */
    public function getBreakMergeOnError()
    {
        return $this->container['break_merge_on_error'];
    }

    /**
     * Sets break_merge_on_error
     * @param bool $break_merge_on_error Break conversion when processing of an individual part fails
     * @return $this
     */
    public function setBreakMergeOnError($break_merge_on_error)
    {
        $this->container['break_merge_on_error'] = $break_merge_on_error;

        return $this;
    }

    /**
     * Gets include_attachment_types
     * @return string
     */
    public function getIncludeAttachmentTypes()
    {
        return $this->container['include_attachment_types'];
    }

    /**
     * Sets include_attachment_types
     * @param string $include_attachment_types Comma separated values, e.g. *.txt, June???.docx
     * @return $this
     */
    public function setIncludeAttachmentTypes($include_attachment_types)
    {
        $this->container['include_attachment_types'] = $include_attachment_types;

        return $this;
    }

    /**
     * Gets exclude_attachment_types
     * @return string
     */
    public function getExcludeAttachmentTypes()
    {
        return $this->container['exclude_attachment_types'];
    }

    /**
     * Sets exclude_attachment_types
     * @param string $exclude_attachment_types Comma separated values, e.g. *.txt, June???.docx
     * @return $this
     */
    public function setExcludeAttachmentTypes($exclude_attachment_types)
    {
        $this->container['exclude_attachment_types'] = $exclude_attachment_types;

        return $this;
    }

    /**
     * Gets default_paper_size
     * @return string
     */
    public function getDefaultPaperSize()
    {
        return $this->container['default_paper_size'];
    }

    /**
     * Sets default_paper_size
     * @param string $default_paper_size Specify paper size to be used when it is not specified in the view
     * @return $this
     */
    public function setDefaultPaperSize($default_paper_size)
    {
        $allowed_values = array('A3', 'A4', 'A5', 'Legal', 'Letter', 'Custom');
        if (!is_null($default_paper_size) && (!in_array($default_paper_size, $allowed_values))) {
            throw new \InvalidArgumentException("Invalid value for 'default_paper_size', must be one of 'A3', 'A4', 'A5', 'Legal', 'Letter', 'Custom'");
        }
        $this->container['default_paper_size'] = $default_paper_size;

        return $this;
    }

    /**
     * Gets default_paper_size_custom
     * @return string
     */
    public function getDefaultPaperSizeCustom()
    {
        return $this->container['default_paper_size_custom'];
    }

    /**
     * Sets default_paper_size_custom
     * @param string $default_paper_size_custom Applicable if 'Default paper size' is set to 'Custom'
     * @return $this
     */
    public function setDefaultPaperSizeCustom($default_paper_size_custom)
    {
        $this->container['default_paper_size_custom'] = $default_paper_size_custom;

        return $this;
    }

    /**
     * Gets force_paper_size
     * @return string
     */
    public function getForcePaperSize()
    {
        return $this->container['force_paper_size'];
    }

    /**
     * Sets force_paper_size
     * @param string $force_paper_size Force this papers size regardless of whether it is set in the views or not
     * @return $this
     */
    public function setForcePaperSize($force_paper_size)
    {
        $allowed_values = array('A3', 'A4', 'A5', 'Legal', 'Letter', 'Custom');
        if (!is_null($force_paper_size) && (!in_array($force_paper_size, $allowed_values))) {
            throw new \InvalidArgumentException("Invalid value for 'force_paper_size', must be one of 'A3', 'A4', 'A5', 'Legal', 'Letter', 'Custom'");
        }
        $this->container['force_paper_size'] = $force_paper_size;

        return $this;
    }

    /**
     * Gets force_paper_size_custom
     * @return string
     */
    public function getForcePaperSizeCustom()
    {
        return $this->container['force_paper_size_custom'];
    }

    /**
     * Sets force_paper_size_custom
     * @param string $force_paper_size_custom Applicable if 'Force paper size' is set to custom
     * @return $this
     */
    public function setForcePaperSizeCustom($force_paper_size_custom)
    {
        $this->container['force_paper_size_custom'] = $force_paper_size_custom;

        return $this;
    }

    /**
     * Gets default_page_orientation
     * @return string
     */
    public function getDefaultPageOrientation()
    {
        return $this->container['default_page_orientation'];
    }

    /**
     * Sets default_page_orientation
     * @param string $default_page_orientation Specify papers size to be used if it is not specified in the view
     * @return $this
     */
    public function setDefaultPageOrientation($default_page_orientation)
    {
        $allowed_values = array('Default', 'Portrait', 'Landscape', 'Both');
        if (!is_null($default_page_orientation) && (!in_array($default_page_orientation, $allowed_values))) {
            throw new \InvalidArgumentException("Invalid value for 'default_page_orientation', must be one of 'Default', 'Portrait', 'Landscape', 'Both'");
        }
        $this->container['default_page_orientation'] = $default_page_orientation;

        return $this;
    }

    /**
     * Gets force_page_orientation
     * @return string
     */
    public function getForcePageOrientation()
    {
        return $this->container['force_page_orientation'];
    }

    /**
     * Sets force_page_orientation
     * @param string $force_page_orientation Force page orientation regardless of whether it is set in the view or not
     * @return $this
     */
    public function setForcePageOrientation($force_page_orientation)
    {
        $allowed_values = array('Default', 'Portrait', 'Landscape', 'Both');
        if (!is_null($force_page_orientation) && (!in_array($force_page_orientation, $allowed_values))) {
            throw new \InvalidArgumentException("Invalid value for 'force_page_orientation', must be one of 'Default', 'Portrait', 'Landscape', 'Both'");
        }
        $this->container['force_page_orientation'] = $force_page_orientation;

        return $this;
    }

    /**
     * Gets start_page
     * @return int
     */
    public function getStartPage()
    {
        return $this->container['start_page'];
    }

    /**
     * Sets start_page
     * @param int $start_page The first page to include
     * @return $this
     */
    public function setStartPage($start_page)
    {
        $this->container['start_page'] = $start_page;

        return $this;
    }

    /**
     * Gets end_page
     * @return int
     */
    public function getEndPage()
    {
        return $this->container['end_page'];
    }

    /**
     * Sets end_page
     * @param int $end_page The last page to include
     * @return $this
     */
    public function setEndPage($end_page)
    {
        $this->container['end_page'] = $end_page;

        return $this;
    }

    /**
     * Gets quality
     * @return string
     */
    public function getQuality()
    {
        return $this->container['quality'];
    }

    /**
     * Sets quality
     * @param string $quality Quality of the output file
     * @return $this
     */
    public function setQuality($quality)
    {
        $allowed_values = array('OptimizeForPrint', 'OptimizeForOnScreen', 'Original');
        if (!is_null($quality) && (!in_array($quality, $allowed_values))) {
            throw new \InvalidArgumentException("Invalid value for 'quality', must be one of 'OptimizeForPrint', 'OptimizeForOnScreen', 'Original'");
        }
        $this->container['quality'] = $quality;

        return $this;
    }

    /**
     * Gets override_settings
     * @return string
     */
    public function getOverrideSettings()
    {
        return $this->container['override_settings'];
    }

    /**
     * Sets override_settings
     * @param string $override_settings Optional settings using Muhimbi's XML syntax
     * @return $this
     */
    public function setOverrideSettings($override_settings)
    {
        $this->container['override_settings'] = $override_settings;

        return $this;
    }

    /**
     * Gets fail_on_error
     * @return bool
     */
    public function getFailOnError()
    {
        return $this->container['fail_on_error'];
    }

    /**
     * Sets fail_on_error
     * @param bool $fail_on_error Fail on error
     * @return $this
     */
    public function setFailOnError($fail_on_error)
    {
        $this->container['fail_on_error'] = $fail_on_error;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     * @param  integer $offset Offset
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     * @param  integer $offset Offset
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     * @param  integer $offset Offset
     * @param  mixed   $value  Value to be set
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     * @param  integer $offset Offset
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(\MuhimbiPDFOnline\Client\ObjectSerializer::sanitizeForSerialization($this), JSON_PRETTY_PRINT);
        }

        return json_encode(\MuhimbiPDFOnline\Client\ObjectSerializer::sanitizeForSerialization($this));
    }
}


