/*
 * Muhimbi PDF
 *
 * Convert, Merge, Watermark, Secure and OCR files.
 *
 * The version of the OpenAPI document: 9.16
 * Contact: support@muhimbi.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.Net;
using System.Net.Mime;
using Muhimbi.PDF.Online.Client.Client;
using Muhimbi.PDF.Online.Client.Model;

namespace Muhimbi.PDF.Online.Client.Api
{

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IConvertApiSync : IApiAccessor
    {
        #region Synchronous Operations
        /// <summary>
        /// Convert document
        /// </summary>
        /// <remarks>
        /// Convert a file to PDF or other format.
        /// </remarks>
        /// <exception cref="Muhimbi.PDF.Online.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="inputData"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>OperationResponse</returns>
        OperationResponse Convert(ConvertData inputData, int operationIndex = 0);

        /// <summary>
        /// Convert document
        /// </summary>
        /// <remarks>
        /// Convert a file to PDF or other format.
        /// </remarks>
        /// <exception cref="Muhimbi.PDF.Online.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="inputData"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of OperationResponse</returns>
        ApiResponse<OperationResponse> ConvertWithHttpInfo(ConvertData inputData, int operationIndex = 0);
        /// <summary>
        /// Convert CAD drawing to PDF
        /// </summary>
        /// <remarks>
        /// Convert a CAD drawing file to PDF or other format.
        /// </remarks>
        /// <exception cref="Muhimbi.PDF.Online.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="inputCadData"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>OperationResponse</returns>
        OperationResponse ConvertCad(ConvertCadData inputCadData, int operationIndex = 0);

        /// <summary>
        /// Convert CAD drawing to PDF
        /// </summary>
        /// <remarks>
        /// Convert a CAD drawing file to PDF or other format.
        /// </remarks>
        /// <exception cref="Muhimbi.PDF.Online.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="inputCadData"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of OperationResponse</returns>
        ApiResponse<OperationResponse> ConvertCadWithHttpInfo(ConvertCadData inputCadData, int operationIndex = 0);
        /// <summary>
        /// Convert email to PDF
        /// </summary>
        /// <remarks>
        /// Convert an email file to PDF or other format.
        /// </remarks>
        /// <exception cref="Muhimbi.PDF.Online.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="inputEmailData"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>OperationResponse</returns>
        OperationResponse ConvertEmail(ConvertEmailData inputEmailData, int operationIndex = 0);

        /// <summary>
        /// Convert email to PDF
        /// </summary>
        /// <remarks>
        /// Convert an email file to PDF or other format.
        /// </remarks>
        /// <exception cref="Muhimbi.PDF.Online.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="inputEmailData"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of OperationResponse</returns>
        ApiResponse<OperationResponse> ConvertEmailWithHttpInfo(ConvertEmailData inputEmailData, int operationIndex = 0);
        /// <summary>
        /// Convert Excel document
        /// </summary>
        /// <remarks>
        /// Convert an Excel document to PDF or other format.
        /// </remarks>
        /// <exception cref="Muhimbi.PDF.Online.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="inputExcelData"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>OperationResponse</returns>
        OperationResponse ConvertExcel(ConvertExcelData inputExcelData, int operationIndex = 0);

        /// <summary>
        /// Convert Excel document
        /// </summary>
        /// <remarks>
        /// Convert an Excel document to PDF or other format.
        /// </remarks>
        /// <exception cref="Muhimbi.PDF.Online.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="inputExcelData"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of OperationResponse</returns>
        ApiResponse<OperationResponse> ConvertExcelWithHttpInfo(ConvertExcelData inputExcelData, int operationIndex = 0);
        /// <summary>
        /// Convert HTML to PDF
        /// </summary>
        /// <remarks>
        /// Convert URLs or HTML to PDF.
        /// </remarks>
        /// <exception cref="Muhimbi.PDF.Online.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="inputData"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>OperationResponse</returns>
        OperationResponse ConvertHtml(ConvertHtmlData inputData, int operationIndex = 0);

        /// <summary>
        /// Convert HTML to PDF
        /// </summary>
        /// <remarks>
        /// Convert URLs or HTML to PDF.
        /// </remarks>
        /// <exception cref="Muhimbi.PDF.Online.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="inputData"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of OperationResponse</returns>
        ApiResponse<OperationResponse> ConvertHtmlWithHttpInfo(ConvertHtmlData inputData, int operationIndex = 0);
        /// <summary>
        /// Convert InfoPath document
        /// </summary>
        /// <remarks>
        /// Convert a InfoPath file to PDF or other format.
        /// </remarks>
        /// <exception cref="Muhimbi.PDF.Online.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="inputInfopathData"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>OperationResponse</returns>
        OperationResponse ConvertInfopath(ConvertInfopathData inputInfopathData, int operationIndex = 0);

        /// <summary>
        /// Convert InfoPath document
        /// </summary>
        /// <remarks>
        /// Convert a InfoPath file to PDF or other format.
        /// </remarks>
        /// <exception cref="Muhimbi.PDF.Online.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="inputInfopathData"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of OperationResponse</returns>
        ApiResponse<OperationResponse> ConvertInfopathWithHttpInfo(ConvertInfopathData inputInfopathData, int operationIndex = 0);
        /// <summary>
        /// Convert document to PDF-A
        /// </summary>
        /// <remarks>
        /// Convert a document to PDF-A.
        /// </remarks>
        /// <exception cref="Muhimbi.PDF.Online.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="inputPdfData"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>OperationResponse</returns>
        OperationResponse ConvertPdfa(ConvertPdfaData inputPdfData, int operationIndex = 0);

        /// <summary>
        /// Convert document to PDF-A
        /// </summary>
        /// <remarks>
        /// Convert a document to PDF-A.
        /// </remarks>
        /// <exception cref="Muhimbi.PDF.Online.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="inputPdfData"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of OperationResponse</returns>
        ApiResponse<OperationResponse> ConvertPdfaWithHttpInfo(ConvertPdfaData inputPdfData, int operationIndex = 0);
        /// <summary>
        /// Convert PowerPoint document
        /// </summary>
        /// <remarks>
        /// Convert a PowerPoint document to PDF or other format.
        /// </remarks>
        /// <exception cref="Muhimbi.PDF.Online.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="inputPowerpointData"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>OperationResponse</returns>
        OperationResponse ConvertPowerpoint(ConvertPowerpointData inputPowerpointData, int operationIndex = 0);

        /// <summary>
        /// Convert PowerPoint document
        /// </summary>
        /// <remarks>
        /// Convert a PowerPoint document to PDF or other format.
        /// </remarks>
        /// <exception cref="Muhimbi.PDF.Online.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="inputPowerpointData"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of OperationResponse</returns>
        ApiResponse<OperationResponse> ConvertPowerpointWithHttpInfo(ConvertPowerpointData inputPowerpointData, int operationIndex = 0);
        /// <summary>
        /// Convert Visio document
        /// </summary>
        /// <remarks>
        /// Convert a Visio document to PDF or XPS.
        /// </remarks>
        /// <exception cref="Muhimbi.PDF.Online.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="inputVisioData"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>OperationResponse</returns>
        OperationResponse ConvertVisio(ConvertVisioData inputVisioData, int operationIndex = 0);

        /// <summary>
        /// Convert Visio document
        /// </summary>
        /// <remarks>
        /// Convert a Visio document to PDF or XPS.
        /// </remarks>
        /// <exception cref="Muhimbi.PDF.Online.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="inputVisioData"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of OperationResponse</returns>
        ApiResponse<OperationResponse> ConvertVisioWithHttpInfo(ConvertVisioData inputVisioData, int operationIndex = 0);
        /// <summary>
        /// Convert Word document
        /// </summary>
        /// <remarks>
        /// Convert a Word document to PDF or other format.
        /// </remarks>
        /// <exception cref="Muhimbi.PDF.Online.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="inputWordData"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>OperationResponse</returns>
        OperationResponse ConvertWord(ConvertWordData inputWordData, int operationIndex = 0);

        /// <summary>
        /// Convert Word document
        /// </summary>
        /// <remarks>
        /// Convert a Word document to PDF or other format.
        /// </remarks>
        /// <exception cref="Muhimbi.PDF.Online.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="inputWordData"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of OperationResponse</returns>
        ApiResponse<OperationResponse> ConvertWordWithHttpInfo(ConvertWordData inputWordData, int operationIndex = 0);
        /// <summary>
        /// Export PDF Forms Data
        /// </summary>
        /// <remarks>
        /// Convert data from a PDF Form to XML, FDF or XFDF.
        /// </remarks>
        /// <exception cref="Muhimbi.PDF.Online.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="inputFromPdfData"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>OperationResponse</returns>
        OperationResponse ExportFormData(ExportFormData inputFromPdfData, int operationIndex = 0);

        /// <summary>
        /// Export PDF Forms Data
        /// </summary>
        /// <remarks>
        /// Convert data from a PDF Form to XML, FDF or XFDF.
        /// </remarks>
        /// <exception cref="Muhimbi.PDF.Online.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="inputFromPdfData"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of OperationResponse</returns>
        ApiResponse<OperationResponse> ExportFormDataWithHttpInfo(ExportFormData inputFromPdfData, int operationIndex = 0);
        /// <summary>
        /// Import PDF Forms data
        /// </summary>
        /// <remarks>
        /// Import PDF Forms data.
        /// </remarks>
        /// <exception cref="Muhimbi.PDF.Online.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="inputXmlData"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>OperationResponse</returns>
        OperationResponse ImportFormData(ImportFormData inputXmlData, int operationIndex = 0);

        /// <summary>
        /// Import PDF Forms data
        /// </summary>
        /// <remarks>
        /// Import PDF Forms data.
        /// </remarks>
        /// <exception cref="Muhimbi.PDF.Online.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="inputXmlData"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of OperationResponse</returns>
        ApiResponse<OperationResponse> ImportFormDataWithHttpInfo(ImportFormData inputXmlData, int operationIndex = 0);
        #endregion Synchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IConvertApiAsync : IApiAccessor
    {
        #region Asynchronous Operations
        /// <summary>
        /// Convert document
        /// </summary>
        /// <remarks>
        /// Convert a file to PDF or other format.
        /// </remarks>
        /// <exception cref="Muhimbi.PDF.Online.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="inputData"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of OperationResponse</returns>
        System.Threading.Tasks.Task<OperationResponse> ConvertAsync(ConvertData inputData, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Convert document
        /// </summary>
        /// <remarks>
        /// Convert a file to PDF or other format.
        /// </remarks>
        /// <exception cref="Muhimbi.PDF.Online.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="inputData"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (OperationResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<OperationResponse>> ConvertWithHttpInfoAsync(ConvertData inputData, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Convert CAD drawing to PDF
        /// </summary>
        /// <remarks>
        /// Convert a CAD drawing file to PDF or other format.
        /// </remarks>
        /// <exception cref="Muhimbi.PDF.Online.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="inputCadData"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of OperationResponse</returns>
        System.Threading.Tasks.Task<OperationResponse> ConvertCadAsync(ConvertCadData inputCadData, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Convert CAD drawing to PDF
        /// </summary>
        /// <remarks>
        /// Convert a CAD drawing file to PDF or other format.
        /// </remarks>
        /// <exception cref="Muhimbi.PDF.Online.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="inputCadData"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (OperationResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<OperationResponse>> ConvertCadWithHttpInfoAsync(ConvertCadData inputCadData, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Convert email to PDF
        /// </summary>
        /// <remarks>
        /// Convert an email file to PDF or other format.
        /// </remarks>
        /// <exception cref="Muhimbi.PDF.Online.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="inputEmailData"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of OperationResponse</returns>
        System.Threading.Tasks.Task<OperationResponse> ConvertEmailAsync(ConvertEmailData inputEmailData, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Convert email to PDF
        /// </summary>
        /// <remarks>
        /// Convert an email file to PDF or other format.
        /// </remarks>
        /// <exception cref="Muhimbi.PDF.Online.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="inputEmailData"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (OperationResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<OperationResponse>> ConvertEmailWithHttpInfoAsync(ConvertEmailData inputEmailData, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Convert Excel document
        /// </summary>
        /// <remarks>
        /// Convert an Excel document to PDF or other format.
        /// </remarks>
        /// <exception cref="Muhimbi.PDF.Online.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="inputExcelData"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of OperationResponse</returns>
        System.Threading.Tasks.Task<OperationResponse> ConvertExcelAsync(ConvertExcelData inputExcelData, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Convert Excel document
        /// </summary>
        /// <remarks>
        /// Convert an Excel document to PDF or other format.
        /// </remarks>
        /// <exception cref="Muhimbi.PDF.Online.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="inputExcelData"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (OperationResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<OperationResponse>> ConvertExcelWithHttpInfoAsync(ConvertExcelData inputExcelData, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Convert HTML to PDF
        /// </summary>
        /// <remarks>
        /// Convert URLs or HTML to PDF.
        /// </remarks>
        /// <exception cref="Muhimbi.PDF.Online.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="inputData"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of OperationResponse</returns>
        System.Threading.Tasks.Task<OperationResponse> ConvertHtmlAsync(ConvertHtmlData inputData, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Convert HTML to PDF
        /// </summary>
        /// <remarks>
        /// Convert URLs or HTML to PDF.
        /// </remarks>
        /// <exception cref="Muhimbi.PDF.Online.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="inputData"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (OperationResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<OperationResponse>> ConvertHtmlWithHttpInfoAsync(ConvertHtmlData inputData, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Convert InfoPath document
        /// </summary>
        /// <remarks>
        /// Convert a InfoPath file to PDF or other format.
        /// </remarks>
        /// <exception cref="Muhimbi.PDF.Online.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="inputInfopathData"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of OperationResponse</returns>
        System.Threading.Tasks.Task<OperationResponse> ConvertInfopathAsync(ConvertInfopathData inputInfopathData, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Convert InfoPath document
        /// </summary>
        /// <remarks>
        /// Convert a InfoPath file to PDF or other format.
        /// </remarks>
        /// <exception cref="Muhimbi.PDF.Online.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="inputInfopathData"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (OperationResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<OperationResponse>> ConvertInfopathWithHttpInfoAsync(ConvertInfopathData inputInfopathData, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Convert document to PDF-A
        /// </summary>
        /// <remarks>
        /// Convert a document to PDF-A.
        /// </remarks>
        /// <exception cref="Muhimbi.PDF.Online.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="inputPdfData"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of OperationResponse</returns>
        System.Threading.Tasks.Task<OperationResponse> ConvertPdfaAsync(ConvertPdfaData inputPdfData, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Convert document to PDF-A
        /// </summary>
        /// <remarks>
        /// Convert a document to PDF-A.
        /// </remarks>
        /// <exception cref="Muhimbi.PDF.Online.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="inputPdfData"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (OperationResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<OperationResponse>> ConvertPdfaWithHttpInfoAsync(ConvertPdfaData inputPdfData, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Convert PowerPoint document
        /// </summary>
        /// <remarks>
        /// Convert a PowerPoint document to PDF or other format.
        /// </remarks>
        /// <exception cref="Muhimbi.PDF.Online.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="inputPowerpointData"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of OperationResponse</returns>
        System.Threading.Tasks.Task<OperationResponse> ConvertPowerpointAsync(ConvertPowerpointData inputPowerpointData, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Convert PowerPoint document
        /// </summary>
        /// <remarks>
        /// Convert a PowerPoint document to PDF or other format.
        /// </remarks>
        /// <exception cref="Muhimbi.PDF.Online.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="inputPowerpointData"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (OperationResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<OperationResponse>> ConvertPowerpointWithHttpInfoAsync(ConvertPowerpointData inputPowerpointData, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Convert Visio document
        /// </summary>
        /// <remarks>
        /// Convert a Visio document to PDF or XPS.
        /// </remarks>
        /// <exception cref="Muhimbi.PDF.Online.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="inputVisioData"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of OperationResponse</returns>
        System.Threading.Tasks.Task<OperationResponse> ConvertVisioAsync(ConvertVisioData inputVisioData, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Convert Visio document
        /// </summary>
        /// <remarks>
        /// Convert a Visio document to PDF or XPS.
        /// </remarks>
        /// <exception cref="Muhimbi.PDF.Online.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="inputVisioData"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (OperationResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<OperationResponse>> ConvertVisioWithHttpInfoAsync(ConvertVisioData inputVisioData, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Convert Word document
        /// </summary>
        /// <remarks>
        /// Convert a Word document to PDF or other format.
        /// </remarks>
        /// <exception cref="Muhimbi.PDF.Online.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="inputWordData"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of OperationResponse</returns>
        System.Threading.Tasks.Task<OperationResponse> ConvertWordAsync(ConvertWordData inputWordData, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Convert Word document
        /// </summary>
        /// <remarks>
        /// Convert a Word document to PDF or other format.
        /// </remarks>
        /// <exception cref="Muhimbi.PDF.Online.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="inputWordData"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (OperationResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<OperationResponse>> ConvertWordWithHttpInfoAsync(ConvertWordData inputWordData, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Export PDF Forms Data
        /// </summary>
        /// <remarks>
        /// Convert data from a PDF Form to XML, FDF or XFDF.
        /// </remarks>
        /// <exception cref="Muhimbi.PDF.Online.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="inputFromPdfData"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of OperationResponse</returns>
        System.Threading.Tasks.Task<OperationResponse> ExportFormDataAsync(ExportFormData inputFromPdfData, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Export PDF Forms Data
        /// </summary>
        /// <remarks>
        /// Convert data from a PDF Form to XML, FDF or XFDF.
        /// </remarks>
        /// <exception cref="Muhimbi.PDF.Online.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="inputFromPdfData"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (OperationResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<OperationResponse>> ExportFormDataWithHttpInfoAsync(ExportFormData inputFromPdfData, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Import PDF Forms data
        /// </summary>
        /// <remarks>
        /// Import PDF Forms data.
        /// </remarks>
        /// <exception cref="Muhimbi.PDF.Online.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="inputXmlData"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of OperationResponse</returns>
        System.Threading.Tasks.Task<OperationResponse> ImportFormDataAsync(ImportFormData inputXmlData, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Import PDF Forms data
        /// </summary>
        /// <remarks>
        /// Import PDF Forms data.
        /// </remarks>
        /// <exception cref="Muhimbi.PDF.Online.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="inputXmlData"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (OperationResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<OperationResponse>> ImportFormDataWithHttpInfoAsync(ImportFormData inputXmlData, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        #endregion Asynchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IConvertApi : IConvertApiSync, IConvertApiAsync
    {

    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public partial class ConvertApi : IConvertApi
    {
        private Muhimbi.PDF.Online.Client.Client.ExceptionFactory _exceptionFactory = (name, response) => null;

        /// <summary>
        /// Initializes a new instance of the <see cref="ConvertApi"/> class.
        /// </summary>
        /// <returns></returns>
        public ConvertApi() : this((string)null)
        {
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="ConvertApi"/> class.
        /// </summary>
        /// <returns></returns>
        public ConvertApi(string basePath)
        {
            this.Configuration = Muhimbi.PDF.Online.Client.Client.Configuration.MergeConfigurations(
                Muhimbi.PDF.Online.Client.Client.GlobalConfiguration.Instance,
                new Muhimbi.PDF.Online.Client.Client.Configuration { BasePath = basePath }
            );
            this.Client = new Muhimbi.PDF.Online.Client.Client.ApiClient(this.Configuration.BasePath);
            this.AsynchronousClient = new Muhimbi.PDF.Online.Client.Client.ApiClient(this.Configuration.BasePath);
            this.ExceptionFactory = Muhimbi.PDF.Online.Client.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="ConvertApi"/> class
        /// using Configuration object
        /// </summary>
        /// <param name="configuration">An instance of Configuration</param>
        /// <returns></returns>
        public ConvertApi(Muhimbi.PDF.Online.Client.Client.Configuration configuration)
        {
            if (configuration == null) throw new ArgumentNullException("configuration");

            this.Configuration = Muhimbi.PDF.Online.Client.Client.Configuration.MergeConfigurations(
                Muhimbi.PDF.Online.Client.Client.GlobalConfiguration.Instance,
                configuration
            );
            this.Client = new Muhimbi.PDF.Online.Client.Client.ApiClient(this.Configuration.BasePath);
            this.AsynchronousClient = new Muhimbi.PDF.Online.Client.Client.ApiClient(this.Configuration.BasePath);
            ExceptionFactory = Muhimbi.PDF.Online.Client.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="ConvertApi"/> class
        /// using a Configuration object and client instance.
        /// </summary>
        /// <param name="client">The client interface for synchronous API access.</param>
        /// <param name="asyncClient">The client interface for asynchronous API access.</param>
        /// <param name="configuration">The configuration object.</param>
        public ConvertApi(Muhimbi.PDF.Online.Client.Client.ISynchronousClient client, Muhimbi.PDF.Online.Client.Client.IAsynchronousClient asyncClient, Muhimbi.PDF.Online.Client.Client.IReadableConfiguration configuration)
        {
            if (client == null) throw new ArgumentNullException("client");
            if (asyncClient == null) throw new ArgumentNullException("asyncClient");
            if (configuration == null) throw new ArgumentNullException("configuration");

            this.Client = client;
            this.AsynchronousClient = asyncClient;
            this.Configuration = configuration;
            this.ExceptionFactory = Muhimbi.PDF.Online.Client.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// The client for accessing this underlying API asynchronously.
        /// </summary>
        public Muhimbi.PDF.Online.Client.Client.IAsynchronousClient AsynchronousClient { get; set; }

        /// <summary>
        /// The client for accessing this underlying API synchronously.
        /// </summary>
        public Muhimbi.PDF.Online.Client.Client.ISynchronousClient Client { get; set; }

        /// <summary>
        /// Gets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        public string GetBasePath()
        {
            return this.Configuration.BasePath;
        }

        /// <summary>
        /// Gets or sets the configuration object
        /// </summary>
        /// <value>An instance of the Configuration</value>
        public Muhimbi.PDF.Online.Client.Client.IReadableConfiguration Configuration { get; set; }

        /// <summary>
        /// Provides a factory method hook for the creation of exceptions.
        /// </summary>
        public Muhimbi.PDF.Online.Client.Client.ExceptionFactory ExceptionFactory
        {
            get
            {
                if (_exceptionFactory != null && _exceptionFactory.GetInvocationList().Length > 1)
                {
                    throw new InvalidOperationException("Multicast delegate for ExceptionFactory is unsupported.");
                }
                return _exceptionFactory;
            }
            set { _exceptionFactory = value; }
        }

        /// <summary>
        /// Convert document Convert a file to PDF or other format.
        /// </summary>
        /// <exception cref="Muhimbi.PDF.Online.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="inputData"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>OperationResponse</returns>
        public OperationResponse Convert(ConvertData inputData, int operationIndex = 0)
        {
            Muhimbi.PDF.Online.Client.Client.ApiResponse<OperationResponse> localVarResponse = ConvertWithHttpInfo(inputData);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Convert document Convert a file to PDF or other format.
        /// </summary>
        /// <exception cref="Muhimbi.PDF.Online.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="inputData"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of OperationResponse</returns>
        public Muhimbi.PDF.Online.Client.Client.ApiResponse<OperationResponse> ConvertWithHttpInfo(ConvertData inputData, int operationIndex = 0)
        {
            // verify the required parameter 'inputData' is set
            if (inputData == null)
            {
                throw new Muhimbi.PDF.Online.Client.Client.ApiException(400, "Missing required parameter 'inputData' when calling ConvertApi->Convert");
            }

            Muhimbi.PDF.Online.Client.Client.RequestOptions localVarRequestOptions = new Muhimbi.PDF.Online.Client.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Muhimbi.PDF.Online.Client.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Muhimbi.PDF.Online.Client.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.Data = inputData;

            localVarRequestOptions.Operation = "ConvertApi.Convert";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (api_key) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("api_key")))
            {
                localVarRequestOptions.HeaderParameters.Add("api_key", this.Configuration.GetApiKeyWithPrefix("api_key"));
            }
            // authentication (oauth2_auth) required
            // oauth required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = this.Client.Post<OperationResponse>("/v1/operations/convert", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("Convert", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Convert document Convert a file to PDF or other format.
        /// </summary>
        /// <exception cref="Muhimbi.PDF.Online.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="inputData"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of OperationResponse</returns>
        public async System.Threading.Tasks.Task<OperationResponse> ConvertAsync(ConvertData inputData, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Muhimbi.PDF.Online.Client.Client.ApiResponse<OperationResponse> localVarResponse = await ConvertWithHttpInfoAsync(inputData, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Convert document Convert a file to PDF or other format.
        /// </summary>
        /// <exception cref="Muhimbi.PDF.Online.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="inputData"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (OperationResponse)</returns>
        public async System.Threading.Tasks.Task<Muhimbi.PDF.Online.Client.Client.ApiResponse<OperationResponse>> ConvertWithHttpInfoAsync(ConvertData inputData, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'inputData' is set
            if (inputData == null)
            {
                throw new Muhimbi.PDF.Online.Client.Client.ApiException(400, "Missing required parameter 'inputData' when calling ConvertApi->Convert");
            }


            Muhimbi.PDF.Online.Client.Client.RequestOptions localVarRequestOptions = new Muhimbi.PDF.Online.Client.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Muhimbi.PDF.Online.Client.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Muhimbi.PDF.Online.Client.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.Data = inputData;

            localVarRequestOptions.Operation = "ConvertApi.Convert";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (api_key) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("api_key")))
            {
                localVarRequestOptions.HeaderParameters.Add("api_key", this.Configuration.GetApiKeyWithPrefix("api_key"));
            }
            // authentication (oauth2_auth) required
            // oauth required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PostAsync<OperationResponse>("/v1/operations/convert", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("Convert", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Convert CAD drawing to PDF Convert a CAD drawing file to PDF or other format.
        /// </summary>
        /// <exception cref="Muhimbi.PDF.Online.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="inputCadData"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>OperationResponse</returns>
        public OperationResponse ConvertCad(ConvertCadData inputCadData, int operationIndex = 0)
        {
            Muhimbi.PDF.Online.Client.Client.ApiResponse<OperationResponse> localVarResponse = ConvertCadWithHttpInfo(inputCadData);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Convert CAD drawing to PDF Convert a CAD drawing file to PDF or other format.
        /// </summary>
        /// <exception cref="Muhimbi.PDF.Online.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="inputCadData"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of OperationResponse</returns>
        public Muhimbi.PDF.Online.Client.Client.ApiResponse<OperationResponse> ConvertCadWithHttpInfo(ConvertCadData inputCadData, int operationIndex = 0)
        {
            // verify the required parameter 'inputCadData' is set
            if (inputCadData == null)
            {
                throw new Muhimbi.PDF.Online.Client.Client.ApiException(400, "Missing required parameter 'inputCadData' when calling ConvertApi->ConvertCad");
            }

            Muhimbi.PDF.Online.Client.Client.RequestOptions localVarRequestOptions = new Muhimbi.PDF.Online.Client.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Muhimbi.PDF.Online.Client.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Muhimbi.PDF.Online.Client.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.Data = inputCadData;

            localVarRequestOptions.Operation = "ConvertApi.ConvertCad";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (api_key) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("api_key")))
            {
                localVarRequestOptions.HeaderParameters.Add("api_key", this.Configuration.GetApiKeyWithPrefix("api_key"));
            }
            // authentication (oauth2_auth) required
            // oauth required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = this.Client.Post<OperationResponse>("/v1/operations/convert_cad", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ConvertCad", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Convert CAD drawing to PDF Convert a CAD drawing file to PDF or other format.
        /// </summary>
        /// <exception cref="Muhimbi.PDF.Online.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="inputCadData"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of OperationResponse</returns>
        public async System.Threading.Tasks.Task<OperationResponse> ConvertCadAsync(ConvertCadData inputCadData, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Muhimbi.PDF.Online.Client.Client.ApiResponse<OperationResponse> localVarResponse = await ConvertCadWithHttpInfoAsync(inputCadData, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Convert CAD drawing to PDF Convert a CAD drawing file to PDF or other format.
        /// </summary>
        /// <exception cref="Muhimbi.PDF.Online.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="inputCadData"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (OperationResponse)</returns>
        public async System.Threading.Tasks.Task<Muhimbi.PDF.Online.Client.Client.ApiResponse<OperationResponse>> ConvertCadWithHttpInfoAsync(ConvertCadData inputCadData, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'inputCadData' is set
            if (inputCadData == null)
            {
                throw new Muhimbi.PDF.Online.Client.Client.ApiException(400, "Missing required parameter 'inputCadData' when calling ConvertApi->ConvertCad");
            }


            Muhimbi.PDF.Online.Client.Client.RequestOptions localVarRequestOptions = new Muhimbi.PDF.Online.Client.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Muhimbi.PDF.Online.Client.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Muhimbi.PDF.Online.Client.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.Data = inputCadData;

            localVarRequestOptions.Operation = "ConvertApi.ConvertCad";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (api_key) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("api_key")))
            {
                localVarRequestOptions.HeaderParameters.Add("api_key", this.Configuration.GetApiKeyWithPrefix("api_key"));
            }
            // authentication (oauth2_auth) required
            // oauth required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PostAsync<OperationResponse>("/v1/operations/convert_cad", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ConvertCad", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Convert email to PDF Convert an email file to PDF or other format.
        /// </summary>
        /// <exception cref="Muhimbi.PDF.Online.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="inputEmailData"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>OperationResponse</returns>
        public OperationResponse ConvertEmail(ConvertEmailData inputEmailData, int operationIndex = 0)
        {
            Muhimbi.PDF.Online.Client.Client.ApiResponse<OperationResponse> localVarResponse = ConvertEmailWithHttpInfo(inputEmailData);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Convert email to PDF Convert an email file to PDF or other format.
        /// </summary>
        /// <exception cref="Muhimbi.PDF.Online.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="inputEmailData"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of OperationResponse</returns>
        public Muhimbi.PDF.Online.Client.Client.ApiResponse<OperationResponse> ConvertEmailWithHttpInfo(ConvertEmailData inputEmailData, int operationIndex = 0)
        {
            // verify the required parameter 'inputEmailData' is set
            if (inputEmailData == null)
            {
                throw new Muhimbi.PDF.Online.Client.Client.ApiException(400, "Missing required parameter 'inputEmailData' when calling ConvertApi->ConvertEmail");
            }

            Muhimbi.PDF.Online.Client.Client.RequestOptions localVarRequestOptions = new Muhimbi.PDF.Online.Client.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Muhimbi.PDF.Online.Client.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Muhimbi.PDF.Online.Client.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.Data = inputEmailData;

            localVarRequestOptions.Operation = "ConvertApi.ConvertEmail";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (api_key) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("api_key")))
            {
                localVarRequestOptions.HeaderParameters.Add("api_key", this.Configuration.GetApiKeyWithPrefix("api_key"));
            }
            // authentication (oauth2_auth) required
            // oauth required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = this.Client.Post<OperationResponse>("/v1/operations/convert_email", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ConvertEmail", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Convert email to PDF Convert an email file to PDF or other format.
        /// </summary>
        /// <exception cref="Muhimbi.PDF.Online.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="inputEmailData"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of OperationResponse</returns>
        public async System.Threading.Tasks.Task<OperationResponse> ConvertEmailAsync(ConvertEmailData inputEmailData, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Muhimbi.PDF.Online.Client.Client.ApiResponse<OperationResponse> localVarResponse = await ConvertEmailWithHttpInfoAsync(inputEmailData, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Convert email to PDF Convert an email file to PDF or other format.
        /// </summary>
        /// <exception cref="Muhimbi.PDF.Online.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="inputEmailData"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (OperationResponse)</returns>
        public async System.Threading.Tasks.Task<Muhimbi.PDF.Online.Client.Client.ApiResponse<OperationResponse>> ConvertEmailWithHttpInfoAsync(ConvertEmailData inputEmailData, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'inputEmailData' is set
            if (inputEmailData == null)
            {
                throw new Muhimbi.PDF.Online.Client.Client.ApiException(400, "Missing required parameter 'inputEmailData' when calling ConvertApi->ConvertEmail");
            }


            Muhimbi.PDF.Online.Client.Client.RequestOptions localVarRequestOptions = new Muhimbi.PDF.Online.Client.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Muhimbi.PDF.Online.Client.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Muhimbi.PDF.Online.Client.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.Data = inputEmailData;

            localVarRequestOptions.Operation = "ConvertApi.ConvertEmail";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (api_key) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("api_key")))
            {
                localVarRequestOptions.HeaderParameters.Add("api_key", this.Configuration.GetApiKeyWithPrefix("api_key"));
            }
            // authentication (oauth2_auth) required
            // oauth required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PostAsync<OperationResponse>("/v1/operations/convert_email", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ConvertEmail", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Convert Excel document Convert an Excel document to PDF or other format.
        /// </summary>
        /// <exception cref="Muhimbi.PDF.Online.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="inputExcelData"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>OperationResponse</returns>
        public OperationResponse ConvertExcel(ConvertExcelData inputExcelData, int operationIndex = 0)
        {
            Muhimbi.PDF.Online.Client.Client.ApiResponse<OperationResponse> localVarResponse = ConvertExcelWithHttpInfo(inputExcelData);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Convert Excel document Convert an Excel document to PDF or other format.
        /// </summary>
        /// <exception cref="Muhimbi.PDF.Online.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="inputExcelData"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of OperationResponse</returns>
        public Muhimbi.PDF.Online.Client.Client.ApiResponse<OperationResponse> ConvertExcelWithHttpInfo(ConvertExcelData inputExcelData, int operationIndex = 0)
        {
            // verify the required parameter 'inputExcelData' is set
            if (inputExcelData == null)
            {
                throw new Muhimbi.PDF.Online.Client.Client.ApiException(400, "Missing required parameter 'inputExcelData' when calling ConvertApi->ConvertExcel");
            }

            Muhimbi.PDF.Online.Client.Client.RequestOptions localVarRequestOptions = new Muhimbi.PDF.Online.Client.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Muhimbi.PDF.Online.Client.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Muhimbi.PDF.Online.Client.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.Data = inputExcelData;

            localVarRequestOptions.Operation = "ConvertApi.ConvertExcel";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (api_key) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("api_key")))
            {
                localVarRequestOptions.HeaderParameters.Add("api_key", this.Configuration.GetApiKeyWithPrefix("api_key"));
            }
            // authentication (oauth2_auth) required
            // oauth required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = this.Client.Post<OperationResponse>("/v1/operations/convert_excel", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ConvertExcel", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Convert Excel document Convert an Excel document to PDF or other format.
        /// </summary>
        /// <exception cref="Muhimbi.PDF.Online.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="inputExcelData"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of OperationResponse</returns>
        public async System.Threading.Tasks.Task<OperationResponse> ConvertExcelAsync(ConvertExcelData inputExcelData, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Muhimbi.PDF.Online.Client.Client.ApiResponse<OperationResponse> localVarResponse = await ConvertExcelWithHttpInfoAsync(inputExcelData, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Convert Excel document Convert an Excel document to PDF or other format.
        /// </summary>
        /// <exception cref="Muhimbi.PDF.Online.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="inputExcelData"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (OperationResponse)</returns>
        public async System.Threading.Tasks.Task<Muhimbi.PDF.Online.Client.Client.ApiResponse<OperationResponse>> ConvertExcelWithHttpInfoAsync(ConvertExcelData inputExcelData, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'inputExcelData' is set
            if (inputExcelData == null)
            {
                throw new Muhimbi.PDF.Online.Client.Client.ApiException(400, "Missing required parameter 'inputExcelData' when calling ConvertApi->ConvertExcel");
            }


            Muhimbi.PDF.Online.Client.Client.RequestOptions localVarRequestOptions = new Muhimbi.PDF.Online.Client.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Muhimbi.PDF.Online.Client.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Muhimbi.PDF.Online.Client.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.Data = inputExcelData;

            localVarRequestOptions.Operation = "ConvertApi.ConvertExcel";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (api_key) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("api_key")))
            {
                localVarRequestOptions.HeaderParameters.Add("api_key", this.Configuration.GetApiKeyWithPrefix("api_key"));
            }
            // authentication (oauth2_auth) required
            // oauth required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PostAsync<OperationResponse>("/v1/operations/convert_excel", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ConvertExcel", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Convert HTML to PDF Convert URLs or HTML to PDF.
        /// </summary>
        /// <exception cref="Muhimbi.PDF.Online.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="inputData"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>OperationResponse</returns>
        public OperationResponse ConvertHtml(ConvertHtmlData inputData, int operationIndex = 0)
        {
            Muhimbi.PDF.Online.Client.Client.ApiResponse<OperationResponse> localVarResponse = ConvertHtmlWithHttpInfo(inputData);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Convert HTML to PDF Convert URLs or HTML to PDF.
        /// </summary>
        /// <exception cref="Muhimbi.PDF.Online.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="inputData"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of OperationResponse</returns>
        public Muhimbi.PDF.Online.Client.Client.ApiResponse<OperationResponse> ConvertHtmlWithHttpInfo(ConvertHtmlData inputData, int operationIndex = 0)
        {
            // verify the required parameter 'inputData' is set
            if (inputData == null)
            {
                throw new Muhimbi.PDF.Online.Client.Client.ApiException(400, "Missing required parameter 'inputData' when calling ConvertApi->ConvertHtml");
            }

            Muhimbi.PDF.Online.Client.Client.RequestOptions localVarRequestOptions = new Muhimbi.PDF.Online.Client.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Muhimbi.PDF.Online.Client.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Muhimbi.PDF.Online.Client.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.Data = inputData;

            localVarRequestOptions.Operation = "ConvertApi.ConvertHtml";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (api_key) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("api_key")))
            {
                localVarRequestOptions.HeaderParameters.Add("api_key", this.Configuration.GetApiKeyWithPrefix("api_key"));
            }
            // authentication (oauth2_auth) required
            // oauth required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = this.Client.Post<OperationResponse>("/v1/operations/convert_html", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ConvertHtml", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Convert HTML to PDF Convert URLs or HTML to PDF.
        /// </summary>
        /// <exception cref="Muhimbi.PDF.Online.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="inputData"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of OperationResponse</returns>
        public async System.Threading.Tasks.Task<OperationResponse> ConvertHtmlAsync(ConvertHtmlData inputData, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Muhimbi.PDF.Online.Client.Client.ApiResponse<OperationResponse> localVarResponse = await ConvertHtmlWithHttpInfoAsync(inputData, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Convert HTML to PDF Convert URLs or HTML to PDF.
        /// </summary>
        /// <exception cref="Muhimbi.PDF.Online.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="inputData"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (OperationResponse)</returns>
        public async System.Threading.Tasks.Task<Muhimbi.PDF.Online.Client.Client.ApiResponse<OperationResponse>> ConvertHtmlWithHttpInfoAsync(ConvertHtmlData inputData, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'inputData' is set
            if (inputData == null)
            {
                throw new Muhimbi.PDF.Online.Client.Client.ApiException(400, "Missing required parameter 'inputData' when calling ConvertApi->ConvertHtml");
            }


            Muhimbi.PDF.Online.Client.Client.RequestOptions localVarRequestOptions = new Muhimbi.PDF.Online.Client.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Muhimbi.PDF.Online.Client.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Muhimbi.PDF.Online.Client.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.Data = inputData;

            localVarRequestOptions.Operation = "ConvertApi.ConvertHtml";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (api_key) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("api_key")))
            {
                localVarRequestOptions.HeaderParameters.Add("api_key", this.Configuration.GetApiKeyWithPrefix("api_key"));
            }
            // authentication (oauth2_auth) required
            // oauth required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PostAsync<OperationResponse>("/v1/operations/convert_html", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ConvertHtml", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Convert InfoPath document Convert a InfoPath file to PDF or other format.
        /// </summary>
        /// <exception cref="Muhimbi.PDF.Online.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="inputInfopathData"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>OperationResponse</returns>
        public OperationResponse ConvertInfopath(ConvertInfopathData inputInfopathData, int operationIndex = 0)
        {
            Muhimbi.PDF.Online.Client.Client.ApiResponse<OperationResponse> localVarResponse = ConvertInfopathWithHttpInfo(inputInfopathData);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Convert InfoPath document Convert a InfoPath file to PDF or other format.
        /// </summary>
        /// <exception cref="Muhimbi.PDF.Online.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="inputInfopathData"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of OperationResponse</returns>
        public Muhimbi.PDF.Online.Client.Client.ApiResponse<OperationResponse> ConvertInfopathWithHttpInfo(ConvertInfopathData inputInfopathData, int operationIndex = 0)
        {
            // verify the required parameter 'inputInfopathData' is set
            if (inputInfopathData == null)
            {
                throw new Muhimbi.PDF.Online.Client.Client.ApiException(400, "Missing required parameter 'inputInfopathData' when calling ConvertApi->ConvertInfopath");
            }

            Muhimbi.PDF.Online.Client.Client.RequestOptions localVarRequestOptions = new Muhimbi.PDF.Online.Client.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Muhimbi.PDF.Online.Client.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Muhimbi.PDF.Online.Client.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.Data = inputInfopathData;

            localVarRequestOptions.Operation = "ConvertApi.ConvertInfopath";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (api_key) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("api_key")))
            {
                localVarRequestOptions.HeaderParameters.Add("api_key", this.Configuration.GetApiKeyWithPrefix("api_key"));
            }
            // authentication (oauth2_auth) required
            // oauth required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = this.Client.Post<OperationResponse>("/v1/operations/convert_infopath", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ConvertInfopath", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Convert InfoPath document Convert a InfoPath file to PDF or other format.
        /// </summary>
        /// <exception cref="Muhimbi.PDF.Online.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="inputInfopathData"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of OperationResponse</returns>
        public async System.Threading.Tasks.Task<OperationResponse> ConvertInfopathAsync(ConvertInfopathData inputInfopathData, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Muhimbi.PDF.Online.Client.Client.ApiResponse<OperationResponse> localVarResponse = await ConvertInfopathWithHttpInfoAsync(inputInfopathData, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Convert InfoPath document Convert a InfoPath file to PDF or other format.
        /// </summary>
        /// <exception cref="Muhimbi.PDF.Online.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="inputInfopathData"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (OperationResponse)</returns>
        public async System.Threading.Tasks.Task<Muhimbi.PDF.Online.Client.Client.ApiResponse<OperationResponse>> ConvertInfopathWithHttpInfoAsync(ConvertInfopathData inputInfopathData, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'inputInfopathData' is set
            if (inputInfopathData == null)
            {
                throw new Muhimbi.PDF.Online.Client.Client.ApiException(400, "Missing required parameter 'inputInfopathData' when calling ConvertApi->ConvertInfopath");
            }


            Muhimbi.PDF.Online.Client.Client.RequestOptions localVarRequestOptions = new Muhimbi.PDF.Online.Client.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Muhimbi.PDF.Online.Client.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Muhimbi.PDF.Online.Client.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.Data = inputInfopathData;

            localVarRequestOptions.Operation = "ConvertApi.ConvertInfopath";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (api_key) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("api_key")))
            {
                localVarRequestOptions.HeaderParameters.Add("api_key", this.Configuration.GetApiKeyWithPrefix("api_key"));
            }
            // authentication (oauth2_auth) required
            // oauth required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PostAsync<OperationResponse>("/v1/operations/convert_infopath", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ConvertInfopath", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Convert document to PDF-A Convert a document to PDF-A.
        /// </summary>
        /// <exception cref="Muhimbi.PDF.Online.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="inputPdfData"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>OperationResponse</returns>
        public OperationResponse ConvertPdfa(ConvertPdfaData inputPdfData, int operationIndex = 0)
        {
            Muhimbi.PDF.Online.Client.Client.ApiResponse<OperationResponse> localVarResponse = ConvertPdfaWithHttpInfo(inputPdfData);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Convert document to PDF-A Convert a document to PDF-A.
        /// </summary>
        /// <exception cref="Muhimbi.PDF.Online.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="inputPdfData"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of OperationResponse</returns>
        public Muhimbi.PDF.Online.Client.Client.ApiResponse<OperationResponse> ConvertPdfaWithHttpInfo(ConvertPdfaData inputPdfData, int operationIndex = 0)
        {
            // verify the required parameter 'inputPdfData' is set
            if (inputPdfData == null)
            {
                throw new Muhimbi.PDF.Online.Client.Client.ApiException(400, "Missing required parameter 'inputPdfData' when calling ConvertApi->ConvertPdfa");
            }

            Muhimbi.PDF.Online.Client.Client.RequestOptions localVarRequestOptions = new Muhimbi.PDF.Online.Client.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Muhimbi.PDF.Online.Client.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Muhimbi.PDF.Online.Client.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.Data = inputPdfData;

            localVarRequestOptions.Operation = "ConvertApi.ConvertPdfa";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (api_key) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("api_key")))
            {
                localVarRequestOptions.HeaderParameters.Add("api_key", this.Configuration.GetApiKeyWithPrefix("api_key"));
            }
            // authentication (oauth2_auth) required
            // oauth required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = this.Client.Post<OperationResponse>("/v1/operations/convert_pdfa", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ConvertPdfa", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Convert document to PDF-A Convert a document to PDF-A.
        /// </summary>
        /// <exception cref="Muhimbi.PDF.Online.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="inputPdfData"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of OperationResponse</returns>
        public async System.Threading.Tasks.Task<OperationResponse> ConvertPdfaAsync(ConvertPdfaData inputPdfData, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Muhimbi.PDF.Online.Client.Client.ApiResponse<OperationResponse> localVarResponse = await ConvertPdfaWithHttpInfoAsync(inputPdfData, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Convert document to PDF-A Convert a document to PDF-A.
        /// </summary>
        /// <exception cref="Muhimbi.PDF.Online.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="inputPdfData"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (OperationResponse)</returns>
        public async System.Threading.Tasks.Task<Muhimbi.PDF.Online.Client.Client.ApiResponse<OperationResponse>> ConvertPdfaWithHttpInfoAsync(ConvertPdfaData inputPdfData, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'inputPdfData' is set
            if (inputPdfData == null)
            {
                throw new Muhimbi.PDF.Online.Client.Client.ApiException(400, "Missing required parameter 'inputPdfData' when calling ConvertApi->ConvertPdfa");
            }


            Muhimbi.PDF.Online.Client.Client.RequestOptions localVarRequestOptions = new Muhimbi.PDF.Online.Client.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Muhimbi.PDF.Online.Client.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Muhimbi.PDF.Online.Client.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.Data = inputPdfData;

            localVarRequestOptions.Operation = "ConvertApi.ConvertPdfa";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (api_key) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("api_key")))
            {
                localVarRequestOptions.HeaderParameters.Add("api_key", this.Configuration.GetApiKeyWithPrefix("api_key"));
            }
            // authentication (oauth2_auth) required
            // oauth required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PostAsync<OperationResponse>("/v1/operations/convert_pdfa", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ConvertPdfa", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Convert PowerPoint document Convert a PowerPoint document to PDF or other format.
        /// </summary>
        /// <exception cref="Muhimbi.PDF.Online.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="inputPowerpointData"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>OperationResponse</returns>
        public OperationResponse ConvertPowerpoint(ConvertPowerpointData inputPowerpointData, int operationIndex = 0)
        {
            Muhimbi.PDF.Online.Client.Client.ApiResponse<OperationResponse> localVarResponse = ConvertPowerpointWithHttpInfo(inputPowerpointData);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Convert PowerPoint document Convert a PowerPoint document to PDF or other format.
        /// </summary>
        /// <exception cref="Muhimbi.PDF.Online.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="inputPowerpointData"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of OperationResponse</returns>
        public Muhimbi.PDF.Online.Client.Client.ApiResponse<OperationResponse> ConvertPowerpointWithHttpInfo(ConvertPowerpointData inputPowerpointData, int operationIndex = 0)
        {
            // verify the required parameter 'inputPowerpointData' is set
            if (inputPowerpointData == null)
            {
                throw new Muhimbi.PDF.Online.Client.Client.ApiException(400, "Missing required parameter 'inputPowerpointData' when calling ConvertApi->ConvertPowerpoint");
            }

            Muhimbi.PDF.Online.Client.Client.RequestOptions localVarRequestOptions = new Muhimbi.PDF.Online.Client.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Muhimbi.PDF.Online.Client.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Muhimbi.PDF.Online.Client.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.Data = inputPowerpointData;

            localVarRequestOptions.Operation = "ConvertApi.ConvertPowerpoint";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (api_key) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("api_key")))
            {
                localVarRequestOptions.HeaderParameters.Add("api_key", this.Configuration.GetApiKeyWithPrefix("api_key"));
            }
            // authentication (oauth2_auth) required
            // oauth required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = this.Client.Post<OperationResponse>("/v1/operations/convert_powerpoint", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ConvertPowerpoint", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Convert PowerPoint document Convert a PowerPoint document to PDF or other format.
        /// </summary>
        /// <exception cref="Muhimbi.PDF.Online.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="inputPowerpointData"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of OperationResponse</returns>
        public async System.Threading.Tasks.Task<OperationResponse> ConvertPowerpointAsync(ConvertPowerpointData inputPowerpointData, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Muhimbi.PDF.Online.Client.Client.ApiResponse<OperationResponse> localVarResponse = await ConvertPowerpointWithHttpInfoAsync(inputPowerpointData, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Convert PowerPoint document Convert a PowerPoint document to PDF or other format.
        /// </summary>
        /// <exception cref="Muhimbi.PDF.Online.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="inputPowerpointData"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (OperationResponse)</returns>
        public async System.Threading.Tasks.Task<Muhimbi.PDF.Online.Client.Client.ApiResponse<OperationResponse>> ConvertPowerpointWithHttpInfoAsync(ConvertPowerpointData inputPowerpointData, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'inputPowerpointData' is set
            if (inputPowerpointData == null)
            {
                throw new Muhimbi.PDF.Online.Client.Client.ApiException(400, "Missing required parameter 'inputPowerpointData' when calling ConvertApi->ConvertPowerpoint");
            }


            Muhimbi.PDF.Online.Client.Client.RequestOptions localVarRequestOptions = new Muhimbi.PDF.Online.Client.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Muhimbi.PDF.Online.Client.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Muhimbi.PDF.Online.Client.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.Data = inputPowerpointData;

            localVarRequestOptions.Operation = "ConvertApi.ConvertPowerpoint";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (api_key) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("api_key")))
            {
                localVarRequestOptions.HeaderParameters.Add("api_key", this.Configuration.GetApiKeyWithPrefix("api_key"));
            }
            // authentication (oauth2_auth) required
            // oauth required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PostAsync<OperationResponse>("/v1/operations/convert_powerpoint", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ConvertPowerpoint", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Convert Visio document Convert a Visio document to PDF or XPS.
        /// </summary>
        /// <exception cref="Muhimbi.PDF.Online.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="inputVisioData"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>OperationResponse</returns>
        public OperationResponse ConvertVisio(ConvertVisioData inputVisioData, int operationIndex = 0)
        {
            Muhimbi.PDF.Online.Client.Client.ApiResponse<OperationResponse> localVarResponse = ConvertVisioWithHttpInfo(inputVisioData);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Convert Visio document Convert a Visio document to PDF or XPS.
        /// </summary>
        /// <exception cref="Muhimbi.PDF.Online.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="inputVisioData"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of OperationResponse</returns>
        public Muhimbi.PDF.Online.Client.Client.ApiResponse<OperationResponse> ConvertVisioWithHttpInfo(ConvertVisioData inputVisioData, int operationIndex = 0)
        {
            // verify the required parameter 'inputVisioData' is set
            if (inputVisioData == null)
            {
                throw new Muhimbi.PDF.Online.Client.Client.ApiException(400, "Missing required parameter 'inputVisioData' when calling ConvertApi->ConvertVisio");
            }

            Muhimbi.PDF.Online.Client.Client.RequestOptions localVarRequestOptions = new Muhimbi.PDF.Online.Client.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Muhimbi.PDF.Online.Client.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Muhimbi.PDF.Online.Client.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.Data = inputVisioData;

            localVarRequestOptions.Operation = "ConvertApi.ConvertVisio";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (api_key) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("api_key")))
            {
                localVarRequestOptions.HeaderParameters.Add("api_key", this.Configuration.GetApiKeyWithPrefix("api_key"));
            }
            // authentication (oauth2_auth) required
            // oauth required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = this.Client.Post<OperationResponse>("/v1/operations/convert_visio", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ConvertVisio", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Convert Visio document Convert a Visio document to PDF or XPS.
        /// </summary>
        /// <exception cref="Muhimbi.PDF.Online.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="inputVisioData"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of OperationResponse</returns>
        public async System.Threading.Tasks.Task<OperationResponse> ConvertVisioAsync(ConvertVisioData inputVisioData, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Muhimbi.PDF.Online.Client.Client.ApiResponse<OperationResponse> localVarResponse = await ConvertVisioWithHttpInfoAsync(inputVisioData, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Convert Visio document Convert a Visio document to PDF or XPS.
        /// </summary>
        /// <exception cref="Muhimbi.PDF.Online.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="inputVisioData"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (OperationResponse)</returns>
        public async System.Threading.Tasks.Task<Muhimbi.PDF.Online.Client.Client.ApiResponse<OperationResponse>> ConvertVisioWithHttpInfoAsync(ConvertVisioData inputVisioData, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'inputVisioData' is set
            if (inputVisioData == null)
            {
                throw new Muhimbi.PDF.Online.Client.Client.ApiException(400, "Missing required parameter 'inputVisioData' when calling ConvertApi->ConvertVisio");
            }


            Muhimbi.PDF.Online.Client.Client.RequestOptions localVarRequestOptions = new Muhimbi.PDF.Online.Client.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Muhimbi.PDF.Online.Client.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Muhimbi.PDF.Online.Client.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.Data = inputVisioData;

            localVarRequestOptions.Operation = "ConvertApi.ConvertVisio";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (api_key) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("api_key")))
            {
                localVarRequestOptions.HeaderParameters.Add("api_key", this.Configuration.GetApiKeyWithPrefix("api_key"));
            }
            // authentication (oauth2_auth) required
            // oauth required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PostAsync<OperationResponse>("/v1/operations/convert_visio", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ConvertVisio", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Convert Word document Convert a Word document to PDF or other format.
        /// </summary>
        /// <exception cref="Muhimbi.PDF.Online.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="inputWordData"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>OperationResponse</returns>
        public OperationResponse ConvertWord(ConvertWordData inputWordData, int operationIndex = 0)
        {
            Muhimbi.PDF.Online.Client.Client.ApiResponse<OperationResponse> localVarResponse = ConvertWordWithHttpInfo(inputWordData);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Convert Word document Convert a Word document to PDF or other format.
        /// </summary>
        /// <exception cref="Muhimbi.PDF.Online.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="inputWordData"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of OperationResponse</returns>
        public Muhimbi.PDF.Online.Client.Client.ApiResponse<OperationResponse> ConvertWordWithHttpInfo(ConvertWordData inputWordData, int operationIndex = 0)
        {
            // verify the required parameter 'inputWordData' is set
            if (inputWordData == null)
            {
                throw new Muhimbi.PDF.Online.Client.Client.ApiException(400, "Missing required parameter 'inputWordData' when calling ConvertApi->ConvertWord");
            }

            Muhimbi.PDF.Online.Client.Client.RequestOptions localVarRequestOptions = new Muhimbi.PDF.Online.Client.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Muhimbi.PDF.Online.Client.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Muhimbi.PDF.Online.Client.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.Data = inputWordData;

            localVarRequestOptions.Operation = "ConvertApi.ConvertWord";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (api_key) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("api_key")))
            {
                localVarRequestOptions.HeaderParameters.Add("api_key", this.Configuration.GetApiKeyWithPrefix("api_key"));
            }
            // authentication (oauth2_auth) required
            // oauth required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = this.Client.Post<OperationResponse>("/v1/operations/convert_word", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ConvertWord", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Convert Word document Convert a Word document to PDF or other format.
        /// </summary>
        /// <exception cref="Muhimbi.PDF.Online.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="inputWordData"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of OperationResponse</returns>
        public async System.Threading.Tasks.Task<OperationResponse> ConvertWordAsync(ConvertWordData inputWordData, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Muhimbi.PDF.Online.Client.Client.ApiResponse<OperationResponse> localVarResponse = await ConvertWordWithHttpInfoAsync(inputWordData, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Convert Word document Convert a Word document to PDF or other format.
        /// </summary>
        /// <exception cref="Muhimbi.PDF.Online.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="inputWordData"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (OperationResponse)</returns>
        public async System.Threading.Tasks.Task<Muhimbi.PDF.Online.Client.Client.ApiResponse<OperationResponse>> ConvertWordWithHttpInfoAsync(ConvertWordData inputWordData, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'inputWordData' is set
            if (inputWordData == null)
            {
                throw new Muhimbi.PDF.Online.Client.Client.ApiException(400, "Missing required parameter 'inputWordData' when calling ConvertApi->ConvertWord");
            }


            Muhimbi.PDF.Online.Client.Client.RequestOptions localVarRequestOptions = new Muhimbi.PDF.Online.Client.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Muhimbi.PDF.Online.Client.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Muhimbi.PDF.Online.Client.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.Data = inputWordData;

            localVarRequestOptions.Operation = "ConvertApi.ConvertWord";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (api_key) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("api_key")))
            {
                localVarRequestOptions.HeaderParameters.Add("api_key", this.Configuration.GetApiKeyWithPrefix("api_key"));
            }
            // authentication (oauth2_auth) required
            // oauth required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PostAsync<OperationResponse>("/v1/operations/convert_word", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ConvertWord", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Export PDF Forms Data Convert data from a PDF Form to XML, FDF or XFDF.
        /// </summary>
        /// <exception cref="Muhimbi.PDF.Online.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="inputFromPdfData"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>OperationResponse</returns>
        public OperationResponse ExportFormData(ExportFormData inputFromPdfData, int operationIndex = 0)
        {
            Muhimbi.PDF.Online.Client.Client.ApiResponse<OperationResponse> localVarResponse = ExportFormDataWithHttpInfo(inputFromPdfData);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Export PDF Forms Data Convert data from a PDF Form to XML, FDF or XFDF.
        /// </summary>
        /// <exception cref="Muhimbi.PDF.Online.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="inputFromPdfData"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of OperationResponse</returns>
        public Muhimbi.PDF.Online.Client.Client.ApiResponse<OperationResponse> ExportFormDataWithHttpInfo(ExportFormData inputFromPdfData, int operationIndex = 0)
        {
            // verify the required parameter 'inputFromPdfData' is set
            if (inputFromPdfData == null)
            {
                throw new Muhimbi.PDF.Online.Client.Client.ApiException(400, "Missing required parameter 'inputFromPdfData' when calling ConvertApi->ExportFormData");
            }

            Muhimbi.PDF.Online.Client.Client.RequestOptions localVarRequestOptions = new Muhimbi.PDF.Online.Client.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Muhimbi.PDF.Online.Client.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Muhimbi.PDF.Online.Client.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.Data = inputFromPdfData;

            localVarRequestOptions.Operation = "ConvertApi.ExportFormData";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (api_key) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("api_key")))
            {
                localVarRequestOptions.HeaderParameters.Add("api_key", this.Configuration.GetApiKeyWithPrefix("api_key"));
            }
            // authentication (oauth2_auth) required
            // oauth required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = this.Client.Post<OperationResponse>("/v1/operations/export_form_data", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ExportFormData", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Export PDF Forms Data Convert data from a PDF Form to XML, FDF or XFDF.
        /// </summary>
        /// <exception cref="Muhimbi.PDF.Online.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="inputFromPdfData"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of OperationResponse</returns>
        public async System.Threading.Tasks.Task<OperationResponse> ExportFormDataAsync(ExportFormData inputFromPdfData, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Muhimbi.PDF.Online.Client.Client.ApiResponse<OperationResponse> localVarResponse = await ExportFormDataWithHttpInfoAsync(inputFromPdfData, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Export PDF Forms Data Convert data from a PDF Form to XML, FDF or XFDF.
        /// </summary>
        /// <exception cref="Muhimbi.PDF.Online.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="inputFromPdfData"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (OperationResponse)</returns>
        public async System.Threading.Tasks.Task<Muhimbi.PDF.Online.Client.Client.ApiResponse<OperationResponse>> ExportFormDataWithHttpInfoAsync(ExportFormData inputFromPdfData, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'inputFromPdfData' is set
            if (inputFromPdfData == null)
            {
                throw new Muhimbi.PDF.Online.Client.Client.ApiException(400, "Missing required parameter 'inputFromPdfData' when calling ConvertApi->ExportFormData");
            }


            Muhimbi.PDF.Online.Client.Client.RequestOptions localVarRequestOptions = new Muhimbi.PDF.Online.Client.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Muhimbi.PDF.Online.Client.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Muhimbi.PDF.Online.Client.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.Data = inputFromPdfData;

            localVarRequestOptions.Operation = "ConvertApi.ExportFormData";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (api_key) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("api_key")))
            {
                localVarRequestOptions.HeaderParameters.Add("api_key", this.Configuration.GetApiKeyWithPrefix("api_key"));
            }
            // authentication (oauth2_auth) required
            // oauth required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PostAsync<OperationResponse>("/v1/operations/export_form_data", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ExportFormData", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Import PDF Forms data Import PDF Forms data.
        /// </summary>
        /// <exception cref="Muhimbi.PDF.Online.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="inputXmlData"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>OperationResponse</returns>
        public OperationResponse ImportFormData(ImportFormData inputXmlData, int operationIndex = 0)
        {
            Muhimbi.PDF.Online.Client.Client.ApiResponse<OperationResponse> localVarResponse = ImportFormDataWithHttpInfo(inputXmlData);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Import PDF Forms data Import PDF Forms data.
        /// </summary>
        /// <exception cref="Muhimbi.PDF.Online.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="inputXmlData"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of OperationResponse</returns>
        public Muhimbi.PDF.Online.Client.Client.ApiResponse<OperationResponse> ImportFormDataWithHttpInfo(ImportFormData inputXmlData, int operationIndex = 0)
        {
            // verify the required parameter 'inputXmlData' is set
            if (inputXmlData == null)
            {
                throw new Muhimbi.PDF.Online.Client.Client.ApiException(400, "Missing required parameter 'inputXmlData' when calling ConvertApi->ImportFormData");
            }

            Muhimbi.PDF.Online.Client.Client.RequestOptions localVarRequestOptions = new Muhimbi.PDF.Online.Client.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Muhimbi.PDF.Online.Client.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Muhimbi.PDF.Online.Client.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.Data = inputXmlData;

            localVarRequestOptions.Operation = "ConvertApi.ImportFormData";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (api_key) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("api_key")))
            {
                localVarRequestOptions.HeaderParameters.Add("api_key", this.Configuration.GetApiKeyWithPrefix("api_key"));
            }
            // authentication (oauth2_auth) required
            // oauth required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = this.Client.Post<OperationResponse>("/v1/operations/import_form_data", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ImportFormData", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Import PDF Forms data Import PDF Forms data.
        /// </summary>
        /// <exception cref="Muhimbi.PDF.Online.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="inputXmlData"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of OperationResponse</returns>
        public async System.Threading.Tasks.Task<OperationResponse> ImportFormDataAsync(ImportFormData inputXmlData, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Muhimbi.PDF.Online.Client.Client.ApiResponse<OperationResponse> localVarResponse = await ImportFormDataWithHttpInfoAsync(inputXmlData, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Import PDF Forms data Import PDF Forms data.
        /// </summary>
        /// <exception cref="Muhimbi.PDF.Online.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="inputXmlData"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (OperationResponse)</returns>
        public async System.Threading.Tasks.Task<Muhimbi.PDF.Online.Client.Client.ApiResponse<OperationResponse>> ImportFormDataWithHttpInfoAsync(ImportFormData inputXmlData, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'inputXmlData' is set
            if (inputXmlData == null)
            {
                throw new Muhimbi.PDF.Online.Client.Client.ApiException(400, "Missing required parameter 'inputXmlData' when calling ConvertApi->ImportFormData");
            }


            Muhimbi.PDF.Online.Client.Client.RequestOptions localVarRequestOptions = new Muhimbi.PDF.Online.Client.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Muhimbi.PDF.Online.Client.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Muhimbi.PDF.Online.Client.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.Data = inputXmlData;

            localVarRequestOptions.Operation = "ConvertApi.ImportFormData";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (api_key) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("api_key")))
            {
                localVarRequestOptions.HeaderParameters.Add("api_key", this.Configuration.GetApiKeyWithPrefix("api_key"));
            }
            // authentication (oauth2_auth) required
            // oauth required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PostAsync<OperationResponse>("/v1/operations/import_form_data", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ImportFormData", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

    }
}
