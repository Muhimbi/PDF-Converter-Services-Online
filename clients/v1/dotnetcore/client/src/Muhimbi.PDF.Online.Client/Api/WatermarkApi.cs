/*
 * Muhimbi PDF
 *
 * Convert, Merge, Watermark, Secure and OCR files.
 *
 * The version of the OpenAPI document: 9.16
 * Contact: support@muhimbi.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.Net;
using System.Net.Mime;
using Muhimbi.PDF.Online.Client.Client;
using Muhimbi.PDF.Online.Client.Model;

namespace Muhimbi.PDF.Online.Client.Api
{

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IWatermarkApiSync : IApiAccessor
    {
        #region Synchronous Operations
        /// <summary>
        /// Add composite watermark
        /// </summary>
        /// <remarks>
        /// Add a complex watermark to a PDF file.
        /// </remarks>
        /// <exception cref="Muhimbi.PDF.Online.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="inputData"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>OperationResponse</returns>
        OperationResponse CompositeWatermark(CompositeWatermarkData inputData, int operationIndex = 0);

        /// <summary>
        /// Add composite watermark
        /// </summary>
        /// <remarks>
        /// Add a complex watermark to a PDF file.
        /// </remarks>
        /// <exception cref="Muhimbi.PDF.Online.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="inputData"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of OperationResponse</returns>
        ApiResponse<OperationResponse> CompositeWatermarkWithHttpInfo(CompositeWatermarkData inputData, int operationIndex = 0);
        /// <summary>
        /// Add ellipse watermark
        /// </summary>
        /// <remarks>
        /// Add an ellipse watermark to a PDF file.
        /// </remarks>
        /// <exception cref="Muhimbi.PDF.Online.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="inputData"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>OperationResponse</returns>
        OperationResponse EllipseWatermark(EllipseWatermarkData inputData, int operationIndex = 0);

        /// <summary>
        /// Add ellipse watermark
        /// </summary>
        /// <remarks>
        /// Add an ellipse watermark to a PDF file.
        /// </remarks>
        /// <exception cref="Muhimbi.PDF.Online.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="inputData"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of OperationResponse</returns>
        ApiResponse<OperationResponse> EllipseWatermarkWithHttpInfo(EllipseWatermarkData inputData, int operationIndex = 0);
        /// <summary>
        /// Add image watermark
        /// </summary>
        /// <remarks>
        /// Add an image based watermark to a PDF file.
        /// </remarks>
        /// <exception cref="Muhimbi.PDF.Online.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="inputData"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>OperationResponse</returns>
        OperationResponse ImageWatermark(ImageWatermarkData inputData, int operationIndex = 0);

        /// <summary>
        /// Add image watermark
        /// </summary>
        /// <remarks>
        /// Add an image based watermark to a PDF file.
        /// </remarks>
        /// <exception cref="Muhimbi.PDF.Online.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="inputData"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of OperationResponse</returns>
        ApiResponse<OperationResponse> ImageWatermarkWithHttpInfo(ImageWatermarkData inputData, int operationIndex = 0);
        /// <summary>
        /// Add line watermark
        /// </summary>
        /// <remarks>
        /// Add a line watermark to a PDF file.
        /// </remarks>
        /// <exception cref="Muhimbi.PDF.Online.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="inputData"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>OperationResponse</returns>
        OperationResponse LineWatermark(LineWatermarkData inputData, int operationIndex = 0);

        /// <summary>
        /// Add line watermark
        /// </summary>
        /// <remarks>
        /// Add a line watermark to a PDF file.
        /// </remarks>
        /// <exception cref="Muhimbi.PDF.Online.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="inputData"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of OperationResponse</returns>
        ApiResponse<OperationResponse> LineWatermarkWithHttpInfo(LineWatermarkData inputData, int operationIndex = 0);
        /// <summary>
        /// Add Linear Barcode watermark
        /// </summary>
        /// <remarks>
        /// Add a Linear Barcode watermark to a PDF file.
        /// </remarks>
        /// <exception cref="Muhimbi.PDF.Online.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="inputData"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>OperationResponse</returns>
        OperationResponse LinearBarcodeWatermark(LinearBarcodeWatermarkData inputData, int operationIndex = 0);

        /// <summary>
        /// Add Linear Barcode watermark
        /// </summary>
        /// <remarks>
        /// Add a Linear Barcode watermark to a PDF file.
        /// </remarks>
        /// <exception cref="Muhimbi.PDF.Online.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="inputData"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of OperationResponse</returns>
        ApiResponse<OperationResponse> LinearBarcodeWatermarkWithHttpInfo(LinearBarcodeWatermarkData inputData, int operationIndex = 0);
        /// <summary>
        /// Add PDF watermark
        /// </summary>
        /// <remarks>
        /// Add a PDF based watermark to a PDF file.
        /// </remarks>
        /// <exception cref="Muhimbi.PDF.Online.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="inputData"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>OperationResponse</returns>
        OperationResponse PdfWatermark(PdfWatermarkData inputData, int operationIndex = 0);

        /// <summary>
        /// Add PDF watermark
        /// </summary>
        /// <remarks>
        /// Add a PDF based watermark to a PDF file.
        /// </remarks>
        /// <exception cref="Muhimbi.PDF.Online.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="inputData"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of OperationResponse</returns>
        ApiResponse<OperationResponse> PdfWatermarkWithHttpInfo(PdfWatermarkData inputData, int operationIndex = 0);
        /// <summary>
        /// Add QR Code watermark
        /// </summary>
        /// <remarks>
        /// Add a QR Code watermark to a PDF file.
        /// </remarks>
        /// <exception cref="Muhimbi.PDF.Online.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="inputData"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>OperationResponse</returns>
        OperationResponse QrCodeWatermark(QrCodeWatermarkData inputData, int operationIndex = 0);

        /// <summary>
        /// Add QR Code watermark
        /// </summary>
        /// <remarks>
        /// Add a QR Code watermark to a PDF file.
        /// </remarks>
        /// <exception cref="Muhimbi.PDF.Online.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="inputData"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of OperationResponse</returns>
        ApiResponse<OperationResponse> QrCodeWatermarkWithHttpInfo(QrCodeWatermarkData inputData, int operationIndex = 0);
        /// <summary>
        /// Add rectangle watermark
        /// </summary>
        /// <remarks>
        /// Add a rectangle watermark to a PDF file.
        /// </remarks>
        /// <exception cref="Muhimbi.PDF.Online.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="inputData"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>OperationResponse</returns>
        OperationResponse RectangleWatermark(RectangleWatermarkData inputData, int operationIndex = 0);

        /// <summary>
        /// Add rectangle watermark
        /// </summary>
        /// <remarks>
        /// Add a rectangle watermark to a PDF file.
        /// </remarks>
        /// <exception cref="Muhimbi.PDF.Online.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="inputData"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of OperationResponse</returns>
        ApiResponse<OperationResponse> RectangleWatermarkWithHttpInfo(RectangleWatermarkData inputData, int operationIndex = 0);
        /// <summary>
        /// Add RTF watermark
        /// </summary>
        /// <remarks>
        /// Add a rich-text watermark to a PDF file.
        /// </remarks>
        /// <exception cref="Muhimbi.PDF.Online.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="inputData"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>OperationResponse</returns>
        OperationResponse RtfWatermark(RtfWatermarkData inputData, int operationIndex = 0);

        /// <summary>
        /// Add RTF watermark
        /// </summary>
        /// <remarks>
        /// Add a rich-text watermark to a PDF file.
        /// </remarks>
        /// <exception cref="Muhimbi.PDF.Online.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="inputData"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of OperationResponse</returns>
        ApiResponse<OperationResponse> RtfWatermarkWithHttpInfo(RtfWatermarkData inputData, int operationIndex = 0);
        /// <summary>
        /// Add text watermark
        /// </summary>
        /// <remarks>
        /// Add a plain-text watermark to a PDF file.
        /// </remarks>
        /// <exception cref="Muhimbi.PDF.Online.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="inputData"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>OperationResponse</returns>
        OperationResponse TextWatermark(TextWatermarkData inputData, int operationIndex = 0);

        /// <summary>
        /// Add text watermark
        /// </summary>
        /// <remarks>
        /// Add a plain-text watermark to a PDF file.
        /// </remarks>
        /// <exception cref="Muhimbi.PDF.Online.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="inputData"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of OperationResponse</returns>
        ApiResponse<OperationResponse> TextWatermarkWithHttpInfo(TextWatermarkData inputData, int operationIndex = 0);
        #endregion Synchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IWatermarkApiAsync : IApiAccessor
    {
        #region Asynchronous Operations
        /// <summary>
        /// Add composite watermark
        /// </summary>
        /// <remarks>
        /// Add a complex watermark to a PDF file.
        /// </remarks>
        /// <exception cref="Muhimbi.PDF.Online.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="inputData"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of OperationResponse</returns>
        System.Threading.Tasks.Task<OperationResponse> CompositeWatermarkAsync(CompositeWatermarkData inputData, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Add composite watermark
        /// </summary>
        /// <remarks>
        /// Add a complex watermark to a PDF file.
        /// </remarks>
        /// <exception cref="Muhimbi.PDF.Online.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="inputData"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (OperationResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<OperationResponse>> CompositeWatermarkWithHttpInfoAsync(CompositeWatermarkData inputData, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Add ellipse watermark
        /// </summary>
        /// <remarks>
        /// Add an ellipse watermark to a PDF file.
        /// </remarks>
        /// <exception cref="Muhimbi.PDF.Online.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="inputData"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of OperationResponse</returns>
        System.Threading.Tasks.Task<OperationResponse> EllipseWatermarkAsync(EllipseWatermarkData inputData, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Add ellipse watermark
        /// </summary>
        /// <remarks>
        /// Add an ellipse watermark to a PDF file.
        /// </remarks>
        /// <exception cref="Muhimbi.PDF.Online.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="inputData"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (OperationResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<OperationResponse>> EllipseWatermarkWithHttpInfoAsync(EllipseWatermarkData inputData, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Add image watermark
        /// </summary>
        /// <remarks>
        /// Add an image based watermark to a PDF file.
        /// </remarks>
        /// <exception cref="Muhimbi.PDF.Online.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="inputData"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of OperationResponse</returns>
        System.Threading.Tasks.Task<OperationResponse> ImageWatermarkAsync(ImageWatermarkData inputData, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Add image watermark
        /// </summary>
        /// <remarks>
        /// Add an image based watermark to a PDF file.
        /// </remarks>
        /// <exception cref="Muhimbi.PDF.Online.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="inputData"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (OperationResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<OperationResponse>> ImageWatermarkWithHttpInfoAsync(ImageWatermarkData inputData, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Add line watermark
        /// </summary>
        /// <remarks>
        /// Add a line watermark to a PDF file.
        /// </remarks>
        /// <exception cref="Muhimbi.PDF.Online.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="inputData"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of OperationResponse</returns>
        System.Threading.Tasks.Task<OperationResponse> LineWatermarkAsync(LineWatermarkData inputData, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Add line watermark
        /// </summary>
        /// <remarks>
        /// Add a line watermark to a PDF file.
        /// </remarks>
        /// <exception cref="Muhimbi.PDF.Online.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="inputData"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (OperationResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<OperationResponse>> LineWatermarkWithHttpInfoAsync(LineWatermarkData inputData, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Add Linear Barcode watermark
        /// </summary>
        /// <remarks>
        /// Add a Linear Barcode watermark to a PDF file.
        /// </remarks>
        /// <exception cref="Muhimbi.PDF.Online.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="inputData"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of OperationResponse</returns>
        System.Threading.Tasks.Task<OperationResponse> LinearBarcodeWatermarkAsync(LinearBarcodeWatermarkData inputData, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Add Linear Barcode watermark
        /// </summary>
        /// <remarks>
        /// Add a Linear Barcode watermark to a PDF file.
        /// </remarks>
        /// <exception cref="Muhimbi.PDF.Online.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="inputData"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (OperationResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<OperationResponse>> LinearBarcodeWatermarkWithHttpInfoAsync(LinearBarcodeWatermarkData inputData, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Add PDF watermark
        /// </summary>
        /// <remarks>
        /// Add a PDF based watermark to a PDF file.
        /// </remarks>
        /// <exception cref="Muhimbi.PDF.Online.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="inputData"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of OperationResponse</returns>
        System.Threading.Tasks.Task<OperationResponse> PdfWatermarkAsync(PdfWatermarkData inputData, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Add PDF watermark
        /// </summary>
        /// <remarks>
        /// Add a PDF based watermark to a PDF file.
        /// </remarks>
        /// <exception cref="Muhimbi.PDF.Online.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="inputData"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (OperationResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<OperationResponse>> PdfWatermarkWithHttpInfoAsync(PdfWatermarkData inputData, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Add QR Code watermark
        /// </summary>
        /// <remarks>
        /// Add a QR Code watermark to a PDF file.
        /// </remarks>
        /// <exception cref="Muhimbi.PDF.Online.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="inputData"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of OperationResponse</returns>
        System.Threading.Tasks.Task<OperationResponse> QrCodeWatermarkAsync(QrCodeWatermarkData inputData, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Add QR Code watermark
        /// </summary>
        /// <remarks>
        /// Add a QR Code watermark to a PDF file.
        /// </remarks>
        /// <exception cref="Muhimbi.PDF.Online.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="inputData"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (OperationResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<OperationResponse>> QrCodeWatermarkWithHttpInfoAsync(QrCodeWatermarkData inputData, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Add rectangle watermark
        /// </summary>
        /// <remarks>
        /// Add a rectangle watermark to a PDF file.
        /// </remarks>
        /// <exception cref="Muhimbi.PDF.Online.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="inputData"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of OperationResponse</returns>
        System.Threading.Tasks.Task<OperationResponse> RectangleWatermarkAsync(RectangleWatermarkData inputData, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Add rectangle watermark
        /// </summary>
        /// <remarks>
        /// Add a rectangle watermark to a PDF file.
        /// </remarks>
        /// <exception cref="Muhimbi.PDF.Online.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="inputData"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (OperationResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<OperationResponse>> RectangleWatermarkWithHttpInfoAsync(RectangleWatermarkData inputData, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Add RTF watermark
        /// </summary>
        /// <remarks>
        /// Add a rich-text watermark to a PDF file.
        /// </remarks>
        /// <exception cref="Muhimbi.PDF.Online.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="inputData"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of OperationResponse</returns>
        System.Threading.Tasks.Task<OperationResponse> RtfWatermarkAsync(RtfWatermarkData inputData, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Add RTF watermark
        /// </summary>
        /// <remarks>
        /// Add a rich-text watermark to a PDF file.
        /// </remarks>
        /// <exception cref="Muhimbi.PDF.Online.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="inputData"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (OperationResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<OperationResponse>> RtfWatermarkWithHttpInfoAsync(RtfWatermarkData inputData, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Add text watermark
        /// </summary>
        /// <remarks>
        /// Add a plain-text watermark to a PDF file.
        /// </remarks>
        /// <exception cref="Muhimbi.PDF.Online.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="inputData"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of OperationResponse</returns>
        System.Threading.Tasks.Task<OperationResponse> TextWatermarkAsync(TextWatermarkData inputData, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Add text watermark
        /// </summary>
        /// <remarks>
        /// Add a plain-text watermark to a PDF file.
        /// </remarks>
        /// <exception cref="Muhimbi.PDF.Online.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="inputData"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (OperationResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<OperationResponse>> TextWatermarkWithHttpInfoAsync(TextWatermarkData inputData, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        #endregion Asynchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IWatermarkApi : IWatermarkApiSync, IWatermarkApiAsync
    {

    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public partial class WatermarkApi : IWatermarkApi
    {
        private Muhimbi.PDF.Online.Client.Client.ExceptionFactory _exceptionFactory = (name, response) => null;

        /// <summary>
        /// Initializes a new instance of the <see cref="WatermarkApi"/> class.
        /// </summary>
        /// <returns></returns>
        public WatermarkApi() : this((string)null)
        {
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="WatermarkApi"/> class.
        /// </summary>
        /// <returns></returns>
        public WatermarkApi(string basePath)
        {
            this.Configuration = Muhimbi.PDF.Online.Client.Client.Configuration.MergeConfigurations(
                Muhimbi.PDF.Online.Client.Client.GlobalConfiguration.Instance,
                new Muhimbi.PDF.Online.Client.Client.Configuration { BasePath = basePath }
            );
            this.Client = new Muhimbi.PDF.Online.Client.Client.ApiClient(this.Configuration.BasePath);
            this.AsynchronousClient = new Muhimbi.PDF.Online.Client.Client.ApiClient(this.Configuration.BasePath);
            this.ExceptionFactory = Muhimbi.PDF.Online.Client.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="WatermarkApi"/> class
        /// using Configuration object
        /// </summary>
        /// <param name="configuration">An instance of Configuration</param>
        /// <returns></returns>
        public WatermarkApi(Muhimbi.PDF.Online.Client.Client.Configuration configuration)
        {
            if (configuration == null) throw new ArgumentNullException("configuration");

            this.Configuration = Muhimbi.PDF.Online.Client.Client.Configuration.MergeConfigurations(
                Muhimbi.PDF.Online.Client.Client.GlobalConfiguration.Instance,
                configuration
            );
            this.Client = new Muhimbi.PDF.Online.Client.Client.ApiClient(this.Configuration.BasePath);
            this.AsynchronousClient = new Muhimbi.PDF.Online.Client.Client.ApiClient(this.Configuration.BasePath);
            ExceptionFactory = Muhimbi.PDF.Online.Client.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="WatermarkApi"/> class
        /// using a Configuration object and client instance.
        /// </summary>
        /// <param name="client">The client interface for synchronous API access.</param>
        /// <param name="asyncClient">The client interface for asynchronous API access.</param>
        /// <param name="configuration">The configuration object.</param>
        public WatermarkApi(Muhimbi.PDF.Online.Client.Client.ISynchronousClient client, Muhimbi.PDF.Online.Client.Client.IAsynchronousClient asyncClient, Muhimbi.PDF.Online.Client.Client.IReadableConfiguration configuration)
        {
            if (client == null) throw new ArgumentNullException("client");
            if (asyncClient == null) throw new ArgumentNullException("asyncClient");
            if (configuration == null) throw new ArgumentNullException("configuration");

            this.Client = client;
            this.AsynchronousClient = asyncClient;
            this.Configuration = configuration;
            this.ExceptionFactory = Muhimbi.PDF.Online.Client.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// The client for accessing this underlying API asynchronously.
        /// </summary>
        public Muhimbi.PDF.Online.Client.Client.IAsynchronousClient AsynchronousClient { get; set; }

        /// <summary>
        /// The client for accessing this underlying API synchronously.
        /// </summary>
        public Muhimbi.PDF.Online.Client.Client.ISynchronousClient Client { get; set; }

        /// <summary>
        /// Gets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        public string GetBasePath()
        {
            return this.Configuration.BasePath;
        }

        /// <summary>
        /// Gets or sets the configuration object
        /// </summary>
        /// <value>An instance of the Configuration</value>
        public Muhimbi.PDF.Online.Client.Client.IReadableConfiguration Configuration { get; set; }

        /// <summary>
        /// Provides a factory method hook for the creation of exceptions.
        /// </summary>
        public Muhimbi.PDF.Online.Client.Client.ExceptionFactory ExceptionFactory
        {
            get
            {
                if (_exceptionFactory != null && _exceptionFactory.GetInvocationList().Length > 1)
                {
                    throw new InvalidOperationException("Multicast delegate for ExceptionFactory is unsupported.");
                }
                return _exceptionFactory;
            }
            set { _exceptionFactory = value; }
        }

        /// <summary>
        /// Add composite watermark Add a complex watermark to a PDF file.
        /// </summary>
        /// <exception cref="Muhimbi.PDF.Online.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="inputData"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>OperationResponse</returns>
        public OperationResponse CompositeWatermark(CompositeWatermarkData inputData, int operationIndex = 0)
        {
            Muhimbi.PDF.Online.Client.Client.ApiResponse<OperationResponse> localVarResponse = CompositeWatermarkWithHttpInfo(inputData);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Add composite watermark Add a complex watermark to a PDF file.
        /// </summary>
        /// <exception cref="Muhimbi.PDF.Online.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="inputData"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of OperationResponse</returns>
        public Muhimbi.PDF.Online.Client.Client.ApiResponse<OperationResponse> CompositeWatermarkWithHttpInfo(CompositeWatermarkData inputData, int operationIndex = 0)
        {
            // verify the required parameter 'inputData' is set
            if (inputData == null)
            {
                throw new Muhimbi.PDF.Online.Client.Client.ApiException(400, "Missing required parameter 'inputData' when calling WatermarkApi->CompositeWatermark");
            }

            Muhimbi.PDF.Online.Client.Client.RequestOptions localVarRequestOptions = new Muhimbi.PDF.Online.Client.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Muhimbi.PDF.Online.Client.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Muhimbi.PDF.Online.Client.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.Data = inputData;

            localVarRequestOptions.Operation = "WatermarkApi.CompositeWatermark";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (api_key) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("api_key")))
            {
                localVarRequestOptions.HeaderParameters.Add("api_key", this.Configuration.GetApiKeyWithPrefix("api_key"));
            }
            // authentication (oauth2_auth) required
            // oauth required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = this.Client.Post<OperationResponse>("/v1/operations/composite_watermark", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("CompositeWatermark", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Add composite watermark Add a complex watermark to a PDF file.
        /// </summary>
        /// <exception cref="Muhimbi.PDF.Online.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="inputData"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of OperationResponse</returns>
        public async System.Threading.Tasks.Task<OperationResponse> CompositeWatermarkAsync(CompositeWatermarkData inputData, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Muhimbi.PDF.Online.Client.Client.ApiResponse<OperationResponse> localVarResponse = await CompositeWatermarkWithHttpInfoAsync(inputData, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Add composite watermark Add a complex watermark to a PDF file.
        /// </summary>
        /// <exception cref="Muhimbi.PDF.Online.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="inputData"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (OperationResponse)</returns>
        public async System.Threading.Tasks.Task<Muhimbi.PDF.Online.Client.Client.ApiResponse<OperationResponse>> CompositeWatermarkWithHttpInfoAsync(CompositeWatermarkData inputData, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'inputData' is set
            if (inputData == null)
            {
                throw new Muhimbi.PDF.Online.Client.Client.ApiException(400, "Missing required parameter 'inputData' when calling WatermarkApi->CompositeWatermark");
            }


            Muhimbi.PDF.Online.Client.Client.RequestOptions localVarRequestOptions = new Muhimbi.PDF.Online.Client.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Muhimbi.PDF.Online.Client.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Muhimbi.PDF.Online.Client.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.Data = inputData;

            localVarRequestOptions.Operation = "WatermarkApi.CompositeWatermark";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (api_key) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("api_key")))
            {
                localVarRequestOptions.HeaderParameters.Add("api_key", this.Configuration.GetApiKeyWithPrefix("api_key"));
            }
            // authentication (oauth2_auth) required
            // oauth required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PostAsync<OperationResponse>("/v1/operations/composite_watermark", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("CompositeWatermark", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Add ellipse watermark Add an ellipse watermark to a PDF file.
        /// </summary>
        /// <exception cref="Muhimbi.PDF.Online.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="inputData"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>OperationResponse</returns>
        public OperationResponse EllipseWatermark(EllipseWatermarkData inputData, int operationIndex = 0)
        {
            Muhimbi.PDF.Online.Client.Client.ApiResponse<OperationResponse> localVarResponse = EllipseWatermarkWithHttpInfo(inputData);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Add ellipse watermark Add an ellipse watermark to a PDF file.
        /// </summary>
        /// <exception cref="Muhimbi.PDF.Online.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="inputData"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of OperationResponse</returns>
        public Muhimbi.PDF.Online.Client.Client.ApiResponse<OperationResponse> EllipseWatermarkWithHttpInfo(EllipseWatermarkData inputData, int operationIndex = 0)
        {
            // verify the required parameter 'inputData' is set
            if (inputData == null)
            {
                throw new Muhimbi.PDF.Online.Client.Client.ApiException(400, "Missing required parameter 'inputData' when calling WatermarkApi->EllipseWatermark");
            }

            Muhimbi.PDF.Online.Client.Client.RequestOptions localVarRequestOptions = new Muhimbi.PDF.Online.Client.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Muhimbi.PDF.Online.Client.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Muhimbi.PDF.Online.Client.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.Data = inputData;

            localVarRequestOptions.Operation = "WatermarkApi.EllipseWatermark";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (api_key) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("api_key")))
            {
                localVarRequestOptions.HeaderParameters.Add("api_key", this.Configuration.GetApiKeyWithPrefix("api_key"));
            }
            // authentication (oauth2_auth) required
            // oauth required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = this.Client.Post<OperationResponse>("/v1/operations/ellipse_watermark", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("EllipseWatermark", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Add ellipse watermark Add an ellipse watermark to a PDF file.
        /// </summary>
        /// <exception cref="Muhimbi.PDF.Online.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="inputData"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of OperationResponse</returns>
        public async System.Threading.Tasks.Task<OperationResponse> EllipseWatermarkAsync(EllipseWatermarkData inputData, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Muhimbi.PDF.Online.Client.Client.ApiResponse<OperationResponse> localVarResponse = await EllipseWatermarkWithHttpInfoAsync(inputData, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Add ellipse watermark Add an ellipse watermark to a PDF file.
        /// </summary>
        /// <exception cref="Muhimbi.PDF.Online.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="inputData"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (OperationResponse)</returns>
        public async System.Threading.Tasks.Task<Muhimbi.PDF.Online.Client.Client.ApiResponse<OperationResponse>> EllipseWatermarkWithHttpInfoAsync(EllipseWatermarkData inputData, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'inputData' is set
            if (inputData == null)
            {
                throw new Muhimbi.PDF.Online.Client.Client.ApiException(400, "Missing required parameter 'inputData' when calling WatermarkApi->EllipseWatermark");
            }


            Muhimbi.PDF.Online.Client.Client.RequestOptions localVarRequestOptions = new Muhimbi.PDF.Online.Client.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Muhimbi.PDF.Online.Client.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Muhimbi.PDF.Online.Client.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.Data = inputData;

            localVarRequestOptions.Operation = "WatermarkApi.EllipseWatermark";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (api_key) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("api_key")))
            {
                localVarRequestOptions.HeaderParameters.Add("api_key", this.Configuration.GetApiKeyWithPrefix("api_key"));
            }
            // authentication (oauth2_auth) required
            // oauth required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PostAsync<OperationResponse>("/v1/operations/ellipse_watermark", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("EllipseWatermark", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Add image watermark Add an image based watermark to a PDF file.
        /// </summary>
        /// <exception cref="Muhimbi.PDF.Online.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="inputData"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>OperationResponse</returns>
        public OperationResponse ImageWatermark(ImageWatermarkData inputData, int operationIndex = 0)
        {
            Muhimbi.PDF.Online.Client.Client.ApiResponse<OperationResponse> localVarResponse = ImageWatermarkWithHttpInfo(inputData);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Add image watermark Add an image based watermark to a PDF file.
        /// </summary>
        /// <exception cref="Muhimbi.PDF.Online.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="inputData"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of OperationResponse</returns>
        public Muhimbi.PDF.Online.Client.Client.ApiResponse<OperationResponse> ImageWatermarkWithHttpInfo(ImageWatermarkData inputData, int operationIndex = 0)
        {
            // verify the required parameter 'inputData' is set
            if (inputData == null)
            {
                throw new Muhimbi.PDF.Online.Client.Client.ApiException(400, "Missing required parameter 'inputData' when calling WatermarkApi->ImageWatermark");
            }

            Muhimbi.PDF.Online.Client.Client.RequestOptions localVarRequestOptions = new Muhimbi.PDF.Online.Client.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Muhimbi.PDF.Online.Client.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Muhimbi.PDF.Online.Client.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.Data = inputData;

            localVarRequestOptions.Operation = "WatermarkApi.ImageWatermark";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (api_key) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("api_key")))
            {
                localVarRequestOptions.HeaderParameters.Add("api_key", this.Configuration.GetApiKeyWithPrefix("api_key"));
            }
            // authentication (oauth2_auth) required
            // oauth required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = this.Client.Post<OperationResponse>("/v1/operations/image_watermark", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ImageWatermark", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Add image watermark Add an image based watermark to a PDF file.
        /// </summary>
        /// <exception cref="Muhimbi.PDF.Online.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="inputData"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of OperationResponse</returns>
        public async System.Threading.Tasks.Task<OperationResponse> ImageWatermarkAsync(ImageWatermarkData inputData, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Muhimbi.PDF.Online.Client.Client.ApiResponse<OperationResponse> localVarResponse = await ImageWatermarkWithHttpInfoAsync(inputData, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Add image watermark Add an image based watermark to a PDF file.
        /// </summary>
        /// <exception cref="Muhimbi.PDF.Online.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="inputData"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (OperationResponse)</returns>
        public async System.Threading.Tasks.Task<Muhimbi.PDF.Online.Client.Client.ApiResponse<OperationResponse>> ImageWatermarkWithHttpInfoAsync(ImageWatermarkData inputData, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'inputData' is set
            if (inputData == null)
            {
                throw new Muhimbi.PDF.Online.Client.Client.ApiException(400, "Missing required parameter 'inputData' when calling WatermarkApi->ImageWatermark");
            }


            Muhimbi.PDF.Online.Client.Client.RequestOptions localVarRequestOptions = new Muhimbi.PDF.Online.Client.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Muhimbi.PDF.Online.Client.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Muhimbi.PDF.Online.Client.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.Data = inputData;

            localVarRequestOptions.Operation = "WatermarkApi.ImageWatermark";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (api_key) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("api_key")))
            {
                localVarRequestOptions.HeaderParameters.Add("api_key", this.Configuration.GetApiKeyWithPrefix("api_key"));
            }
            // authentication (oauth2_auth) required
            // oauth required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PostAsync<OperationResponse>("/v1/operations/image_watermark", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ImageWatermark", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Add line watermark Add a line watermark to a PDF file.
        /// </summary>
        /// <exception cref="Muhimbi.PDF.Online.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="inputData"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>OperationResponse</returns>
        public OperationResponse LineWatermark(LineWatermarkData inputData, int operationIndex = 0)
        {
            Muhimbi.PDF.Online.Client.Client.ApiResponse<OperationResponse> localVarResponse = LineWatermarkWithHttpInfo(inputData);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Add line watermark Add a line watermark to a PDF file.
        /// </summary>
        /// <exception cref="Muhimbi.PDF.Online.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="inputData"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of OperationResponse</returns>
        public Muhimbi.PDF.Online.Client.Client.ApiResponse<OperationResponse> LineWatermarkWithHttpInfo(LineWatermarkData inputData, int operationIndex = 0)
        {
            // verify the required parameter 'inputData' is set
            if (inputData == null)
            {
                throw new Muhimbi.PDF.Online.Client.Client.ApiException(400, "Missing required parameter 'inputData' when calling WatermarkApi->LineWatermark");
            }

            Muhimbi.PDF.Online.Client.Client.RequestOptions localVarRequestOptions = new Muhimbi.PDF.Online.Client.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Muhimbi.PDF.Online.Client.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Muhimbi.PDF.Online.Client.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.Data = inputData;

            localVarRequestOptions.Operation = "WatermarkApi.LineWatermark";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (api_key) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("api_key")))
            {
                localVarRequestOptions.HeaderParameters.Add("api_key", this.Configuration.GetApiKeyWithPrefix("api_key"));
            }
            // authentication (oauth2_auth) required
            // oauth required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = this.Client.Post<OperationResponse>("/v1/operations/line_watermark", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("LineWatermark", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Add line watermark Add a line watermark to a PDF file.
        /// </summary>
        /// <exception cref="Muhimbi.PDF.Online.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="inputData"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of OperationResponse</returns>
        public async System.Threading.Tasks.Task<OperationResponse> LineWatermarkAsync(LineWatermarkData inputData, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Muhimbi.PDF.Online.Client.Client.ApiResponse<OperationResponse> localVarResponse = await LineWatermarkWithHttpInfoAsync(inputData, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Add line watermark Add a line watermark to a PDF file.
        /// </summary>
        /// <exception cref="Muhimbi.PDF.Online.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="inputData"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (OperationResponse)</returns>
        public async System.Threading.Tasks.Task<Muhimbi.PDF.Online.Client.Client.ApiResponse<OperationResponse>> LineWatermarkWithHttpInfoAsync(LineWatermarkData inputData, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'inputData' is set
            if (inputData == null)
            {
                throw new Muhimbi.PDF.Online.Client.Client.ApiException(400, "Missing required parameter 'inputData' when calling WatermarkApi->LineWatermark");
            }


            Muhimbi.PDF.Online.Client.Client.RequestOptions localVarRequestOptions = new Muhimbi.PDF.Online.Client.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Muhimbi.PDF.Online.Client.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Muhimbi.PDF.Online.Client.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.Data = inputData;

            localVarRequestOptions.Operation = "WatermarkApi.LineWatermark";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (api_key) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("api_key")))
            {
                localVarRequestOptions.HeaderParameters.Add("api_key", this.Configuration.GetApiKeyWithPrefix("api_key"));
            }
            // authentication (oauth2_auth) required
            // oauth required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PostAsync<OperationResponse>("/v1/operations/line_watermark", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("LineWatermark", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Add Linear Barcode watermark Add a Linear Barcode watermark to a PDF file.
        /// </summary>
        /// <exception cref="Muhimbi.PDF.Online.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="inputData"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>OperationResponse</returns>
        public OperationResponse LinearBarcodeWatermark(LinearBarcodeWatermarkData inputData, int operationIndex = 0)
        {
            Muhimbi.PDF.Online.Client.Client.ApiResponse<OperationResponse> localVarResponse = LinearBarcodeWatermarkWithHttpInfo(inputData);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Add Linear Barcode watermark Add a Linear Barcode watermark to a PDF file.
        /// </summary>
        /// <exception cref="Muhimbi.PDF.Online.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="inputData"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of OperationResponse</returns>
        public Muhimbi.PDF.Online.Client.Client.ApiResponse<OperationResponse> LinearBarcodeWatermarkWithHttpInfo(LinearBarcodeWatermarkData inputData, int operationIndex = 0)
        {
            // verify the required parameter 'inputData' is set
            if (inputData == null)
            {
                throw new Muhimbi.PDF.Online.Client.Client.ApiException(400, "Missing required parameter 'inputData' when calling WatermarkApi->LinearBarcodeWatermark");
            }

            Muhimbi.PDF.Online.Client.Client.RequestOptions localVarRequestOptions = new Muhimbi.PDF.Online.Client.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Muhimbi.PDF.Online.Client.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Muhimbi.PDF.Online.Client.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.Data = inputData;

            localVarRequestOptions.Operation = "WatermarkApi.LinearBarcodeWatermark";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (api_key) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("api_key")))
            {
                localVarRequestOptions.HeaderParameters.Add("api_key", this.Configuration.GetApiKeyWithPrefix("api_key"));
            }
            // authentication (oauth2_auth) required
            // oauth required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = this.Client.Post<OperationResponse>("/v1/operations/linear_barcode_watermark", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("LinearBarcodeWatermark", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Add Linear Barcode watermark Add a Linear Barcode watermark to a PDF file.
        /// </summary>
        /// <exception cref="Muhimbi.PDF.Online.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="inputData"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of OperationResponse</returns>
        public async System.Threading.Tasks.Task<OperationResponse> LinearBarcodeWatermarkAsync(LinearBarcodeWatermarkData inputData, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Muhimbi.PDF.Online.Client.Client.ApiResponse<OperationResponse> localVarResponse = await LinearBarcodeWatermarkWithHttpInfoAsync(inputData, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Add Linear Barcode watermark Add a Linear Barcode watermark to a PDF file.
        /// </summary>
        /// <exception cref="Muhimbi.PDF.Online.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="inputData"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (OperationResponse)</returns>
        public async System.Threading.Tasks.Task<Muhimbi.PDF.Online.Client.Client.ApiResponse<OperationResponse>> LinearBarcodeWatermarkWithHttpInfoAsync(LinearBarcodeWatermarkData inputData, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'inputData' is set
            if (inputData == null)
            {
                throw new Muhimbi.PDF.Online.Client.Client.ApiException(400, "Missing required parameter 'inputData' when calling WatermarkApi->LinearBarcodeWatermark");
            }


            Muhimbi.PDF.Online.Client.Client.RequestOptions localVarRequestOptions = new Muhimbi.PDF.Online.Client.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Muhimbi.PDF.Online.Client.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Muhimbi.PDF.Online.Client.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.Data = inputData;

            localVarRequestOptions.Operation = "WatermarkApi.LinearBarcodeWatermark";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (api_key) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("api_key")))
            {
                localVarRequestOptions.HeaderParameters.Add("api_key", this.Configuration.GetApiKeyWithPrefix("api_key"));
            }
            // authentication (oauth2_auth) required
            // oauth required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PostAsync<OperationResponse>("/v1/operations/linear_barcode_watermark", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("LinearBarcodeWatermark", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Add PDF watermark Add a PDF based watermark to a PDF file.
        /// </summary>
        /// <exception cref="Muhimbi.PDF.Online.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="inputData"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>OperationResponse</returns>
        public OperationResponse PdfWatermark(PdfWatermarkData inputData, int operationIndex = 0)
        {
            Muhimbi.PDF.Online.Client.Client.ApiResponse<OperationResponse> localVarResponse = PdfWatermarkWithHttpInfo(inputData);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Add PDF watermark Add a PDF based watermark to a PDF file.
        /// </summary>
        /// <exception cref="Muhimbi.PDF.Online.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="inputData"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of OperationResponse</returns>
        public Muhimbi.PDF.Online.Client.Client.ApiResponse<OperationResponse> PdfWatermarkWithHttpInfo(PdfWatermarkData inputData, int operationIndex = 0)
        {
            // verify the required parameter 'inputData' is set
            if (inputData == null)
            {
                throw new Muhimbi.PDF.Online.Client.Client.ApiException(400, "Missing required parameter 'inputData' when calling WatermarkApi->PdfWatermark");
            }

            Muhimbi.PDF.Online.Client.Client.RequestOptions localVarRequestOptions = new Muhimbi.PDF.Online.Client.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Muhimbi.PDF.Online.Client.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Muhimbi.PDF.Online.Client.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.Data = inputData;

            localVarRequestOptions.Operation = "WatermarkApi.PdfWatermark";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (api_key) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("api_key")))
            {
                localVarRequestOptions.HeaderParameters.Add("api_key", this.Configuration.GetApiKeyWithPrefix("api_key"));
            }
            // authentication (oauth2_auth) required
            // oauth required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = this.Client.Post<OperationResponse>("/v1/operations/pdf_watermark", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("PdfWatermark", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Add PDF watermark Add a PDF based watermark to a PDF file.
        /// </summary>
        /// <exception cref="Muhimbi.PDF.Online.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="inputData"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of OperationResponse</returns>
        public async System.Threading.Tasks.Task<OperationResponse> PdfWatermarkAsync(PdfWatermarkData inputData, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Muhimbi.PDF.Online.Client.Client.ApiResponse<OperationResponse> localVarResponse = await PdfWatermarkWithHttpInfoAsync(inputData, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Add PDF watermark Add a PDF based watermark to a PDF file.
        /// </summary>
        /// <exception cref="Muhimbi.PDF.Online.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="inputData"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (OperationResponse)</returns>
        public async System.Threading.Tasks.Task<Muhimbi.PDF.Online.Client.Client.ApiResponse<OperationResponse>> PdfWatermarkWithHttpInfoAsync(PdfWatermarkData inputData, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'inputData' is set
            if (inputData == null)
            {
                throw new Muhimbi.PDF.Online.Client.Client.ApiException(400, "Missing required parameter 'inputData' when calling WatermarkApi->PdfWatermark");
            }


            Muhimbi.PDF.Online.Client.Client.RequestOptions localVarRequestOptions = new Muhimbi.PDF.Online.Client.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Muhimbi.PDF.Online.Client.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Muhimbi.PDF.Online.Client.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.Data = inputData;

            localVarRequestOptions.Operation = "WatermarkApi.PdfWatermark";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (api_key) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("api_key")))
            {
                localVarRequestOptions.HeaderParameters.Add("api_key", this.Configuration.GetApiKeyWithPrefix("api_key"));
            }
            // authentication (oauth2_auth) required
            // oauth required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PostAsync<OperationResponse>("/v1/operations/pdf_watermark", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("PdfWatermark", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Add QR Code watermark Add a QR Code watermark to a PDF file.
        /// </summary>
        /// <exception cref="Muhimbi.PDF.Online.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="inputData"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>OperationResponse</returns>
        public OperationResponse QrCodeWatermark(QrCodeWatermarkData inputData, int operationIndex = 0)
        {
            Muhimbi.PDF.Online.Client.Client.ApiResponse<OperationResponse> localVarResponse = QrCodeWatermarkWithHttpInfo(inputData);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Add QR Code watermark Add a QR Code watermark to a PDF file.
        /// </summary>
        /// <exception cref="Muhimbi.PDF.Online.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="inputData"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of OperationResponse</returns>
        public Muhimbi.PDF.Online.Client.Client.ApiResponse<OperationResponse> QrCodeWatermarkWithHttpInfo(QrCodeWatermarkData inputData, int operationIndex = 0)
        {
            // verify the required parameter 'inputData' is set
            if (inputData == null)
            {
                throw new Muhimbi.PDF.Online.Client.Client.ApiException(400, "Missing required parameter 'inputData' when calling WatermarkApi->QrCodeWatermark");
            }

            Muhimbi.PDF.Online.Client.Client.RequestOptions localVarRequestOptions = new Muhimbi.PDF.Online.Client.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Muhimbi.PDF.Online.Client.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Muhimbi.PDF.Online.Client.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.Data = inputData;

            localVarRequestOptions.Operation = "WatermarkApi.QrCodeWatermark";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (api_key) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("api_key")))
            {
                localVarRequestOptions.HeaderParameters.Add("api_key", this.Configuration.GetApiKeyWithPrefix("api_key"));
            }
            // authentication (oauth2_auth) required
            // oauth required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = this.Client.Post<OperationResponse>("/v1/operations/qr_code_watermark", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("QrCodeWatermark", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Add QR Code watermark Add a QR Code watermark to a PDF file.
        /// </summary>
        /// <exception cref="Muhimbi.PDF.Online.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="inputData"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of OperationResponse</returns>
        public async System.Threading.Tasks.Task<OperationResponse> QrCodeWatermarkAsync(QrCodeWatermarkData inputData, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Muhimbi.PDF.Online.Client.Client.ApiResponse<OperationResponse> localVarResponse = await QrCodeWatermarkWithHttpInfoAsync(inputData, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Add QR Code watermark Add a QR Code watermark to a PDF file.
        /// </summary>
        /// <exception cref="Muhimbi.PDF.Online.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="inputData"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (OperationResponse)</returns>
        public async System.Threading.Tasks.Task<Muhimbi.PDF.Online.Client.Client.ApiResponse<OperationResponse>> QrCodeWatermarkWithHttpInfoAsync(QrCodeWatermarkData inputData, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'inputData' is set
            if (inputData == null)
            {
                throw new Muhimbi.PDF.Online.Client.Client.ApiException(400, "Missing required parameter 'inputData' when calling WatermarkApi->QrCodeWatermark");
            }


            Muhimbi.PDF.Online.Client.Client.RequestOptions localVarRequestOptions = new Muhimbi.PDF.Online.Client.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Muhimbi.PDF.Online.Client.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Muhimbi.PDF.Online.Client.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.Data = inputData;

            localVarRequestOptions.Operation = "WatermarkApi.QrCodeWatermark";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (api_key) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("api_key")))
            {
                localVarRequestOptions.HeaderParameters.Add("api_key", this.Configuration.GetApiKeyWithPrefix("api_key"));
            }
            // authentication (oauth2_auth) required
            // oauth required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PostAsync<OperationResponse>("/v1/operations/qr_code_watermark", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("QrCodeWatermark", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Add rectangle watermark Add a rectangle watermark to a PDF file.
        /// </summary>
        /// <exception cref="Muhimbi.PDF.Online.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="inputData"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>OperationResponse</returns>
        public OperationResponse RectangleWatermark(RectangleWatermarkData inputData, int operationIndex = 0)
        {
            Muhimbi.PDF.Online.Client.Client.ApiResponse<OperationResponse> localVarResponse = RectangleWatermarkWithHttpInfo(inputData);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Add rectangle watermark Add a rectangle watermark to a PDF file.
        /// </summary>
        /// <exception cref="Muhimbi.PDF.Online.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="inputData"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of OperationResponse</returns>
        public Muhimbi.PDF.Online.Client.Client.ApiResponse<OperationResponse> RectangleWatermarkWithHttpInfo(RectangleWatermarkData inputData, int operationIndex = 0)
        {
            // verify the required parameter 'inputData' is set
            if (inputData == null)
            {
                throw new Muhimbi.PDF.Online.Client.Client.ApiException(400, "Missing required parameter 'inputData' when calling WatermarkApi->RectangleWatermark");
            }

            Muhimbi.PDF.Online.Client.Client.RequestOptions localVarRequestOptions = new Muhimbi.PDF.Online.Client.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Muhimbi.PDF.Online.Client.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Muhimbi.PDF.Online.Client.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.Data = inputData;

            localVarRequestOptions.Operation = "WatermarkApi.RectangleWatermark";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (api_key) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("api_key")))
            {
                localVarRequestOptions.HeaderParameters.Add("api_key", this.Configuration.GetApiKeyWithPrefix("api_key"));
            }
            // authentication (oauth2_auth) required
            // oauth required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = this.Client.Post<OperationResponse>("/v1/operations/rectangle_watermark", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("RectangleWatermark", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Add rectangle watermark Add a rectangle watermark to a PDF file.
        /// </summary>
        /// <exception cref="Muhimbi.PDF.Online.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="inputData"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of OperationResponse</returns>
        public async System.Threading.Tasks.Task<OperationResponse> RectangleWatermarkAsync(RectangleWatermarkData inputData, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Muhimbi.PDF.Online.Client.Client.ApiResponse<OperationResponse> localVarResponse = await RectangleWatermarkWithHttpInfoAsync(inputData, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Add rectangle watermark Add a rectangle watermark to a PDF file.
        /// </summary>
        /// <exception cref="Muhimbi.PDF.Online.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="inputData"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (OperationResponse)</returns>
        public async System.Threading.Tasks.Task<Muhimbi.PDF.Online.Client.Client.ApiResponse<OperationResponse>> RectangleWatermarkWithHttpInfoAsync(RectangleWatermarkData inputData, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'inputData' is set
            if (inputData == null)
            {
                throw new Muhimbi.PDF.Online.Client.Client.ApiException(400, "Missing required parameter 'inputData' when calling WatermarkApi->RectangleWatermark");
            }


            Muhimbi.PDF.Online.Client.Client.RequestOptions localVarRequestOptions = new Muhimbi.PDF.Online.Client.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Muhimbi.PDF.Online.Client.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Muhimbi.PDF.Online.Client.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.Data = inputData;

            localVarRequestOptions.Operation = "WatermarkApi.RectangleWatermark";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (api_key) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("api_key")))
            {
                localVarRequestOptions.HeaderParameters.Add("api_key", this.Configuration.GetApiKeyWithPrefix("api_key"));
            }
            // authentication (oauth2_auth) required
            // oauth required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PostAsync<OperationResponse>("/v1/operations/rectangle_watermark", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("RectangleWatermark", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Add RTF watermark Add a rich-text watermark to a PDF file.
        /// </summary>
        /// <exception cref="Muhimbi.PDF.Online.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="inputData"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>OperationResponse</returns>
        public OperationResponse RtfWatermark(RtfWatermarkData inputData, int operationIndex = 0)
        {
            Muhimbi.PDF.Online.Client.Client.ApiResponse<OperationResponse> localVarResponse = RtfWatermarkWithHttpInfo(inputData);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Add RTF watermark Add a rich-text watermark to a PDF file.
        /// </summary>
        /// <exception cref="Muhimbi.PDF.Online.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="inputData"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of OperationResponse</returns>
        public Muhimbi.PDF.Online.Client.Client.ApiResponse<OperationResponse> RtfWatermarkWithHttpInfo(RtfWatermarkData inputData, int operationIndex = 0)
        {
            // verify the required parameter 'inputData' is set
            if (inputData == null)
            {
                throw new Muhimbi.PDF.Online.Client.Client.ApiException(400, "Missing required parameter 'inputData' when calling WatermarkApi->RtfWatermark");
            }

            Muhimbi.PDF.Online.Client.Client.RequestOptions localVarRequestOptions = new Muhimbi.PDF.Online.Client.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Muhimbi.PDF.Online.Client.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Muhimbi.PDF.Online.Client.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.Data = inputData;

            localVarRequestOptions.Operation = "WatermarkApi.RtfWatermark";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (api_key) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("api_key")))
            {
                localVarRequestOptions.HeaderParameters.Add("api_key", this.Configuration.GetApiKeyWithPrefix("api_key"));
            }
            // authentication (oauth2_auth) required
            // oauth required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = this.Client.Post<OperationResponse>("/v1/operations/rtf_watermark", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("RtfWatermark", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Add RTF watermark Add a rich-text watermark to a PDF file.
        /// </summary>
        /// <exception cref="Muhimbi.PDF.Online.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="inputData"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of OperationResponse</returns>
        public async System.Threading.Tasks.Task<OperationResponse> RtfWatermarkAsync(RtfWatermarkData inputData, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Muhimbi.PDF.Online.Client.Client.ApiResponse<OperationResponse> localVarResponse = await RtfWatermarkWithHttpInfoAsync(inputData, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Add RTF watermark Add a rich-text watermark to a PDF file.
        /// </summary>
        /// <exception cref="Muhimbi.PDF.Online.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="inputData"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (OperationResponse)</returns>
        public async System.Threading.Tasks.Task<Muhimbi.PDF.Online.Client.Client.ApiResponse<OperationResponse>> RtfWatermarkWithHttpInfoAsync(RtfWatermarkData inputData, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'inputData' is set
            if (inputData == null)
            {
                throw new Muhimbi.PDF.Online.Client.Client.ApiException(400, "Missing required parameter 'inputData' when calling WatermarkApi->RtfWatermark");
            }


            Muhimbi.PDF.Online.Client.Client.RequestOptions localVarRequestOptions = new Muhimbi.PDF.Online.Client.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Muhimbi.PDF.Online.Client.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Muhimbi.PDF.Online.Client.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.Data = inputData;

            localVarRequestOptions.Operation = "WatermarkApi.RtfWatermark";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (api_key) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("api_key")))
            {
                localVarRequestOptions.HeaderParameters.Add("api_key", this.Configuration.GetApiKeyWithPrefix("api_key"));
            }
            // authentication (oauth2_auth) required
            // oauth required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PostAsync<OperationResponse>("/v1/operations/rtf_watermark", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("RtfWatermark", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Add text watermark Add a plain-text watermark to a PDF file.
        /// </summary>
        /// <exception cref="Muhimbi.PDF.Online.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="inputData"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>OperationResponse</returns>
        public OperationResponse TextWatermark(TextWatermarkData inputData, int operationIndex = 0)
        {
            Muhimbi.PDF.Online.Client.Client.ApiResponse<OperationResponse> localVarResponse = TextWatermarkWithHttpInfo(inputData);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Add text watermark Add a plain-text watermark to a PDF file.
        /// </summary>
        /// <exception cref="Muhimbi.PDF.Online.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="inputData"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of OperationResponse</returns>
        public Muhimbi.PDF.Online.Client.Client.ApiResponse<OperationResponse> TextWatermarkWithHttpInfo(TextWatermarkData inputData, int operationIndex = 0)
        {
            // verify the required parameter 'inputData' is set
            if (inputData == null)
            {
                throw new Muhimbi.PDF.Online.Client.Client.ApiException(400, "Missing required parameter 'inputData' when calling WatermarkApi->TextWatermark");
            }

            Muhimbi.PDF.Online.Client.Client.RequestOptions localVarRequestOptions = new Muhimbi.PDF.Online.Client.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Muhimbi.PDF.Online.Client.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Muhimbi.PDF.Online.Client.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.Data = inputData;

            localVarRequestOptions.Operation = "WatermarkApi.TextWatermark";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (api_key) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("api_key")))
            {
                localVarRequestOptions.HeaderParameters.Add("api_key", this.Configuration.GetApiKeyWithPrefix("api_key"));
            }
            // authentication (oauth2_auth) required
            // oauth required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = this.Client.Post<OperationResponse>("/v1/operations/text_watermark", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("TextWatermark", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Add text watermark Add a plain-text watermark to a PDF file.
        /// </summary>
        /// <exception cref="Muhimbi.PDF.Online.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="inputData"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of OperationResponse</returns>
        public async System.Threading.Tasks.Task<OperationResponse> TextWatermarkAsync(TextWatermarkData inputData, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Muhimbi.PDF.Online.Client.Client.ApiResponse<OperationResponse> localVarResponse = await TextWatermarkWithHttpInfoAsync(inputData, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Add text watermark Add a plain-text watermark to a PDF file.
        /// </summary>
        /// <exception cref="Muhimbi.PDF.Online.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="inputData"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (OperationResponse)</returns>
        public async System.Threading.Tasks.Task<Muhimbi.PDF.Online.Client.Client.ApiResponse<OperationResponse>> TextWatermarkWithHttpInfoAsync(TextWatermarkData inputData, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'inputData' is set
            if (inputData == null)
            {
                throw new Muhimbi.PDF.Online.Client.Client.ApiException(400, "Missing required parameter 'inputData' when calling WatermarkApi->TextWatermark");
            }


            Muhimbi.PDF.Online.Client.Client.RequestOptions localVarRequestOptions = new Muhimbi.PDF.Online.Client.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Muhimbi.PDF.Online.Client.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Muhimbi.PDF.Online.Client.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.Data = inputData;

            localVarRequestOptions.Operation = "WatermarkApi.TextWatermark";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (api_key) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("api_key")))
            {
                localVarRequestOptions.HeaderParameters.Add("api_key", this.Configuration.GetApiKeyWithPrefix("api_key"));
            }
            // authentication (oauth2_auth) required
            // oauth required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PostAsync<OperationResponse>("/v1/operations/text_watermark", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("TextWatermark", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

    }
}
