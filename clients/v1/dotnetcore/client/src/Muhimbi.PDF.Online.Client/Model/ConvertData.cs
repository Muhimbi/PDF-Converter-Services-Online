/*
 * Muhimbi PDF
 *
 * Convert, Merge, Watermark, Secure and OCR files.
 *
 * The version of the OpenAPI document: 9.16
 * Contact: support@muhimbi.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = Muhimbi.PDF.Online.Client.Client.OpenAPIDateConverter;

namespace Muhimbi.PDF.Online.Client.Model
{
    /// <summary>
    /// Parameters for Convert operation
    /// </summary>
    [DataContract(Name = "convert_data")]
    public partial class ConvertData : IEquatable<ConvertData>, IValidatableObject
    {
        /// <summary>
        /// Output format
        /// </summary>
        /// <value>Output format</value>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum OutputFormatEnum
        {
            /// <summary>
            /// Enum PDF for value: PDF
            /// </summary>
            [EnumMember(Value = "PDF")]
            PDF = 1,

            /// <summary>
            /// Enum XPS for value: XPS
            /// </summary>
            [EnumMember(Value = "XPS")]
            XPS = 2,

            /// <summary>
            /// Enum DOCX for value: DOCX
            /// </summary>
            [EnumMember(Value = "DOCX")]
            DOCX = 3,

            /// <summary>
            /// Enum DOC for value: DOC
            /// </summary>
            [EnumMember(Value = "DOC")]
            DOC = 4,

            /// <summary>
            /// Enum ODT for value: ODT
            /// </summary>
            [EnumMember(Value = "ODT")]
            ODT = 5,

            /// <summary>
            /// Enum RTF for value: RTF
            /// </summary>
            [EnumMember(Value = "RTF")]
            RTF = 6,

            /// <summary>
            /// Enum TXT for value: TXT
            /// </summary>
            [EnumMember(Value = "TXT")]
            TXT = 7,

            /// <summary>
            /// Enum MHT for value: MHT
            /// </summary>
            [EnumMember(Value = "MHT")]
            MHT = 8,

            /// <summary>
            /// Enum HTML for value: HTML
            /// </summary>
            [EnumMember(Value = "HTML")]
            HTML = 9,

            /// <summary>
            /// Enum XML for value: XML
            /// </summary>
            [EnumMember(Value = "XML")]
            XML = 10,

            /// <summary>
            /// Enum XLS for value: XLS
            /// </summary>
            [EnumMember(Value = "XLS")]
            XLS = 11,

            /// <summary>
            /// Enum XLSX for value: XLSX
            /// </summary>
            [EnumMember(Value = "XLSX")]
            XLSX = 12,

            /// <summary>
            /// Enum CSV for value: CSV
            /// </summary>
            [EnumMember(Value = "CSV")]
            CSV = 13,

            /// <summary>
            /// Enum ODS for value: ODS
            /// </summary>
            [EnumMember(Value = "ODS")]
            ODS = 14,

            /// <summary>
            /// Enum PPT for value: PPT
            /// </summary>
            [EnumMember(Value = "PPT")]
            PPT = 15,

            /// <summary>
            /// Enum PPTX for value: PPTX
            /// </summary>
            [EnumMember(Value = "PPTX")]
            PPTX = 16,

            /// <summary>
            /// Enum ODP for value: ODP
            /// </summary>
            [EnumMember(Value = "ODP")]
            ODP = 17,

            /// <summary>
            /// Enum PPS for value: PPS
            /// </summary>
            [EnumMember(Value = "PPS")]
            PPS = 18,

            /// <summary>
            /// Enum PPSX for value: PPSX
            /// </summary>
            [EnumMember(Value = "PPSX")]
            PPSX = 19,

            /// <summary>
            /// Enum TIFF for value: TIFF
            /// </summary>
            [EnumMember(Value = "TIFF")]
            TIFF = 20,

            /// <summary>
            /// Enum PNG for value: PNG
            /// </summary>
            [EnumMember(Value = "PNG")]
            PNG = 21,

            /// <summary>
            /// Enum GIF for value: GIF
            /// </summary>
            [EnumMember(Value = "GIF")]
            GIF = 22,

            /// <summary>
            /// Enum JPG for value: JPG
            /// </summary>
            [EnumMember(Value = "JPG")]
            JPG = 23,

            /// <summary>
            /// Enum BMP for value: BMP
            /// </summary>
            [EnumMember(Value = "BMP")]
            BMP = 24,

            /// <summary>
            /// Enum PS for value: PS
            /// </summary>
            [EnumMember(Value = "PS")]
            PS = 25,

            /// <summary>
            /// Enum PCL for value: PCL
            /// </summary>
            [EnumMember(Value = "PCL")]
            PCL = 26,

            /// <summary>
            /// Enum EPS for value: EPS
            /// </summary>
            [EnumMember(Value = "EPS")]
            EPS = 27,

            /// <summary>
            /// Enum FDF for value: FDF
            /// </summary>
            [EnumMember(Value = "FDF")]
            FDF = 28,

            /// <summary>
            /// Enum XFDF for value: XFDF
            /// </summary>
            [EnumMember(Value = "XFDF")]
            XFDF = 29

        }


        /// <summary>
        /// Output format
        /// </summary>
        /// <value>Output format</value>
        [DataMember(Name = "output_format", IsRequired = true, EmitDefaultValue = false)]
        public OutputFormatEnum OutputFormat { get; set; }
        /// <summary>
        /// Initializes a new instance of the <see cref="ConvertData" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected ConvertData() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="ConvertData" /> class.
        /// </summary>
        /// <param name="useAsyncPattern">Use async behaviour for API request (required) (default to false).</param>
        /// <param name="sourceFileName">Name of the source file including extension (required).</param>
        /// <param name="sourceFileContent">Content of the file to convert (required).</param>
        /// <param name="sharepointFile">sharepointFile.</param>
        /// <param name="outputFormat">Output format (required) (default to OutputFormatEnum.PDF).</param>
        /// <param name="copyMetadata">Copy metadata (Only for SharePoint operations) (required) (default to false).</param>
        /// <param name="overrideSettings">Optional settings using Muhimbi&#39;s XML syntax.</param>
        /// <param name="templateFileContent">Optional template file content (e.g. infopath XSN file).</param>
        /// <param name="failOnError">Fail on error (default to true).</param>
        public ConvertData(bool useAsyncPattern = false, string sourceFileName = default(string), byte[] sourceFileContent = default(byte[]), SharepointFile sharepointFile = default(SharepointFile), OutputFormatEnum outputFormat = OutputFormatEnum.PDF, bool copyMetadata = false, string overrideSettings = default(string), byte[] templateFileContent = default(byte[]), bool failOnError = true)
        {
            this.UseAsyncPattern = useAsyncPattern;
            // to ensure "sourceFileName" is required (not null)
            if (sourceFileName == null)
            {
                throw new ArgumentNullException("sourceFileName is a required property for ConvertData and cannot be null");
            }
            this.SourceFileName = sourceFileName;
            // to ensure "sourceFileContent" is required (not null)
            if (sourceFileContent == null)
            {
                throw new ArgumentNullException("sourceFileContent is a required property for ConvertData and cannot be null");
            }
            this.SourceFileContent = sourceFileContent;
            this.OutputFormat = outputFormat;
            this.CopyMetadata = copyMetadata;
            this.SharepointFile = sharepointFile;
            this.OverrideSettings = overrideSettings;
            this.TemplateFileContent = templateFileContent;
            this.FailOnError = failOnError;
        }

        /// <summary>
        /// Use async behaviour for API request
        /// </summary>
        /// <value>Use async behaviour for API request</value>
        [DataMember(Name = "use_async_pattern", IsRequired = true, EmitDefaultValue = true)]
        public bool UseAsyncPattern { get; set; }

        /// <summary>
        /// Name of the source file including extension
        /// </summary>
        /// <value>Name of the source file including extension</value>
        [DataMember(Name = "source_file_name", IsRequired = true, EmitDefaultValue = false)]
        public string SourceFileName { get; set; }

        /// <summary>
        /// Content of the file to convert
        /// </summary>
        /// <value>Content of the file to convert</value>
        [DataMember(Name = "source_file_content", IsRequired = true, EmitDefaultValue = false)]
        public byte[] SourceFileContent { get; set; }

        /// <summary>
        /// Gets or Sets SharepointFile
        /// </summary>
        [DataMember(Name = "sharepoint_file", EmitDefaultValue = false)]
        public SharepointFile SharepointFile { get; set; }

        /// <summary>
        /// Copy metadata (Only for SharePoint operations)
        /// </summary>
        /// <value>Copy metadata (Only for SharePoint operations)</value>
        [DataMember(Name = "copy_metadata", IsRequired = true, EmitDefaultValue = true)]
        public bool CopyMetadata { get; set; }

        /// <summary>
        /// Optional settings using Muhimbi&#39;s XML syntax
        /// </summary>
        /// <value>Optional settings using Muhimbi&#39;s XML syntax</value>
        [DataMember(Name = "override_settings", EmitDefaultValue = false)]
        public string OverrideSettings { get; set; }

        /// <summary>
        /// Optional template file content (e.g. infopath XSN file)
        /// </summary>
        /// <value>Optional template file content (e.g. infopath XSN file)</value>
        [DataMember(Name = "template_file_content", EmitDefaultValue = false)]
        public byte[] TemplateFileContent { get; set; }

        /// <summary>
        /// Fail on error
        /// </summary>
        /// <value>Fail on error</value>
        [DataMember(Name = "fail_on_error", EmitDefaultValue = true)]
        public bool FailOnError { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class ConvertData {\n");
            sb.Append("  UseAsyncPattern: ").Append(UseAsyncPattern).Append("\n");
            sb.Append("  SourceFileName: ").Append(SourceFileName).Append("\n");
            sb.Append("  SourceFileContent: ").Append(SourceFileContent).Append("\n");
            sb.Append("  SharepointFile: ").Append(SharepointFile).Append("\n");
            sb.Append("  OutputFormat: ").Append(OutputFormat).Append("\n");
            sb.Append("  CopyMetadata: ").Append(CopyMetadata).Append("\n");
            sb.Append("  OverrideSettings: ").Append(OverrideSettings).Append("\n");
            sb.Append("  TemplateFileContent: ").Append(TemplateFileContent).Append("\n");
            sb.Append("  FailOnError: ").Append(FailOnError).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as ConvertData);
        }

        /// <summary>
        /// Returns true if ConvertData instances are equal
        /// </summary>
        /// <param name="input">Instance of ConvertData to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(ConvertData input)
        {
            if (input == null)
            {
                return false;
            }
            return 
                (
                    this.UseAsyncPattern == input.UseAsyncPattern ||
                    this.UseAsyncPattern.Equals(input.UseAsyncPattern)
                ) && 
                (
                    this.SourceFileName == input.SourceFileName ||
                    (this.SourceFileName != null &&
                    this.SourceFileName.Equals(input.SourceFileName))
                ) && 
                (
                    this.SourceFileContent == input.SourceFileContent ||
                    (this.SourceFileContent != null &&
                    this.SourceFileContent.Equals(input.SourceFileContent))
                ) && 
                (
                    this.SharepointFile == input.SharepointFile ||
                    (this.SharepointFile != null &&
                    this.SharepointFile.Equals(input.SharepointFile))
                ) && 
                (
                    this.OutputFormat == input.OutputFormat ||
                    this.OutputFormat.Equals(input.OutputFormat)
                ) && 
                (
                    this.CopyMetadata == input.CopyMetadata ||
                    this.CopyMetadata.Equals(input.CopyMetadata)
                ) && 
                (
                    this.OverrideSettings == input.OverrideSettings ||
                    (this.OverrideSettings != null &&
                    this.OverrideSettings.Equals(input.OverrideSettings))
                ) && 
                (
                    this.TemplateFileContent == input.TemplateFileContent ||
                    (this.TemplateFileContent != null &&
                    this.TemplateFileContent.Equals(input.TemplateFileContent))
                ) && 
                (
                    this.FailOnError == input.FailOnError ||
                    this.FailOnError.Equals(input.FailOnError)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                hashCode = (hashCode * 59) + this.UseAsyncPattern.GetHashCode();
                if (this.SourceFileName != null)
                {
                    hashCode = (hashCode * 59) + this.SourceFileName.GetHashCode();
                }
                if (this.SourceFileContent != null)
                {
                    hashCode = (hashCode * 59) + this.SourceFileContent.GetHashCode();
                }
                if (this.SharepointFile != null)
                {
                    hashCode = (hashCode * 59) + this.SharepointFile.GetHashCode();
                }
                hashCode = (hashCode * 59) + this.OutputFormat.GetHashCode();
                hashCode = (hashCode * 59) + this.CopyMetadata.GetHashCode();
                if (this.OverrideSettings != null)
                {
                    hashCode = (hashCode * 59) + this.OverrideSettings.GetHashCode();
                }
                if (this.TemplateFileContent != null)
                {
                    hashCode = (hashCode * 59) + this.TemplateFileContent.GetHashCode();
                }
                hashCode = (hashCode * 59) + this.FailOnError.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        public IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
