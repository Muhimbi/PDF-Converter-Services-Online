/*
 * Muhimbi PDF
 *
 * Convert, Merge, Watermark, Secure and OCR files.
 *
 * The version of the OpenAPI document: 9.16
 * Contact: support@muhimbi.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = Muhimbi.PDF.Online.Client.Client.OpenAPIDateConverter;

namespace Muhimbi.PDF.Online.Client.Model
{
    /// <summary>
    /// Parameters for TextWatermark operation
    /// </summary>
    [DataContract(Name = "text_watermark_data")]
    public partial class TextWatermarkData : IEquatable<TextWatermarkData>, IValidatableObject
    {
        /// <summary>
        /// Text alignment
        /// </summary>
        /// <value>Text alignment</value>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum AlignmentEnum
        {
            /// <summary>
            /// Enum TopLeft for value: Top Left
            /// </summary>
            [EnumMember(Value = "Top Left")]
            TopLeft = 1,

            /// <summary>
            /// Enum TopCenter for value: Top Center
            /// </summary>
            [EnumMember(Value = "Top Center")]
            TopCenter = 2,

            /// <summary>
            /// Enum TopRight for value: Top Right
            /// </summary>
            [EnumMember(Value = "Top Right")]
            TopRight = 3,

            /// <summary>
            /// Enum TopJustfiy for value: Top Justfiy
            /// </summary>
            [EnumMember(Value = "Top Justfiy")]
            TopJustfiy = 4,

            /// <summary>
            /// Enum MiddleLeft for value: Middle Left
            /// </summary>
            [EnumMember(Value = "Middle Left")]
            MiddleLeft = 5,

            /// <summary>
            /// Enum MiddleCenter for value: Middle Center
            /// </summary>
            [EnumMember(Value = "Middle Center")]
            MiddleCenter = 6,

            /// <summary>
            /// Enum MiddleRight for value: Middle Right
            /// </summary>
            [EnumMember(Value = "Middle Right")]
            MiddleRight = 7,

            /// <summary>
            /// Enum MiddleJustfiy for value: Middle Justfiy
            /// </summary>
            [EnumMember(Value = "Middle Justfiy")]
            MiddleJustfiy = 8,

            /// <summary>
            /// Enum BottomLeft for value: Bottom Left
            /// </summary>
            [EnumMember(Value = "Bottom Left")]
            BottomLeft = 9,

            /// <summary>
            /// Enum BottomCenter for value: Bottom Center
            /// </summary>
            [EnumMember(Value = "Bottom Center")]
            BottomCenter = 10,

            /// <summary>
            /// Enum BottomRight for value: Bottom Right
            /// </summary>
            [EnumMember(Value = "Bottom Right")]
            BottomRight = 11,

            /// <summary>
            /// Enum BottomJustfiy for value: Bottom Justfiy
            /// </summary>
            [EnumMember(Value = "Bottom Justfiy")]
            BottomJustfiy = 12

        }


        /// <summary>
        /// Text alignment
        /// </summary>
        /// <value>Text alignment</value>
        [DataMember(Name = "alignment", IsRequired = true, EmitDefaultValue = false)]
        public AlignmentEnum Alignment { get; set; }
        /// <summary>
        /// Spcifies if wordwrap text
        /// </summary>
        /// <value>Spcifies if wordwrap text</value>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum WordWrapEnum
        {
            /// <summary>
            /// Enum WordOnly for value: WordOnly
            /// </summary>
            [EnumMember(Value = "WordOnly")]
            WordOnly = 1,

            /// <summary>
            /// Enum Character for value: Character
            /// </summary>
            [EnumMember(Value = "Character")]
            Character = 2,

            /// <summary>
            /// Enum None for value: None
            /// </summary>
            [EnumMember(Value = "None")]
            None = 3,

            /// <summary>
            /// Enum Word for value: Word
            /// </summary>
            [EnumMember(Value = "Word")]
            Word = 4

        }


        /// <summary>
        /// Spcifies if wordwrap text
        /// </summary>
        /// <value>Spcifies if wordwrap text</value>
        [DataMember(Name = "word_wrap", IsRequired = true, EmitDefaultValue = false)]
        public WordWrapEnum WordWrap { get; set; }
        /// <summary>
        /// Watermark position on the page
        /// </summary>
        /// <value>Watermark position on the page</value>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum PositionEnum
        {
            /// <summary>
            /// Enum TopLeft for value: Top Left
            /// </summary>
            [EnumMember(Value = "Top Left")]
            TopLeft = 1,

            /// <summary>
            /// Enum TopCenter for value: Top Center
            /// </summary>
            [EnumMember(Value = "Top Center")]
            TopCenter = 2,

            /// <summary>
            /// Enum TopRight for value: Top Right
            /// </summary>
            [EnumMember(Value = "Top Right")]
            TopRight = 3,

            /// <summary>
            /// Enum MiddleLeft for value: Middle Left
            /// </summary>
            [EnumMember(Value = "Middle Left")]
            MiddleLeft = 4,

            /// <summary>
            /// Enum MiddleCenter for value: Middle Center
            /// </summary>
            [EnumMember(Value = "Middle Center")]
            MiddleCenter = 5,

            /// <summary>
            /// Enum MiddleRight for value: Middle Right
            /// </summary>
            [EnumMember(Value = "Middle Right")]
            MiddleRight = 6,

            /// <summary>
            /// Enum BottomLeft for value: Bottom Left
            /// </summary>
            [EnumMember(Value = "Bottom Left")]
            BottomLeft = 7,

            /// <summary>
            /// Enum BottomCenter for value: Bottom Center
            /// </summary>
            [EnumMember(Value = "Bottom Center")]
            BottomCenter = 8,

            /// <summary>
            /// Enum BottomRight for value: Bottom Right
            /// </summary>
            [EnumMember(Value = "Bottom Right")]
            BottomRight = 9,

            /// <summary>
            /// Enum Absolute for value: Absolute
            /// </summary>
            [EnumMember(Value = "Absolute")]
            Absolute = 10,

            /// <summary>
            /// Enum Random for value: Random
            /// </summary>
            [EnumMember(Value = "Random")]
            Random = 11

        }


        /// <summary>
        /// Watermark position on the page
        /// </summary>
        /// <value>Watermark position on the page</value>
        [DataMember(Name = "position", IsRequired = true, EmitDefaultValue = false)]
        public PositionEnum Position { get; set; }
        /// <summary>
        /// Watermark layer
        /// </summary>
        /// <value>Watermark layer</value>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum LayerEnum
        {
            /// <summary>
            /// Enum Background for value: Background
            /// </summary>
            [EnumMember(Value = "Background")]
            Background = 1,

            /// <summary>
            /// Enum Foreground for value: Foreground
            /// </summary>
            [EnumMember(Value = "Foreground")]
            Foreground = 2

        }


        /// <summary>
        /// Watermark layer
        /// </summary>
        /// <value>Watermark layer</value>
        [DataMember(Name = "layer", EmitDefaultValue = false)]
        public LayerEnum? Layer { get; set; }
        /// <summary>
        /// Orientation of pages the watermark applies to.
        /// </summary>
        /// <value>Orientation of pages the watermark applies to.</value>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum PageOrientationEnum
        {
            /// <summary>
            /// Enum Portrait for value: Portrait
            /// </summary>
            [EnumMember(Value = "Portrait")]
            Portrait = 1,

            /// <summary>
            /// Enum Landscape for value: Landscape
            /// </summary>
            [EnumMember(Value = "Landscape")]
            Landscape = 2,

            /// <summary>
            /// Enum Both for value: Both
            /// </summary>
            [EnumMember(Value = "Both")]
            Both = 3

        }


        /// <summary>
        /// Orientation of pages the watermark applies to.
        /// </summary>
        /// <value>Orientation of pages the watermark applies to.</value>
        [DataMember(Name = "page_orientation", EmitDefaultValue = false)]
        public PageOrientationEnum? PageOrientation { get; set; }
        /// <summary>
        /// Tells if the watermark is only visible when the document is printed
        /// </summary>
        /// <value>Tells if the watermark is only visible when the document is printed</value>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum PrintOnlyEnum
        {
            /// <summary>
            /// Enum False for value: false
            /// </summary>
            [EnumMember(Value = "false")]
            False = 1,

            /// <summary>
            /// Enum True for value: true
            /// </summary>
            [EnumMember(Value = "true")]
            True = 2

        }


        /// <summary>
        /// Tells if the watermark is only visible when the document is printed
        /// </summary>
        /// <value>Tells if the watermark is only visible when the document is printed</value>
        [DataMember(Name = "print_only", EmitDefaultValue = false)]
        public PrintOnlyEnum? PrintOnly { get; set; }
        /// <summary>
        /// Initializes a new instance of the <see cref="TextWatermarkData" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected TextWatermarkData() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="TextWatermarkData" /> class.
        /// </summary>
        /// <param name="sourceFileName">Name of the source file including extension.</param>
        /// <param name="useAsyncPattern">Use async behaviour for API request (required) (default to false).</param>
        /// <param name="sourceFileContent">Content of the file to watermark (required).</param>
        /// <param name="content">Watermark text (required).</param>
        /// <param name="sharepointFile">sharepointFile.</param>
        /// <param name="fontFamilyName">Name of the font, e.g. Arial, Times New Roman, Calibri (required).</param>
        /// <param name="fontSize">Size of the font in Pt (required) (default to &quot;12&quot;).</param>
        /// <param name="fillColor">Color in #RRGGBB notation (required) (default to &quot;#000000&quot;).</param>
        /// <param name="alignment">Text alignment (required) (default to AlignmentEnum.TopLeft).</param>
        /// <param name="wordWrap">Spcifies if wordwrap text (required) (default to WordWrapEnum.Word).</param>
        /// <param name="position">Watermark position on the page (required) (default to PositionEnum.MiddleCenter).</param>
        /// <param name="width">Width of the watermark (in Pts, 1/72 of an inch) (required).</param>
        /// <param name="height">Height of the watermark (in Pts, 1/72 of an inch) (required).</param>
        /// <param name="x">X Coordinate when &#39;Position&#39; is set to &#39;Absolute&#39; (in Pts, 1/72 of an inch).</param>
        /// <param name="y">Y Coordinate when &#39;Position&#39; is set to &#39;Absolute&#39; (in Pts, 1/72 of an inch).</param>
        /// <param name="layer">Watermark layer (default to LayerEnum.Foreground).</param>
        /// <param name="rotation">Angle of rotation.</param>
        /// <param name="opacity">Opacity in % (100 is fully visible and 1 is barely visible) (default to &quot;100&quot;).</param>
        /// <param name="fontStyle">One or more styles, e.g. bold|italic|underline|strikeout.</param>
        /// <param name="lineColor">Color in #RRGGBB notation.</param>
        /// <param name="lineWidth">Width of the font outline (in Pts, 1/72 of an inch).</param>
        /// <param name="startPage">Number of the first page the watermark applies to.</param>
        /// <param name="endPage">Number of the last page the watermark applies to.</param>
        /// <param name="pageInterval">Which pages to display the watermark on (1&#x3D;every page, 2&#x3D;every other, etc).</param>
        /// <param name="pageOrientation">Orientation of pages the watermark applies to. (default to PageOrientationEnum.Both).</param>
        /// <param name="printOnly">Tells if the watermark is only visible when the document is printed (default to PrintOnlyEnum.False).</param>
        /// <param name="startSection">The first section in a Word or Excel document the watermark is visible.</param>
        /// <param name="endSection">The last section in a Word or Excel document the watermark is visible.</param>
        /// <param name="pageType">One or more page types for Word and Excel documents, eg. default|first|even.</param>
        /// <param name="failOnError">Fail on error (default to true).</param>
        public TextWatermarkData(string sourceFileName = default(string), bool useAsyncPattern = false, byte[] sourceFileContent = default(byte[]), string content = default(string), SharepointFile sharepointFile = default(SharepointFile), string fontFamilyName = default(string), string fontSize = "12", string fillColor = "#000000", AlignmentEnum alignment = AlignmentEnum.TopLeft, WordWrapEnum wordWrap = WordWrapEnum.Word, PositionEnum position = PositionEnum.MiddleCenter, string width = default(string), string height = default(string), string x = default(string), string y = default(string), LayerEnum? layer = LayerEnum.Foreground, string rotation = default(string), string opacity = "100", string fontStyle = default(string), string lineColor = default(string), string lineWidth = default(string), int startPage = default(int), int endPage = default(int), int pageInterval = default(int), PageOrientationEnum? pageOrientation = PageOrientationEnum.Both, PrintOnlyEnum? printOnly = PrintOnlyEnum.False, int startSection = default(int), int endSection = default(int), string pageType = default(string), bool failOnError = true)
        {
            this.UseAsyncPattern = useAsyncPattern;
            // to ensure "sourceFileContent" is required (not null)
            if (sourceFileContent == null)
            {
                throw new ArgumentNullException("sourceFileContent is a required property for TextWatermarkData and cannot be null");
            }
            this.SourceFileContent = sourceFileContent;
            // to ensure "content" is required (not null)
            if (content == null)
            {
                throw new ArgumentNullException("content is a required property for TextWatermarkData and cannot be null");
            }
            this.Content = content;
            // to ensure "fontFamilyName" is required (not null)
            if (fontFamilyName == null)
            {
                throw new ArgumentNullException("fontFamilyName is a required property for TextWatermarkData and cannot be null");
            }
            this.FontFamilyName = fontFamilyName;
            // to ensure "fontSize" is required (not null)
            if (fontSize == null)
            {
                throw new ArgumentNullException("fontSize is a required property for TextWatermarkData and cannot be null");
            }
            this.FontSize = fontSize;
            // to ensure "fillColor" is required (not null)
            if (fillColor == null)
            {
                throw new ArgumentNullException("fillColor is a required property for TextWatermarkData and cannot be null");
            }
            this.FillColor = fillColor;
            this.Alignment = alignment;
            this.WordWrap = wordWrap;
            this.Position = position;
            // to ensure "width" is required (not null)
            if (width == null)
            {
                throw new ArgumentNullException("width is a required property for TextWatermarkData and cannot be null");
            }
            this.Width = width;
            // to ensure "height" is required (not null)
            if (height == null)
            {
                throw new ArgumentNullException("height is a required property for TextWatermarkData and cannot be null");
            }
            this.Height = height;
            this.SourceFileName = sourceFileName;
            this.SharepointFile = sharepointFile;
            this.X = x;
            this.Y = y;
            this.Layer = layer;
            this.Rotation = rotation;
            // use default value if no "opacity" provided
            this.Opacity = opacity ?? "100";
            this.FontStyle = fontStyle;
            this.LineColor = lineColor;
            this.LineWidth = lineWidth;
            this.StartPage = startPage;
            this.EndPage = endPage;
            this.PageInterval = pageInterval;
            this.PageOrientation = pageOrientation;
            this.PrintOnly = printOnly;
            this.StartSection = startSection;
            this.EndSection = endSection;
            this.PageType = pageType;
            this.FailOnError = failOnError;
        }

        /// <summary>
        /// Name of the source file including extension
        /// </summary>
        /// <value>Name of the source file including extension</value>
        [DataMember(Name = "source_file_name", EmitDefaultValue = false)]
        public string SourceFileName { get; set; }

        /// <summary>
        /// Use async behaviour for API request
        /// </summary>
        /// <value>Use async behaviour for API request</value>
        [DataMember(Name = "use_async_pattern", IsRequired = true, EmitDefaultValue = true)]
        public bool UseAsyncPattern { get; set; }

        /// <summary>
        /// Content of the file to watermark
        /// </summary>
        /// <value>Content of the file to watermark</value>
        [DataMember(Name = "source_file_content", IsRequired = true, EmitDefaultValue = false)]
        public byte[] SourceFileContent { get; set; }

        /// <summary>
        /// Watermark text
        /// </summary>
        /// <value>Watermark text</value>
        [DataMember(Name = "content", IsRequired = true, EmitDefaultValue = false)]
        public string Content { get; set; }

        /// <summary>
        /// Gets or Sets SharepointFile
        /// </summary>
        [DataMember(Name = "sharepoint_file", EmitDefaultValue = false)]
        public SharepointFile SharepointFile { get; set; }

        /// <summary>
        /// Name of the font, e.g. Arial, Times New Roman, Calibri
        /// </summary>
        /// <value>Name of the font, e.g. Arial, Times New Roman, Calibri</value>
        [DataMember(Name = "font_family_name", IsRequired = true, EmitDefaultValue = false)]
        public string FontFamilyName { get; set; }

        /// <summary>
        /// Size of the font in Pt
        /// </summary>
        /// <value>Size of the font in Pt</value>
        [DataMember(Name = "font_size", IsRequired = true, EmitDefaultValue = false)]
        public string FontSize { get; set; }

        /// <summary>
        /// Color in #RRGGBB notation
        /// </summary>
        /// <value>Color in #RRGGBB notation</value>
        [DataMember(Name = "fill_color", IsRequired = true, EmitDefaultValue = false)]
        public string FillColor { get; set; }

        /// <summary>
        /// Width of the watermark (in Pts, 1/72 of an inch)
        /// </summary>
        /// <value>Width of the watermark (in Pts, 1/72 of an inch)</value>
        [DataMember(Name = "width", IsRequired = true, EmitDefaultValue = false)]
        public string Width { get; set; }

        /// <summary>
        /// Height of the watermark (in Pts, 1/72 of an inch)
        /// </summary>
        /// <value>Height of the watermark (in Pts, 1/72 of an inch)</value>
        [DataMember(Name = "height", IsRequired = true, EmitDefaultValue = false)]
        public string Height { get; set; }

        /// <summary>
        /// X Coordinate when &#39;Position&#39; is set to &#39;Absolute&#39; (in Pts, 1/72 of an inch)
        /// </summary>
        /// <value>X Coordinate when &#39;Position&#39; is set to &#39;Absolute&#39; (in Pts, 1/72 of an inch)</value>
        [DataMember(Name = "x", EmitDefaultValue = false)]
        public string X { get; set; }

        /// <summary>
        /// Y Coordinate when &#39;Position&#39; is set to &#39;Absolute&#39; (in Pts, 1/72 of an inch)
        /// </summary>
        /// <value>Y Coordinate when &#39;Position&#39; is set to &#39;Absolute&#39; (in Pts, 1/72 of an inch)</value>
        [DataMember(Name = "y", EmitDefaultValue = false)]
        public string Y { get; set; }

        /// <summary>
        /// Angle of rotation
        /// </summary>
        /// <value>Angle of rotation</value>
        [DataMember(Name = "rotation", EmitDefaultValue = false)]
        public string Rotation { get; set; }

        /// <summary>
        /// Opacity in % (100 is fully visible and 1 is barely visible)
        /// </summary>
        /// <value>Opacity in % (100 is fully visible and 1 is barely visible)</value>
        [DataMember(Name = "opacity", EmitDefaultValue = false)]
        public string Opacity { get; set; }

        /// <summary>
        /// One or more styles, e.g. bold|italic|underline|strikeout
        /// </summary>
        /// <value>One or more styles, e.g. bold|italic|underline|strikeout</value>
        [DataMember(Name = "font_style", EmitDefaultValue = false)]
        public string FontStyle { get; set; }

        /// <summary>
        /// Color in #RRGGBB notation
        /// </summary>
        /// <value>Color in #RRGGBB notation</value>
        [DataMember(Name = "line_color", EmitDefaultValue = false)]
        public string LineColor { get; set; }

        /// <summary>
        /// Width of the font outline (in Pts, 1/72 of an inch)
        /// </summary>
        /// <value>Width of the font outline (in Pts, 1/72 of an inch)</value>
        [DataMember(Name = "line_width", EmitDefaultValue = false)]
        public string LineWidth { get; set; }

        /// <summary>
        /// Number of the first page the watermark applies to
        /// </summary>
        /// <value>Number of the first page the watermark applies to</value>
        [DataMember(Name = "start_page", EmitDefaultValue = false)]
        public int StartPage { get; set; }

        /// <summary>
        /// Number of the last page the watermark applies to
        /// </summary>
        /// <value>Number of the last page the watermark applies to</value>
        [DataMember(Name = "end_page", EmitDefaultValue = false)]
        public int EndPage { get; set; }

        /// <summary>
        /// Which pages to display the watermark on (1&#x3D;every page, 2&#x3D;every other, etc)
        /// </summary>
        /// <value>Which pages to display the watermark on (1&#x3D;every page, 2&#x3D;every other, etc)</value>
        [DataMember(Name = "page_interval", EmitDefaultValue = false)]
        public int PageInterval { get; set; }

        /// <summary>
        /// The first section in a Word or Excel document the watermark is visible
        /// </summary>
        /// <value>The first section in a Word or Excel document the watermark is visible</value>
        [DataMember(Name = "start_section", EmitDefaultValue = false)]
        public int StartSection { get; set; }

        /// <summary>
        /// The last section in a Word or Excel document the watermark is visible
        /// </summary>
        /// <value>The last section in a Word or Excel document the watermark is visible</value>
        [DataMember(Name = "end_section", EmitDefaultValue = false)]
        public int EndSection { get; set; }

        /// <summary>
        /// One or more page types for Word and Excel documents, eg. default|first|even
        /// </summary>
        /// <value>One or more page types for Word and Excel documents, eg. default|first|even</value>
        [DataMember(Name = "page_type", EmitDefaultValue = false)]
        public string PageType { get; set; }

        /// <summary>
        /// Fail on error
        /// </summary>
        /// <value>Fail on error</value>
        [DataMember(Name = "fail_on_error", EmitDefaultValue = true)]
        public bool FailOnError { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class TextWatermarkData {\n");
            sb.Append("  SourceFileName: ").Append(SourceFileName).Append("\n");
            sb.Append("  UseAsyncPattern: ").Append(UseAsyncPattern).Append("\n");
            sb.Append("  SourceFileContent: ").Append(SourceFileContent).Append("\n");
            sb.Append("  Content: ").Append(Content).Append("\n");
            sb.Append("  SharepointFile: ").Append(SharepointFile).Append("\n");
            sb.Append("  FontFamilyName: ").Append(FontFamilyName).Append("\n");
            sb.Append("  FontSize: ").Append(FontSize).Append("\n");
            sb.Append("  FillColor: ").Append(FillColor).Append("\n");
            sb.Append("  Alignment: ").Append(Alignment).Append("\n");
            sb.Append("  WordWrap: ").Append(WordWrap).Append("\n");
            sb.Append("  Position: ").Append(Position).Append("\n");
            sb.Append("  Width: ").Append(Width).Append("\n");
            sb.Append("  Height: ").Append(Height).Append("\n");
            sb.Append("  X: ").Append(X).Append("\n");
            sb.Append("  Y: ").Append(Y).Append("\n");
            sb.Append("  Layer: ").Append(Layer).Append("\n");
            sb.Append("  Rotation: ").Append(Rotation).Append("\n");
            sb.Append("  Opacity: ").Append(Opacity).Append("\n");
            sb.Append("  FontStyle: ").Append(FontStyle).Append("\n");
            sb.Append("  LineColor: ").Append(LineColor).Append("\n");
            sb.Append("  LineWidth: ").Append(LineWidth).Append("\n");
            sb.Append("  StartPage: ").Append(StartPage).Append("\n");
            sb.Append("  EndPage: ").Append(EndPage).Append("\n");
            sb.Append("  PageInterval: ").Append(PageInterval).Append("\n");
            sb.Append("  PageOrientation: ").Append(PageOrientation).Append("\n");
            sb.Append("  PrintOnly: ").Append(PrintOnly).Append("\n");
            sb.Append("  StartSection: ").Append(StartSection).Append("\n");
            sb.Append("  EndSection: ").Append(EndSection).Append("\n");
            sb.Append("  PageType: ").Append(PageType).Append("\n");
            sb.Append("  FailOnError: ").Append(FailOnError).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as TextWatermarkData);
        }

        /// <summary>
        /// Returns true if TextWatermarkData instances are equal
        /// </summary>
        /// <param name="input">Instance of TextWatermarkData to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(TextWatermarkData input)
        {
            if (input == null)
            {
                return false;
            }
            return 
                (
                    this.SourceFileName == input.SourceFileName ||
                    (this.SourceFileName != null &&
                    this.SourceFileName.Equals(input.SourceFileName))
                ) && 
                (
                    this.UseAsyncPattern == input.UseAsyncPattern ||
                    this.UseAsyncPattern.Equals(input.UseAsyncPattern)
                ) && 
                (
                    this.SourceFileContent == input.SourceFileContent ||
                    (this.SourceFileContent != null &&
                    this.SourceFileContent.Equals(input.SourceFileContent))
                ) && 
                (
                    this.Content == input.Content ||
                    (this.Content != null &&
                    this.Content.Equals(input.Content))
                ) && 
                (
                    this.SharepointFile == input.SharepointFile ||
                    (this.SharepointFile != null &&
                    this.SharepointFile.Equals(input.SharepointFile))
                ) && 
                (
                    this.FontFamilyName == input.FontFamilyName ||
                    (this.FontFamilyName != null &&
                    this.FontFamilyName.Equals(input.FontFamilyName))
                ) && 
                (
                    this.FontSize == input.FontSize ||
                    (this.FontSize != null &&
                    this.FontSize.Equals(input.FontSize))
                ) && 
                (
                    this.FillColor == input.FillColor ||
                    (this.FillColor != null &&
                    this.FillColor.Equals(input.FillColor))
                ) && 
                (
                    this.Alignment == input.Alignment ||
                    this.Alignment.Equals(input.Alignment)
                ) && 
                (
                    this.WordWrap == input.WordWrap ||
                    this.WordWrap.Equals(input.WordWrap)
                ) && 
                (
                    this.Position == input.Position ||
                    this.Position.Equals(input.Position)
                ) && 
                (
                    this.Width == input.Width ||
                    (this.Width != null &&
                    this.Width.Equals(input.Width))
                ) && 
                (
                    this.Height == input.Height ||
                    (this.Height != null &&
                    this.Height.Equals(input.Height))
                ) && 
                (
                    this.X == input.X ||
                    (this.X != null &&
                    this.X.Equals(input.X))
                ) && 
                (
                    this.Y == input.Y ||
                    (this.Y != null &&
                    this.Y.Equals(input.Y))
                ) && 
                (
                    this.Layer == input.Layer ||
                    this.Layer.Equals(input.Layer)
                ) && 
                (
                    this.Rotation == input.Rotation ||
                    (this.Rotation != null &&
                    this.Rotation.Equals(input.Rotation))
                ) && 
                (
                    this.Opacity == input.Opacity ||
                    (this.Opacity != null &&
                    this.Opacity.Equals(input.Opacity))
                ) && 
                (
                    this.FontStyle == input.FontStyle ||
                    (this.FontStyle != null &&
                    this.FontStyle.Equals(input.FontStyle))
                ) && 
                (
                    this.LineColor == input.LineColor ||
                    (this.LineColor != null &&
                    this.LineColor.Equals(input.LineColor))
                ) && 
                (
                    this.LineWidth == input.LineWidth ||
                    (this.LineWidth != null &&
                    this.LineWidth.Equals(input.LineWidth))
                ) && 
                (
                    this.StartPage == input.StartPage ||
                    this.StartPage.Equals(input.StartPage)
                ) && 
                (
                    this.EndPage == input.EndPage ||
                    this.EndPage.Equals(input.EndPage)
                ) && 
                (
                    this.PageInterval == input.PageInterval ||
                    this.PageInterval.Equals(input.PageInterval)
                ) && 
                (
                    this.PageOrientation == input.PageOrientation ||
                    this.PageOrientation.Equals(input.PageOrientation)
                ) && 
                (
                    this.PrintOnly == input.PrintOnly ||
                    this.PrintOnly.Equals(input.PrintOnly)
                ) && 
                (
                    this.StartSection == input.StartSection ||
                    this.StartSection.Equals(input.StartSection)
                ) && 
                (
                    this.EndSection == input.EndSection ||
                    this.EndSection.Equals(input.EndSection)
                ) && 
                (
                    this.PageType == input.PageType ||
                    (this.PageType != null &&
                    this.PageType.Equals(input.PageType))
                ) && 
                (
                    this.FailOnError == input.FailOnError ||
                    this.FailOnError.Equals(input.FailOnError)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.SourceFileName != null)
                {
                    hashCode = (hashCode * 59) + this.SourceFileName.GetHashCode();
                }
                hashCode = (hashCode * 59) + this.UseAsyncPattern.GetHashCode();
                if (this.SourceFileContent != null)
                {
                    hashCode = (hashCode * 59) + this.SourceFileContent.GetHashCode();
                }
                if (this.Content != null)
                {
                    hashCode = (hashCode * 59) + this.Content.GetHashCode();
                }
                if (this.SharepointFile != null)
                {
                    hashCode = (hashCode * 59) + this.SharepointFile.GetHashCode();
                }
                if (this.FontFamilyName != null)
                {
                    hashCode = (hashCode * 59) + this.FontFamilyName.GetHashCode();
                }
                if (this.FontSize != null)
                {
                    hashCode = (hashCode * 59) + this.FontSize.GetHashCode();
                }
                if (this.FillColor != null)
                {
                    hashCode = (hashCode * 59) + this.FillColor.GetHashCode();
                }
                hashCode = (hashCode * 59) + this.Alignment.GetHashCode();
                hashCode = (hashCode * 59) + this.WordWrap.GetHashCode();
                hashCode = (hashCode * 59) + this.Position.GetHashCode();
                if (this.Width != null)
                {
                    hashCode = (hashCode * 59) + this.Width.GetHashCode();
                }
                if (this.Height != null)
                {
                    hashCode = (hashCode * 59) + this.Height.GetHashCode();
                }
                if (this.X != null)
                {
                    hashCode = (hashCode * 59) + this.X.GetHashCode();
                }
                if (this.Y != null)
                {
                    hashCode = (hashCode * 59) + this.Y.GetHashCode();
                }
                hashCode = (hashCode * 59) + this.Layer.GetHashCode();
                if (this.Rotation != null)
                {
                    hashCode = (hashCode * 59) + this.Rotation.GetHashCode();
                }
                if (this.Opacity != null)
                {
                    hashCode = (hashCode * 59) + this.Opacity.GetHashCode();
                }
                if (this.FontStyle != null)
                {
                    hashCode = (hashCode * 59) + this.FontStyle.GetHashCode();
                }
                if (this.LineColor != null)
                {
                    hashCode = (hashCode * 59) + this.LineColor.GetHashCode();
                }
                if (this.LineWidth != null)
                {
                    hashCode = (hashCode * 59) + this.LineWidth.GetHashCode();
                }
                hashCode = (hashCode * 59) + this.StartPage.GetHashCode();
                hashCode = (hashCode * 59) + this.EndPage.GetHashCode();
                hashCode = (hashCode * 59) + this.PageInterval.GetHashCode();
                hashCode = (hashCode * 59) + this.PageOrientation.GetHashCode();
                hashCode = (hashCode * 59) + this.PrintOnly.GetHashCode();
                hashCode = (hashCode * 59) + this.StartSection.GetHashCode();
                hashCode = (hashCode * 59) + this.EndSection.GetHashCode();
                if (this.PageType != null)
                {
                    hashCode = (hashCode * 59) + this.PageType.GetHashCode();
                }
                hashCode = (hashCode * 59) + this.FailOnError.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        public IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
