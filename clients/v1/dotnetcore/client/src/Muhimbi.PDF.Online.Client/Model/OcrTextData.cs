/*
 * Muhimbi PDF
 *
 * Convert, Merge, Watermark, Secure and OCR files.
 *
 * The version of the OpenAPI document: 9.16
 * Contact: support@muhimbi.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = Muhimbi.PDF.Online.Client.Client.OpenAPIDateConverter;

namespace Muhimbi.PDF.Online.Client.Model
{
    /// <summary>
    /// Parameters for OCRText operation
    /// </summary>
    [DataContract(Name = "ocr_text_data")]
    public partial class OcrTextData : IEquatable<OcrTextData>, IValidatableObject
    {
        /// <summary>
        /// Language
        /// </summary>
        /// <value>Language</value>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum LanguageEnum
        {
            /// <summary>
            /// Enum English for value: English
            /// </summary>
            [EnumMember(Value = "English")]
            English = 1,

            /// <summary>
            /// Enum Arabic for value: Arabic
            /// </summary>
            [EnumMember(Value = "Arabic")]
            Arabic = 2,

            /// <summary>
            /// Enum Danish for value: Danish
            /// </summary>
            [EnumMember(Value = "Danish")]
            Danish = 3,

            /// <summary>
            /// Enum German for value: German
            /// </summary>
            [EnumMember(Value = "German")]
            German = 4,

            /// <summary>
            /// Enum Dutch for value: Dutch
            /// </summary>
            [EnumMember(Value = "Dutch")]
            Dutch = 5,

            /// <summary>
            /// Enum Finnish for value: Finnish
            /// </summary>
            [EnumMember(Value = "Finnish")]
            Finnish = 6,

            /// <summary>
            /// Enum French for value: French
            /// </summary>
            [EnumMember(Value = "French")]
            French = 7,

            /// <summary>
            /// Enum Hebrew for value: Hebrew
            /// </summary>
            [EnumMember(Value = "Hebrew")]
            Hebrew = 8,

            /// <summary>
            /// Enum Hungarian for value: Hungarian
            /// </summary>
            [EnumMember(Value = "Hungarian")]
            Hungarian = 9,

            /// <summary>
            /// Enum Italian for value: Italian
            /// </summary>
            [EnumMember(Value = "Italian")]
            Italian = 10,

            /// <summary>
            /// Enum Norwegian for value: Norwegian
            /// </summary>
            [EnumMember(Value = "Norwegian")]
            Norwegian = 11,

            /// <summary>
            /// Enum Portuguese for value: Portuguese
            /// </summary>
            [EnumMember(Value = "Portuguese")]
            Portuguese = 12,

            /// <summary>
            /// Enum Spanish for value: Spanish
            /// </summary>
            [EnumMember(Value = "Spanish")]
            Spanish = 13,

            /// <summary>
            /// Enum Swedish for value: Swedish
            /// </summary>
            [EnumMember(Value = "Swedish")]
            Swedish = 14,

            /// <summary>
            /// Enum Russian for value: Russian
            /// </summary>
            [EnumMember(Value = "Russian")]
            Russian = 15

        }


        /// <summary>
        /// Language
        /// </summary>
        /// <value>Language</value>
        [DataMember(Name = "language", EmitDefaultValue = false)]
        public LanguageEnum? Language { get; set; }
        /// <summary>
        /// Performance ()
        /// </summary>
        /// <value>Performance ()</value>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum PerformanceEnum
        {
            /// <summary>
            /// Enum SlowButAccurate for value: Slow but accurate
            /// </summary>
            [EnumMember(Value = "Slow but accurate")]
            SlowButAccurate = 1,

            /// <summary>
            /// Enum FasterAndLessAccurate for value: Faster and less accurate
            /// </summary>
            [EnumMember(Value = "Faster and less accurate")]
            FasterAndLessAccurate = 2,

            /// <summary>
            /// Enum FastestAndLeastAccurate for value: Fastest and least accurate
            /// </summary>
            [EnumMember(Value = "Fastest and least accurate")]
            FastestAndLeastAccurate = 3

        }


        /// <summary>
        /// Performance ()
        /// </summary>
        /// <value>Performance ()</value>
        [DataMember(Name = "performance", EmitDefaultValue = false)]
        public PerformanceEnum? Performance { get; set; }
        /// <summary>
        /// Characters option
        /// </summary>
        /// <value>Characters option</value>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum CharactersOptionEnum
        {
            /// <summary>
            /// Enum None for value: None
            /// </summary>
            [EnumMember(Value = "None")]
            None = 1,

            /// <summary>
            /// Enum Whitelist for value: Whitelist
            /// </summary>
            [EnumMember(Value = "Whitelist")]
            Whitelist = 2,

            /// <summary>
            /// Enum Blacklist for value: Blacklist
            /// </summary>
            [EnumMember(Value = "Blacklist")]
            Blacklist = 3

        }


        /// <summary>
        /// Characters option
        /// </summary>
        /// <value>Characters option</value>
        [DataMember(Name = "characters_option", EmitDefaultValue = false)]
        public CharactersOptionEnum? CharactersOption { get; set; }
        /// <summary>
        /// Initializes a new instance of the <see cref="OcrTextData" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected OcrTextData() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="OcrTextData" /> class.
        /// </summary>
        /// <param name="useAsyncPattern">Use async behaviour for API request (required) (default to false).</param>
        /// <param name="sourceFileName">Name of the source file including extension (required).</param>
        /// <param name="sourceFileContent">Content of the file to OCR (required).</param>
        /// <param name="sharepointFile">sharepointFile.</param>
        /// <param name="language">Language (default to LanguageEnum.English).</param>
        /// <param name="x">X Coordinate (in Pts, 1/72 of an inch).</param>
        /// <param name="y">Y Coordinate (in Pts, 1/72 of an inch).</param>
        /// <param name="width">Width of the OCR area (in Pts, 1/72 of an inch).</param>
        /// <param name="height">Height of the OCR area (in Pts, 1/72 of an inch).</param>
        /// <param name="pageNumber">Page number (leave blank to OCR all pages) (default to &quot;&quot;).</param>
        /// <param name="performance">Performance () (default to PerformanceEnum.SlowButAccurate).</param>
        /// <param name="charactersOption">Characters option (default to CharactersOptionEnum.None).</param>
        /// <param name="characters">Characters to blacklist or whitelist.</param>
        /// <param name="paginate">Paginate (default to false).</param>
        /// <param name="failOnError">Fail on error (default to true).</param>
        public OcrTextData(bool useAsyncPattern = false, string sourceFileName = default(string), byte[] sourceFileContent = default(byte[]), SharepointFile sharepointFile = default(SharepointFile), LanguageEnum? language = LanguageEnum.English, string x = default(string), string y = default(string), string width = default(string), string height = default(string), string pageNumber = "", PerformanceEnum? performance = PerformanceEnum.SlowButAccurate, CharactersOptionEnum? charactersOption = CharactersOptionEnum.None, string characters = default(string), bool paginate = false, bool failOnError = true)
        {
            this.UseAsyncPattern = useAsyncPattern;
            // to ensure "sourceFileName" is required (not null)
            if (sourceFileName == null)
            {
                throw new ArgumentNullException("sourceFileName is a required property for OcrTextData and cannot be null");
            }
            this.SourceFileName = sourceFileName;
            // to ensure "sourceFileContent" is required (not null)
            if (sourceFileContent == null)
            {
                throw new ArgumentNullException("sourceFileContent is a required property for OcrTextData and cannot be null");
            }
            this.SourceFileContent = sourceFileContent;
            this.SharepointFile = sharepointFile;
            this.Language = language;
            this.X = x;
            this.Y = y;
            this.Width = width;
            this.Height = height;
            // use default value if no "pageNumber" provided
            this.PageNumber = pageNumber ?? "";
            this.Performance = performance;
            this.CharactersOption = charactersOption;
            this.Characters = characters;
            this.Paginate = paginate;
            this.FailOnError = failOnError;
        }

        /// <summary>
        /// Use async behaviour for API request
        /// </summary>
        /// <value>Use async behaviour for API request</value>
        [DataMember(Name = "use_async_pattern", IsRequired = true, EmitDefaultValue = true)]
        public bool UseAsyncPattern { get; set; }

        /// <summary>
        /// Name of the source file including extension
        /// </summary>
        /// <value>Name of the source file including extension</value>
        [DataMember(Name = "source_file_name", IsRequired = true, EmitDefaultValue = false)]
        public string SourceFileName { get; set; }

        /// <summary>
        /// Content of the file to OCR
        /// </summary>
        /// <value>Content of the file to OCR</value>
        [DataMember(Name = "source_file_content", IsRequired = true, EmitDefaultValue = false)]
        public byte[] SourceFileContent { get; set; }

        /// <summary>
        /// Gets or Sets SharepointFile
        /// </summary>
        [DataMember(Name = "sharepoint_file", EmitDefaultValue = false)]
        public SharepointFile SharepointFile { get; set; }

        /// <summary>
        /// X Coordinate (in Pts, 1/72 of an inch)
        /// </summary>
        /// <value>X Coordinate (in Pts, 1/72 of an inch)</value>
        [DataMember(Name = "x", EmitDefaultValue = false)]
        public string X { get; set; }

        /// <summary>
        /// Y Coordinate (in Pts, 1/72 of an inch)
        /// </summary>
        /// <value>Y Coordinate (in Pts, 1/72 of an inch)</value>
        [DataMember(Name = "y", EmitDefaultValue = false)]
        public string Y { get; set; }

        /// <summary>
        /// Width of the OCR area (in Pts, 1/72 of an inch)
        /// </summary>
        /// <value>Width of the OCR area (in Pts, 1/72 of an inch)</value>
        [DataMember(Name = "width", EmitDefaultValue = false)]
        public string Width { get; set; }

        /// <summary>
        /// Height of the OCR area (in Pts, 1/72 of an inch)
        /// </summary>
        /// <value>Height of the OCR area (in Pts, 1/72 of an inch)</value>
        [DataMember(Name = "height", EmitDefaultValue = false)]
        public string Height { get; set; }

        /// <summary>
        /// Page number (leave blank to OCR all pages)
        /// </summary>
        /// <value>Page number (leave blank to OCR all pages)</value>
        [DataMember(Name = "page_number", EmitDefaultValue = false)]
        public string PageNumber { get; set; }

        /// <summary>
        /// Characters to blacklist or whitelist
        /// </summary>
        /// <value>Characters to blacklist or whitelist</value>
        [DataMember(Name = "characters", EmitDefaultValue = false)]
        public string Characters { get; set; }

        /// <summary>
        /// Paginate
        /// </summary>
        /// <value>Paginate</value>
        [DataMember(Name = "paginate", EmitDefaultValue = true)]
        public bool Paginate { get; set; }

        /// <summary>
        /// Fail on error
        /// </summary>
        /// <value>Fail on error</value>
        [DataMember(Name = "fail_on_error", EmitDefaultValue = true)]
        public bool FailOnError { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class OcrTextData {\n");
            sb.Append("  UseAsyncPattern: ").Append(UseAsyncPattern).Append("\n");
            sb.Append("  SourceFileName: ").Append(SourceFileName).Append("\n");
            sb.Append("  SourceFileContent: ").Append(SourceFileContent).Append("\n");
            sb.Append("  SharepointFile: ").Append(SharepointFile).Append("\n");
            sb.Append("  Language: ").Append(Language).Append("\n");
            sb.Append("  X: ").Append(X).Append("\n");
            sb.Append("  Y: ").Append(Y).Append("\n");
            sb.Append("  Width: ").Append(Width).Append("\n");
            sb.Append("  Height: ").Append(Height).Append("\n");
            sb.Append("  PageNumber: ").Append(PageNumber).Append("\n");
            sb.Append("  Performance: ").Append(Performance).Append("\n");
            sb.Append("  CharactersOption: ").Append(CharactersOption).Append("\n");
            sb.Append("  Characters: ").Append(Characters).Append("\n");
            sb.Append("  Paginate: ").Append(Paginate).Append("\n");
            sb.Append("  FailOnError: ").Append(FailOnError).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as OcrTextData);
        }

        /// <summary>
        /// Returns true if OcrTextData instances are equal
        /// </summary>
        /// <param name="input">Instance of OcrTextData to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(OcrTextData input)
        {
            if (input == null)
            {
                return false;
            }
            return 
                (
                    this.UseAsyncPattern == input.UseAsyncPattern ||
                    this.UseAsyncPattern.Equals(input.UseAsyncPattern)
                ) && 
                (
                    this.SourceFileName == input.SourceFileName ||
                    (this.SourceFileName != null &&
                    this.SourceFileName.Equals(input.SourceFileName))
                ) && 
                (
                    this.SourceFileContent == input.SourceFileContent ||
                    (this.SourceFileContent != null &&
                    this.SourceFileContent.Equals(input.SourceFileContent))
                ) && 
                (
                    this.SharepointFile == input.SharepointFile ||
                    (this.SharepointFile != null &&
                    this.SharepointFile.Equals(input.SharepointFile))
                ) && 
                (
                    this.Language == input.Language ||
                    this.Language.Equals(input.Language)
                ) && 
                (
                    this.X == input.X ||
                    (this.X != null &&
                    this.X.Equals(input.X))
                ) && 
                (
                    this.Y == input.Y ||
                    (this.Y != null &&
                    this.Y.Equals(input.Y))
                ) && 
                (
                    this.Width == input.Width ||
                    (this.Width != null &&
                    this.Width.Equals(input.Width))
                ) && 
                (
                    this.Height == input.Height ||
                    (this.Height != null &&
                    this.Height.Equals(input.Height))
                ) && 
                (
                    this.PageNumber == input.PageNumber ||
                    (this.PageNumber != null &&
                    this.PageNumber.Equals(input.PageNumber))
                ) && 
                (
                    this.Performance == input.Performance ||
                    this.Performance.Equals(input.Performance)
                ) && 
                (
                    this.CharactersOption == input.CharactersOption ||
                    this.CharactersOption.Equals(input.CharactersOption)
                ) && 
                (
                    this.Characters == input.Characters ||
                    (this.Characters != null &&
                    this.Characters.Equals(input.Characters))
                ) && 
                (
                    this.Paginate == input.Paginate ||
                    this.Paginate.Equals(input.Paginate)
                ) && 
                (
                    this.FailOnError == input.FailOnError ||
                    this.FailOnError.Equals(input.FailOnError)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                hashCode = (hashCode * 59) + this.UseAsyncPattern.GetHashCode();
                if (this.SourceFileName != null)
                {
                    hashCode = (hashCode * 59) + this.SourceFileName.GetHashCode();
                }
                if (this.SourceFileContent != null)
                {
                    hashCode = (hashCode * 59) + this.SourceFileContent.GetHashCode();
                }
                if (this.SharepointFile != null)
                {
                    hashCode = (hashCode * 59) + this.SharepointFile.GetHashCode();
                }
                hashCode = (hashCode * 59) + this.Language.GetHashCode();
                if (this.X != null)
                {
                    hashCode = (hashCode * 59) + this.X.GetHashCode();
                }
                if (this.Y != null)
                {
                    hashCode = (hashCode * 59) + this.Y.GetHashCode();
                }
                if (this.Width != null)
                {
                    hashCode = (hashCode * 59) + this.Width.GetHashCode();
                }
                if (this.Height != null)
                {
                    hashCode = (hashCode * 59) + this.Height.GetHashCode();
                }
                if (this.PageNumber != null)
                {
                    hashCode = (hashCode * 59) + this.PageNumber.GetHashCode();
                }
                hashCode = (hashCode * 59) + this.Performance.GetHashCode();
                hashCode = (hashCode * 59) + this.CharactersOption.GetHashCode();
                if (this.Characters != null)
                {
                    hashCode = (hashCode * 59) + this.Characters.GetHashCode();
                }
                hashCode = (hashCode * 59) + this.Paginate.GetHashCode();
                hashCode = (hashCode * 59) + this.FailOnError.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        public IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
