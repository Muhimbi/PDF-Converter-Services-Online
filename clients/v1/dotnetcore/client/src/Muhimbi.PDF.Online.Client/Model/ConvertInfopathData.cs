/*
 * Muhimbi PDF
 *
 * Convert, Merge, Watermark, Secure and OCR files.
 *
 * The version of the OpenAPI document: 9.16
 * Contact: support@muhimbi.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = Muhimbi.PDF.Online.Client.Client.OpenAPIDateConverter;

namespace Muhimbi.PDF.Online.Client.Model
{
    /// <summary>
    /// Parameters for Convert Infopath operation
    /// </summary>
    [DataContract(Name = "convert_infopath_data")]
    public partial class ConvertInfopathData : IEquatable<ConvertInfopathData>, IValidatableObject
    {
        /// <summary>
        /// Output format
        /// </summary>
        /// <value>Output format</value>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum OutputFormatEnum
        {
            /// <summary>
            /// Enum PDF for value: PDF
            /// </summary>
            [EnumMember(Value = "PDF")]
            PDF = 1,

            /// <summary>
            /// Enum XPS for value: XPS
            /// </summary>
            [EnumMember(Value = "XPS")]
            XPS = 2,

            /// <summary>
            /// Enum DOCX for value: DOCX
            /// </summary>
            [EnumMember(Value = "DOCX")]
            DOCX = 3,

            /// <summary>
            /// Enum DOC for value: DOC
            /// </summary>
            [EnumMember(Value = "DOC")]
            DOC = 4,

            /// <summary>
            /// Enum ODT for value: ODT
            /// </summary>
            [EnumMember(Value = "ODT")]
            ODT = 5,

            /// <summary>
            /// Enum RTF for value: RTF
            /// </summary>
            [EnumMember(Value = "RTF")]
            RTF = 6,

            /// <summary>
            /// Enum TXT for value: TXT
            /// </summary>
            [EnumMember(Value = "TXT")]
            TXT = 7,

            /// <summary>
            /// Enum MHT for value: MHT
            /// </summary>
            [EnumMember(Value = "MHT")]
            MHT = 8,

            /// <summary>
            /// Enum HTML for value: HTML
            /// </summary>
            [EnumMember(Value = "HTML")]
            HTML = 9,

            /// <summary>
            /// Enum XML for value: XML
            /// </summary>
            [EnumMember(Value = "XML")]
            XML = 10,

            /// <summary>
            /// Enum XLS for value: XLS
            /// </summary>
            [EnumMember(Value = "XLS")]
            XLS = 11,

            /// <summary>
            /// Enum XLSX for value: XLSX
            /// </summary>
            [EnumMember(Value = "XLSX")]
            XLSX = 12,

            /// <summary>
            /// Enum CSV for value: CSV
            /// </summary>
            [EnumMember(Value = "CSV")]
            CSV = 13,

            /// <summary>
            /// Enum ODS for value: ODS
            /// </summary>
            [EnumMember(Value = "ODS")]
            ODS = 14

        }


        /// <summary>
        /// Output format
        /// </summary>
        /// <value>Output format</value>
        [DataMember(Name = "output_format", IsRequired = true, EmitDefaultValue = false)]
        public OutputFormatEnum OutputFormat { get; set; }
        /// <summary>
        /// What to do with attachments
        /// </summary>
        /// <value>What to do with attachments</value>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum AttachmentMergeModeEnum
        {
            /// <summary>
            /// Enum Default for value: Default
            /// </summary>
            [EnumMember(Value = "Default")]
            Default = 1,

            /// <summary>
            /// Enum Merge for value: Merge
            /// </summary>
            [EnumMember(Value = "Merge")]
            Merge = 2,

            /// <summary>
            /// Enum AttachAsPDF for value: AttachAsPDF
            /// </summary>
            [EnumMember(Value = "AttachAsPDF")]
            AttachAsPDF = 3,

            /// <summary>
            /// Enum AttachOriginal for value: AttachOriginal
            /// </summary>
            [EnumMember(Value = "AttachOriginal")]
            AttachOriginal = 4

        }


        /// <summary>
        /// What to do with attachments
        /// </summary>
        /// <value>What to do with attachments</value>
        [DataMember(Name = "attachment_merge_mode", EmitDefaultValue = false)]
        public AttachmentMergeModeEnum? AttachmentMergeMode { get; set; }
        /// <summary>
        /// What to do with attachments which cannot be converted into PDF
        /// </summary>
        /// <value>What to do with attachments which cannot be converted into PDF</value>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum UnsupportedAttachmentBehaviourEnum
        {
            /// <summary>
            /// Enum Error for value: Error
            /// </summary>
            [EnumMember(Value = "Error")]
            Error = 1,

            /// <summary>
            /// Enum Remove for value: Remove
            /// </summary>
            [EnumMember(Value = "Remove")]
            Remove = 2,

            /// <summary>
            /// Enum AttachOriginal for value: AttachOriginal
            /// </summary>
            [EnumMember(Value = "AttachOriginal")]
            AttachOriginal = 3

        }


        /// <summary>
        /// What to do with attachments which cannot be converted into PDF
        /// </summary>
        /// <value>What to do with attachments which cannot be converted into PDF</value>
        [DataMember(Name = "unsupported_attachment_behaviour", EmitDefaultValue = false)]
        public UnsupportedAttachmentBehaviourEnum? UnsupportedAttachmentBehaviour { get; set; }
        /// <summary>
        /// Specify paper size to be used when it is not specified in the view
        /// </summary>
        /// <value>Specify paper size to be used when it is not specified in the view</value>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum DefaultPaperSizeEnum
        {
            /// <summary>
            /// Enum A3 for value: A3
            /// </summary>
            [EnumMember(Value = "A3")]
            A3 = 1,

            /// <summary>
            /// Enum A4 for value: A4
            /// </summary>
            [EnumMember(Value = "A4")]
            A4 = 2,

            /// <summary>
            /// Enum A5 for value: A5
            /// </summary>
            [EnumMember(Value = "A5")]
            A5 = 3,

            /// <summary>
            /// Enum Legal for value: Legal
            /// </summary>
            [EnumMember(Value = "Legal")]
            Legal = 4,

            /// <summary>
            /// Enum Letter for value: Letter
            /// </summary>
            [EnumMember(Value = "Letter")]
            Letter = 5,

            /// <summary>
            /// Enum Custom for value: Custom
            /// </summary>
            [EnumMember(Value = "Custom")]
            Custom = 6

        }


        /// <summary>
        /// Specify paper size to be used when it is not specified in the view
        /// </summary>
        /// <value>Specify paper size to be used when it is not specified in the view</value>
        [DataMember(Name = "default_paper_size", EmitDefaultValue = false)]
        public DefaultPaperSizeEnum? DefaultPaperSize { get; set; }
        /// <summary>
        /// Force this papers size regardless of whether it is set in the views or not
        /// </summary>
        /// <value>Force this papers size regardless of whether it is set in the views or not</value>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum ForcePaperSizeEnum
        {
            /// <summary>
            /// Enum A3 for value: A3
            /// </summary>
            [EnumMember(Value = "A3")]
            A3 = 1,

            /// <summary>
            /// Enum A4 for value: A4
            /// </summary>
            [EnumMember(Value = "A4")]
            A4 = 2,

            /// <summary>
            /// Enum A5 for value: A5
            /// </summary>
            [EnumMember(Value = "A5")]
            A5 = 3,

            /// <summary>
            /// Enum Legal for value: Legal
            /// </summary>
            [EnumMember(Value = "Legal")]
            Legal = 4,

            /// <summary>
            /// Enum Letter for value: Letter
            /// </summary>
            [EnumMember(Value = "Letter")]
            Letter = 5,

            /// <summary>
            /// Enum Custom for value: Custom
            /// </summary>
            [EnumMember(Value = "Custom")]
            Custom = 6

        }


        /// <summary>
        /// Force this papers size regardless of whether it is set in the views or not
        /// </summary>
        /// <value>Force this papers size regardless of whether it is set in the views or not</value>
        [DataMember(Name = "force_paper_size", EmitDefaultValue = false)]
        public ForcePaperSizeEnum? ForcePaperSize { get; set; }
        /// <summary>
        /// Specify papers size to be used if it is not specified in the view
        /// </summary>
        /// <value>Specify papers size to be used if it is not specified in the view</value>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum DefaultPageOrientationEnum
        {
            /// <summary>
            /// Enum Default for value: Default
            /// </summary>
            [EnumMember(Value = "Default")]
            Default = 1,

            /// <summary>
            /// Enum Portrait for value: Portrait
            /// </summary>
            [EnumMember(Value = "Portrait")]
            Portrait = 2,

            /// <summary>
            /// Enum Landscape for value: Landscape
            /// </summary>
            [EnumMember(Value = "Landscape")]
            Landscape = 3,

            /// <summary>
            /// Enum Both for value: Both
            /// </summary>
            [EnumMember(Value = "Both")]
            Both = 4

        }


        /// <summary>
        /// Specify papers size to be used if it is not specified in the view
        /// </summary>
        /// <value>Specify papers size to be used if it is not specified in the view</value>
        [DataMember(Name = "default_page_orientation", EmitDefaultValue = false)]
        public DefaultPageOrientationEnum? DefaultPageOrientation { get; set; }
        /// <summary>
        /// Force page orientation regardless of whether it is set in the view or not
        /// </summary>
        /// <value>Force page orientation regardless of whether it is set in the view or not</value>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum ForcePageOrientationEnum
        {
            /// <summary>
            /// Enum Default for value: Default
            /// </summary>
            [EnumMember(Value = "Default")]
            Default = 1,

            /// <summary>
            /// Enum Portrait for value: Portrait
            /// </summary>
            [EnumMember(Value = "Portrait")]
            Portrait = 2,

            /// <summary>
            /// Enum Landscape for value: Landscape
            /// </summary>
            [EnumMember(Value = "Landscape")]
            Landscape = 3,

            /// <summary>
            /// Enum Both for value: Both
            /// </summary>
            [EnumMember(Value = "Both")]
            Both = 4

        }


        /// <summary>
        /// Force page orientation regardless of whether it is set in the view or not
        /// </summary>
        /// <value>Force page orientation regardless of whether it is set in the view or not</value>
        [DataMember(Name = "force_page_orientation", EmitDefaultValue = false)]
        public ForcePageOrientationEnum? ForcePageOrientation { get; set; }
        /// <summary>
        /// Quality of the output file
        /// </summary>
        /// <value>Quality of the output file</value>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum QualityEnum
        {
            /// <summary>
            /// Enum OptimizeForPrint for value: OptimizeForPrint
            /// </summary>
            [EnumMember(Value = "OptimizeForPrint")]
            OptimizeForPrint = 1,

            /// <summary>
            /// Enum OptimizeForOnScreen for value: OptimizeForOnScreen
            /// </summary>
            [EnumMember(Value = "OptimizeForOnScreen")]
            OptimizeForOnScreen = 2,

            /// <summary>
            /// Enum Original for value: Original
            /// </summary>
            [EnumMember(Value = "Original")]
            Original = 3

        }


        /// <summary>
        /// Quality of the output file
        /// </summary>
        /// <value>Quality of the output file</value>
        [DataMember(Name = "quality", EmitDefaultValue = false)]
        public QualityEnum? Quality { get; set; }
        /// <summary>
        /// Initializes a new instance of the <see cref="ConvertInfopathData" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected ConvertInfopathData() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="ConvertInfopathData" /> class.
        /// </summary>
        /// <param name="useAsyncPattern">Use async behaviour for API request (required) (default to false).</param>
        /// <param name="sourceFileName">Name of the source file including extension (required).</param>
        /// <param name="sharepointFile">sharepointFile.</param>
        /// <param name="sourceFileContent">Content of the file to convert (required).</param>
        /// <param name="outputFormat">Output format (required) (default to OutputFormatEnum.PDF).</param>
        /// <param name="copyMetadata">Copy metadata (Only for SharePoint operations) (required) (default to false).</param>
        /// <param name="templateFileContent">Optional XSN file content.</param>
        /// <param name="viewsToConvert">Comma separated list view names to convert.</param>
        /// <param name="convertAttachments">Include attachments (default to true).</param>
        /// <param name="attachmentMergeMode">What to do with attachments.</param>
        /// <param name="unsupportedAttachmentBehaviour">What to do with attachments which cannot be converted into PDF.</param>
        /// <param name="breakMergeOnError">Break conversion when processing of an individual part fails.</param>
        /// <param name="includeAttachmentTypes">Comma separated values, e.g. *.txt, June???.docx.</param>
        /// <param name="excludeAttachmentTypes">Comma separated values, e.g. *.txt, June???.docx.</param>
        /// <param name="defaultPaperSize">Specify paper size to be used when it is not specified in the view.</param>
        /// <param name="defaultPaperSizeCustom">Applicable if &#39;Default paper size&#39; is set to &#39;Custom&#39;.</param>
        /// <param name="forcePaperSize">Force this papers size regardless of whether it is set in the views or not.</param>
        /// <param name="forcePaperSizeCustom">Applicable if &#39;Force paper size&#39; is set to custom.</param>
        /// <param name="defaultPageOrientation">Specify papers size to be used if it is not specified in the view (default to DefaultPageOrientationEnum.Default).</param>
        /// <param name="forcePageOrientation">Force page orientation regardless of whether it is set in the view or not.</param>
        /// <param name="startPage">The first page to include.</param>
        /// <param name="endPage">The last page to include.</param>
        /// <param name="quality">Quality of the output file.</param>
        /// <param name="overrideSettings">Optional settings using Muhimbi&#39;s XML syntax.</param>
        /// <param name="failOnError">Fail on error (default to true).</param>
        public ConvertInfopathData(bool useAsyncPattern = false, string sourceFileName = default(string), SharepointFile sharepointFile = default(SharepointFile), byte[] sourceFileContent = default(byte[]), OutputFormatEnum outputFormat = OutputFormatEnum.PDF, bool copyMetadata = false, byte[] templateFileContent = default(byte[]), string viewsToConvert = default(string), bool convertAttachments = true, AttachmentMergeModeEnum? attachmentMergeMode = default(AttachmentMergeModeEnum?), UnsupportedAttachmentBehaviourEnum? unsupportedAttachmentBehaviour = default(UnsupportedAttachmentBehaviourEnum?), bool breakMergeOnError = default(bool), string includeAttachmentTypes = default(string), string excludeAttachmentTypes = default(string), DefaultPaperSizeEnum? defaultPaperSize = default(DefaultPaperSizeEnum?), string defaultPaperSizeCustom = default(string), ForcePaperSizeEnum? forcePaperSize = default(ForcePaperSizeEnum?), string forcePaperSizeCustom = default(string), DefaultPageOrientationEnum? defaultPageOrientation = DefaultPageOrientationEnum.Default, ForcePageOrientationEnum? forcePageOrientation = default(ForcePageOrientationEnum?), int startPage = default(int), int endPage = default(int), QualityEnum? quality = default(QualityEnum?), string overrideSettings = default(string), bool failOnError = true)
        {
            this.UseAsyncPattern = useAsyncPattern;
            // to ensure "sourceFileName" is required (not null)
            if (sourceFileName == null)
            {
                throw new ArgumentNullException("sourceFileName is a required property for ConvertInfopathData and cannot be null");
            }
            this.SourceFileName = sourceFileName;
            // to ensure "sourceFileContent" is required (not null)
            if (sourceFileContent == null)
            {
                throw new ArgumentNullException("sourceFileContent is a required property for ConvertInfopathData and cannot be null");
            }
            this.SourceFileContent = sourceFileContent;
            this.OutputFormat = outputFormat;
            this.CopyMetadata = copyMetadata;
            this.SharepointFile = sharepointFile;
            this.TemplateFileContent = templateFileContent;
            this.ViewsToConvert = viewsToConvert;
            this.ConvertAttachments = convertAttachments;
            this.AttachmentMergeMode = attachmentMergeMode;
            this.UnsupportedAttachmentBehaviour = unsupportedAttachmentBehaviour;
            this.BreakMergeOnError = breakMergeOnError;
            this.IncludeAttachmentTypes = includeAttachmentTypes;
            this.ExcludeAttachmentTypes = excludeAttachmentTypes;
            this.DefaultPaperSize = defaultPaperSize;
            this.DefaultPaperSizeCustom = defaultPaperSizeCustom;
            this.ForcePaperSize = forcePaperSize;
            this.ForcePaperSizeCustom = forcePaperSizeCustom;
            this.DefaultPageOrientation = defaultPageOrientation;
            this.ForcePageOrientation = forcePageOrientation;
            this.StartPage = startPage;
            this.EndPage = endPage;
            this.Quality = quality;
            this.OverrideSettings = overrideSettings;
            this.FailOnError = failOnError;
        }

        /// <summary>
        /// Use async behaviour for API request
        /// </summary>
        /// <value>Use async behaviour for API request</value>
        [DataMember(Name = "use_async_pattern", IsRequired = true, EmitDefaultValue = true)]
        public bool UseAsyncPattern { get; set; }

        /// <summary>
        /// Name of the source file including extension
        /// </summary>
        /// <value>Name of the source file including extension</value>
        [DataMember(Name = "source_file_name", IsRequired = true, EmitDefaultValue = false)]
        public string SourceFileName { get; set; }

        /// <summary>
        /// Gets or Sets SharepointFile
        /// </summary>
        [DataMember(Name = "sharepoint_file", EmitDefaultValue = false)]
        public SharepointFile SharepointFile { get; set; }

        /// <summary>
        /// Content of the file to convert
        /// </summary>
        /// <value>Content of the file to convert</value>
        [DataMember(Name = "source_file_content", IsRequired = true, EmitDefaultValue = false)]
        public byte[] SourceFileContent { get; set; }

        /// <summary>
        /// Copy metadata (Only for SharePoint operations)
        /// </summary>
        /// <value>Copy metadata (Only for SharePoint operations)</value>
        [DataMember(Name = "copy_metadata", IsRequired = true, EmitDefaultValue = true)]
        public bool CopyMetadata { get; set; }

        /// <summary>
        /// Optional XSN file content
        /// </summary>
        /// <value>Optional XSN file content</value>
        [DataMember(Name = "template_file_content", EmitDefaultValue = false)]
        public byte[] TemplateFileContent { get; set; }

        /// <summary>
        /// Comma separated list view names to convert
        /// </summary>
        /// <value>Comma separated list view names to convert</value>
        [DataMember(Name = "views_to_convert", EmitDefaultValue = false)]
        public string ViewsToConvert { get; set; }

        /// <summary>
        /// Include attachments
        /// </summary>
        /// <value>Include attachments</value>
        [DataMember(Name = "convert_attachments", EmitDefaultValue = true)]
        public bool ConvertAttachments { get; set; }

        /// <summary>
        /// Break conversion when processing of an individual part fails
        /// </summary>
        /// <value>Break conversion when processing of an individual part fails</value>
        [DataMember(Name = "break_merge_on_error", EmitDefaultValue = true)]
        public bool BreakMergeOnError { get; set; }

        /// <summary>
        /// Comma separated values, e.g. *.txt, June???.docx
        /// </summary>
        /// <value>Comma separated values, e.g. *.txt, June???.docx</value>
        [DataMember(Name = "include_attachment_types", EmitDefaultValue = false)]
        public string IncludeAttachmentTypes { get; set; }

        /// <summary>
        /// Comma separated values, e.g. *.txt, June???.docx
        /// </summary>
        /// <value>Comma separated values, e.g. *.txt, June???.docx</value>
        [DataMember(Name = "exclude_attachment_types", EmitDefaultValue = false)]
        public string ExcludeAttachmentTypes { get; set; }

        /// <summary>
        /// Applicable if &#39;Default paper size&#39; is set to &#39;Custom&#39;
        /// </summary>
        /// <value>Applicable if &#39;Default paper size&#39; is set to &#39;Custom&#39;</value>
        [DataMember(Name = "default_paper_size_custom", EmitDefaultValue = false)]
        public string DefaultPaperSizeCustom { get; set; }

        /// <summary>
        /// Applicable if &#39;Force paper size&#39; is set to custom
        /// </summary>
        /// <value>Applicable if &#39;Force paper size&#39; is set to custom</value>
        [DataMember(Name = "force_paper_size_custom", EmitDefaultValue = false)]
        public string ForcePaperSizeCustom { get; set; }

        /// <summary>
        /// The first page to include
        /// </summary>
        /// <value>The first page to include</value>
        [DataMember(Name = "start_page", EmitDefaultValue = false)]
        public int StartPage { get; set; }

        /// <summary>
        /// The last page to include
        /// </summary>
        /// <value>The last page to include</value>
        [DataMember(Name = "end_page", EmitDefaultValue = false)]
        public int EndPage { get; set; }

        /// <summary>
        /// Optional settings using Muhimbi&#39;s XML syntax
        /// </summary>
        /// <value>Optional settings using Muhimbi&#39;s XML syntax</value>
        [DataMember(Name = "override_settings", EmitDefaultValue = false)]
        public string OverrideSettings { get; set; }

        /// <summary>
        /// Fail on error
        /// </summary>
        /// <value>Fail on error</value>
        [DataMember(Name = "fail_on_error", EmitDefaultValue = true)]
        public bool FailOnError { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class ConvertInfopathData {\n");
            sb.Append("  UseAsyncPattern: ").Append(UseAsyncPattern).Append("\n");
            sb.Append("  SourceFileName: ").Append(SourceFileName).Append("\n");
            sb.Append("  SharepointFile: ").Append(SharepointFile).Append("\n");
            sb.Append("  SourceFileContent: ").Append(SourceFileContent).Append("\n");
            sb.Append("  OutputFormat: ").Append(OutputFormat).Append("\n");
            sb.Append("  CopyMetadata: ").Append(CopyMetadata).Append("\n");
            sb.Append("  TemplateFileContent: ").Append(TemplateFileContent).Append("\n");
            sb.Append("  ViewsToConvert: ").Append(ViewsToConvert).Append("\n");
            sb.Append("  ConvertAttachments: ").Append(ConvertAttachments).Append("\n");
            sb.Append("  AttachmentMergeMode: ").Append(AttachmentMergeMode).Append("\n");
            sb.Append("  UnsupportedAttachmentBehaviour: ").Append(UnsupportedAttachmentBehaviour).Append("\n");
            sb.Append("  BreakMergeOnError: ").Append(BreakMergeOnError).Append("\n");
            sb.Append("  IncludeAttachmentTypes: ").Append(IncludeAttachmentTypes).Append("\n");
            sb.Append("  ExcludeAttachmentTypes: ").Append(ExcludeAttachmentTypes).Append("\n");
            sb.Append("  DefaultPaperSize: ").Append(DefaultPaperSize).Append("\n");
            sb.Append("  DefaultPaperSizeCustom: ").Append(DefaultPaperSizeCustom).Append("\n");
            sb.Append("  ForcePaperSize: ").Append(ForcePaperSize).Append("\n");
            sb.Append("  ForcePaperSizeCustom: ").Append(ForcePaperSizeCustom).Append("\n");
            sb.Append("  DefaultPageOrientation: ").Append(DefaultPageOrientation).Append("\n");
            sb.Append("  ForcePageOrientation: ").Append(ForcePageOrientation).Append("\n");
            sb.Append("  StartPage: ").Append(StartPage).Append("\n");
            sb.Append("  EndPage: ").Append(EndPage).Append("\n");
            sb.Append("  Quality: ").Append(Quality).Append("\n");
            sb.Append("  OverrideSettings: ").Append(OverrideSettings).Append("\n");
            sb.Append("  FailOnError: ").Append(FailOnError).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as ConvertInfopathData);
        }

        /// <summary>
        /// Returns true if ConvertInfopathData instances are equal
        /// </summary>
        /// <param name="input">Instance of ConvertInfopathData to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(ConvertInfopathData input)
        {
            if (input == null)
            {
                return false;
            }
            return 
                (
                    this.UseAsyncPattern == input.UseAsyncPattern ||
                    this.UseAsyncPattern.Equals(input.UseAsyncPattern)
                ) && 
                (
                    this.SourceFileName == input.SourceFileName ||
                    (this.SourceFileName != null &&
                    this.SourceFileName.Equals(input.SourceFileName))
                ) && 
                (
                    this.SharepointFile == input.SharepointFile ||
                    (this.SharepointFile != null &&
                    this.SharepointFile.Equals(input.SharepointFile))
                ) && 
                (
                    this.SourceFileContent == input.SourceFileContent ||
                    (this.SourceFileContent != null &&
                    this.SourceFileContent.Equals(input.SourceFileContent))
                ) && 
                (
                    this.OutputFormat == input.OutputFormat ||
                    this.OutputFormat.Equals(input.OutputFormat)
                ) && 
                (
                    this.CopyMetadata == input.CopyMetadata ||
                    this.CopyMetadata.Equals(input.CopyMetadata)
                ) && 
                (
                    this.TemplateFileContent == input.TemplateFileContent ||
                    (this.TemplateFileContent != null &&
                    this.TemplateFileContent.Equals(input.TemplateFileContent))
                ) && 
                (
                    this.ViewsToConvert == input.ViewsToConvert ||
                    (this.ViewsToConvert != null &&
                    this.ViewsToConvert.Equals(input.ViewsToConvert))
                ) && 
                (
                    this.ConvertAttachments == input.ConvertAttachments ||
                    this.ConvertAttachments.Equals(input.ConvertAttachments)
                ) && 
                (
                    this.AttachmentMergeMode == input.AttachmentMergeMode ||
                    this.AttachmentMergeMode.Equals(input.AttachmentMergeMode)
                ) && 
                (
                    this.UnsupportedAttachmentBehaviour == input.UnsupportedAttachmentBehaviour ||
                    this.UnsupportedAttachmentBehaviour.Equals(input.UnsupportedAttachmentBehaviour)
                ) && 
                (
                    this.BreakMergeOnError == input.BreakMergeOnError ||
                    this.BreakMergeOnError.Equals(input.BreakMergeOnError)
                ) && 
                (
                    this.IncludeAttachmentTypes == input.IncludeAttachmentTypes ||
                    (this.IncludeAttachmentTypes != null &&
                    this.IncludeAttachmentTypes.Equals(input.IncludeAttachmentTypes))
                ) && 
                (
                    this.ExcludeAttachmentTypes == input.ExcludeAttachmentTypes ||
                    (this.ExcludeAttachmentTypes != null &&
                    this.ExcludeAttachmentTypes.Equals(input.ExcludeAttachmentTypes))
                ) && 
                (
                    this.DefaultPaperSize == input.DefaultPaperSize ||
                    this.DefaultPaperSize.Equals(input.DefaultPaperSize)
                ) && 
                (
                    this.DefaultPaperSizeCustom == input.DefaultPaperSizeCustom ||
                    (this.DefaultPaperSizeCustom != null &&
                    this.DefaultPaperSizeCustom.Equals(input.DefaultPaperSizeCustom))
                ) && 
                (
                    this.ForcePaperSize == input.ForcePaperSize ||
                    this.ForcePaperSize.Equals(input.ForcePaperSize)
                ) && 
                (
                    this.ForcePaperSizeCustom == input.ForcePaperSizeCustom ||
                    (this.ForcePaperSizeCustom != null &&
                    this.ForcePaperSizeCustom.Equals(input.ForcePaperSizeCustom))
                ) && 
                (
                    this.DefaultPageOrientation == input.DefaultPageOrientation ||
                    this.DefaultPageOrientation.Equals(input.DefaultPageOrientation)
                ) && 
                (
                    this.ForcePageOrientation == input.ForcePageOrientation ||
                    this.ForcePageOrientation.Equals(input.ForcePageOrientation)
                ) && 
                (
                    this.StartPage == input.StartPage ||
                    this.StartPage.Equals(input.StartPage)
                ) && 
                (
                    this.EndPage == input.EndPage ||
                    this.EndPage.Equals(input.EndPage)
                ) && 
                (
                    this.Quality == input.Quality ||
                    this.Quality.Equals(input.Quality)
                ) && 
                (
                    this.OverrideSettings == input.OverrideSettings ||
                    (this.OverrideSettings != null &&
                    this.OverrideSettings.Equals(input.OverrideSettings))
                ) && 
                (
                    this.FailOnError == input.FailOnError ||
                    this.FailOnError.Equals(input.FailOnError)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                hashCode = (hashCode * 59) + this.UseAsyncPattern.GetHashCode();
                if (this.SourceFileName != null)
                {
                    hashCode = (hashCode * 59) + this.SourceFileName.GetHashCode();
                }
                if (this.SharepointFile != null)
                {
                    hashCode = (hashCode * 59) + this.SharepointFile.GetHashCode();
                }
                if (this.SourceFileContent != null)
                {
                    hashCode = (hashCode * 59) + this.SourceFileContent.GetHashCode();
                }
                hashCode = (hashCode * 59) + this.OutputFormat.GetHashCode();
                hashCode = (hashCode * 59) + this.CopyMetadata.GetHashCode();
                if (this.TemplateFileContent != null)
                {
                    hashCode = (hashCode * 59) + this.TemplateFileContent.GetHashCode();
                }
                if (this.ViewsToConvert != null)
                {
                    hashCode = (hashCode * 59) + this.ViewsToConvert.GetHashCode();
                }
                hashCode = (hashCode * 59) + this.ConvertAttachments.GetHashCode();
                hashCode = (hashCode * 59) + this.AttachmentMergeMode.GetHashCode();
                hashCode = (hashCode * 59) + this.UnsupportedAttachmentBehaviour.GetHashCode();
                hashCode = (hashCode * 59) + this.BreakMergeOnError.GetHashCode();
                if (this.IncludeAttachmentTypes != null)
                {
                    hashCode = (hashCode * 59) + this.IncludeAttachmentTypes.GetHashCode();
                }
                if (this.ExcludeAttachmentTypes != null)
                {
                    hashCode = (hashCode * 59) + this.ExcludeAttachmentTypes.GetHashCode();
                }
                hashCode = (hashCode * 59) + this.DefaultPaperSize.GetHashCode();
                if (this.DefaultPaperSizeCustom != null)
                {
                    hashCode = (hashCode * 59) + this.DefaultPaperSizeCustom.GetHashCode();
                }
                hashCode = (hashCode * 59) + this.ForcePaperSize.GetHashCode();
                if (this.ForcePaperSizeCustom != null)
                {
                    hashCode = (hashCode * 59) + this.ForcePaperSizeCustom.GetHashCode();
                }
                hashCode = (hashCode * 59) + this.DefaultPageOrientation.GetHashCode();
                hashCode = (hashCode * 59) + this.ForcePageOrientation.GetHashCode();
                hashCode = (hashCode * 59) + this.StartPage.GetHashCode();
                hashCode = (hashCode * 59) + this.EndPage.GetHashCode();
                hashCode = (hashCode * 59) + this.Quality.GetHashCode();
                if (this.OverrideSettings != null)
                {
                    hashCode = (hashCode * 59) + this.OverrideSettings.GetHashCode();
                }
                hashCode = (hashCode * 59) + this.FailOnError.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        public IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
