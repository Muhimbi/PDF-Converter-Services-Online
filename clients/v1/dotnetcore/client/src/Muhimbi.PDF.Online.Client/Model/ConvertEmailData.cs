/*
 * Muhimbi PDF
 *
 * Convert, Merge, Watermark, Secure and OCR files.
 *
 * The version of the OpenAPI document: 9.16
 * Contact: support@muhimbi.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = Muhimbi.PDF.Online.Client.Client.OpenAPIDateConverter;

namespace Muhimbi.PDF.Online.Client.Model
{
    /// <summary>
    /// Parameters for Convert Email operation
    /// </summary>
    [DataContract(Name = "convert_email_data")]
    public partial class ConvertEmailData : IEquatable<ConvertEmailData>, IValidatableObject
    {
        /// <summary>
        /// What to do with attachments
        /// </summary>
        /// <value>What to do with attachments</value>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum AttachmentMergeModeEnum
        {
            /// <summary>
            /// Enum Default for value: Default
            /// </summary>
            [EnumMember(Value = "Default")]
            Default = 1,

            /// <summary>
            /// Enum Merge for value: Merge
            /// </summary>
            [EnumMember(Value = "Merge")]
            Merge = 2,

            /// <summary>
            /// Enum AttachAsPDF for value: AttachAsPDF
            /// </summary>
            [EnumMember(Value = "AttachAsPDF")]
            AttachAsPDF = 3,

            /// <summary>
            /// Enum AttachOriginal for value: AttachOriginal
            /// </summary>
            [EnumMember(Value = "AttachOriginal")]
            AttachOriginal = 4

        }


        /// <summary>
        /// What to do with attachments
        /// </summary>
        /// <value>What to do with attachments</value>
        [DataMember(Name = "attachment_merge_mode", EmitDefaultValue = false)]
        public AttachmentMergeModeEnum? AttachmentMergeMode { get; set; }
        /// <summary>
        /// What to do with attachments which cannot be converted into PDF
        /// </summary>
        /// <value>What to do with attachments which cannot be converted into PDF</value>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum UnsupportedAttachmentBehaviourEnum
        {
            /// <summary>
            /// Enum Error for value: Error
            /// </summary>
            [EnumMember(Value = "Error")]
            Error = 1,

            /// <summary>
            /// Enum Remove for value: Remove
            /// </summary>
            [EnumMember(Value = "Remove")]
            Remove = 2,

            /// <summary>
            /// Enum AttachOriginal for value: AttachOriginal
            /// </summary>
            [EnumMember(Value = "AttachOriginal")]
            AttachOriginal = 3

        }


        /// <summary>
        /// What to do with attachments which cannot be converted into PDF
        /// </summary>
        /// <value>What to do with attachments which cannot be converted into PDF</value>
        [DataMember(Name = "unsupported_attachment_behaviour", EmitDefaultValue = false)]
        public UnsupportedAttachmentBehaviourEnum? UnsupportedAttachmentBehaviour { get; set; }
        /// <summary>
        /// Paper size for the output
        /// </summary>
        /// <value>Paper size for the output</value>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum PaperSizeEnum
        {
            /// <summary>
            /// Enum A3 for value: A3
            /// </summary>
            [EnumMember(Value = "A3")]
            A3 = 1,

            /// <summary>
            /// Enum A4 for value: A4
            /// </summary>
            [EnumMember(Value = "A4")]
            A4 = 2,

            /// <summary>
            /// Enum A5 for value: A5
            /// </summary>
            [EnumMember(Value = "A5")]
            A5 = 3,

            /// <summary>
            /// Enum Legal for value: Legal
            /// </summary>
            [EnumMember(Value = "Legal")]
            Legal = 4,

            /// <summary>
            /// Enum Letter for value: Letter
            /// </summary>
            [EnumMember(Value = "Letter")]
            Letter = 5,

            /// <summary>
            /// Enum Custom for value: Custom
            /// </summary>
            [EnumMember(Value = "Custom")]
            Custom = 6

        }


        /// <summary>
        /// Paper size for the output
        /// </summary>
        /// <value>Paper size for the output</value>
        [DataMember(Name = "paper_size", EmitDefaultValue = false)]
        public PaperSizeEnum? PaperSize { get; set; }
        /// <summary>
        /// Quality of the output file
        /// </summary>
        /// <value>Quality of the output file</value>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum QualityEnum
        {
            /// <summary>
            /// Enum OptimizeForPrint for value: OptimizeForPrint
            /// </summary>
            [EnumMember(Value = "OptimizeForPrint")]
            OptimizeForPrint = 1,

            /// <summary>
            /// Enum OptimizeForOnScreen for value: OptimizeForOnScreen
            /// </summary>
            [EnumMember(Value = "OptimizeForOnScreen")]
            OptimizeForOnScreen = 2,

            /// <summary>
            /// Enum Original for value: Original
            /// </summary>
            [EnumMember(Value = "Original")]
            Original = 3

        }


        /// <summary>
        /// Quality of the output file
        /// </summary>
        /// <value>Quality of the output file</value>
        [DataMember(Name = "quality", EmitDefaultValue = false)]
        public QualityEnum? Quality { get; set; }
        /// <summary>
        /// Initializes a new instance of the <see cref="ConvertEmailData" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected ConvertEmailData() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="ConvertEmailData" /> class.
        /// </summary>
        /// <param name="useAsyncPattern">Use async behaviour for API request (required) (default to false).</param>
        /// <param name="sourceFileName">Name of the source file including extension (required).</param>
        /// <param name="sharepointFile">sharepointFile.</param>
        /// <param name="sourceFileContent">Content of the file to convert (required).</param>
        /// <param name="copyMetadata">Copy metadata (Only for SharePoint operations) (required) (default to false).</param>
        /// <param name="convertAttachments">Include attachments (default to true).</param>
        /// <param name="attachmentMergeMode">What to do with attachments.</param>
        /// <param name="displayAttachmentSummary">Display attachment name in the email header (default to true).</param>
        /// <param name="unsupportedAttachmentBehaviour">What to do with attachments which cannot be converted into PDF (default to UnsupportedAttachmentBehaviourEnum.Error).</param>
        /// <param name="includeAttachmentTypes">Comma separated values, e.g. *.txt, June???.docx.</param>
        /// <param name="excludeAttachmentTypes">Comma separated values, e.g. *.txt, June???.docx.</param>
        /// <param name="viewportSize">Specify the viewport size for the conversion in pixels. E.g. 1024x768 (default to &quot;Paper&quot;).</param>
        /// <param name="paperSize">Paper size for the output (default to PaperSizeEnum.Letter).</param>
        /// <param name="paperSizeCustom">Applicable if &#39;Paper size&#39; is set to &#39;Custom&#39;.</param>
        /// <param name="pageMargins">E.g. &#39;1.5cm&#39; (for uniform) or &#39;0.5in,0.25in,0.5in,0.25in&#39; (for non-uniform) margins. (default to &quot;0.5,0.5,0.5,0.5&quot;).</param>
        /// <param name="breakMergeOnError">How to deal with failure when converting attachments.</param>
        /// <param name="minimumImageAttachmentDimension">Exclude images smaller than the specified number of pixels (default to 150).</param>
        /// <param name="enableOfflineMode">In offline mode external resources are disabled (default to false).</param>
        /// <param name="startPage">The first page to include.</param>
        /// <param name="endPage">The last page to include.</param>
        /// <param name="quality">Quality of the output file.</param>
        /// <param name="overrideSettings">Optional settings using Muhimbi&#39;s XML syntax.</param>
        /// <param name="failOnError">Fail on error (default to true).</param>
        public ConvertEmailData(bool useAsyncPattern = false, string sourceFileName = default(string), SharepointFile sharepointFile = default(SharepointFile), byte[] sourceFileContent = default(byte[]), bool copyMetadata = false, bool convertAttachments = true, AttachmentMergeModeEnum? attachmentMergeMode = default(AttachmentMergeModeEnum?), bool displayAttachmentSummary = true, UnsupportedAttachmentBehaviourEnum? unsupportedAttachmentBehaviour = UnsupportedAttachmentBehaviourEnum.Error, string includeAttachmentTypes = default(string), string excludeAttachmentTypes = default(string), string viewportSize = "Paper", PaperSizeEnum? paperSize = PaperSizeEnum.Letter, string paperSizeCustom = default(string), string pageMargins = "0.5,0.5,0.5,0.5", bool breakMergeOnError = default(bool), int minimumImageAttachmentDimension = 150, bool enableOfflineMode = false, int startPage = default(int), int endPage = default(int), QualityEnum? quality = default(QualityEnum?), string overrideSettings = default(string), bool failOnError = true)
        {
            this.UseAsyncPattern = useAsyncPattern;
            // to ensure "sourceFileName" is required (not null)
            if (sourceFileName == null)
            {
                throw new ArgumentNullException("sourceFileName is a required property for ConvertEmailData and cannot be null");
            }
            this.SourceFileName = sourceFileName;
            // to ensure "sourceFileContent" is required (not null)
            if (sourceFileContent == null)
            {
                throw new ArgumentNullException("sourceFileContent is a required property for ConvertEmailData and cannot be null");
            }
            this.SourceFileContent = sourceFileContent;
            this.CopyMetadata = copyMetadata;
            this.SharepointFile = sharepointFile;
            this.ConvertAttachments = convertAttachments;
            this.AttachmentMergeMode = attachmentMergeMode;
            this.DisplayAttachmentSummary = displayAttachmentSummary;
            this.UnsupportedAttachmentBehaviour = unsupportedAttachmentBehaviour;
            this.IncludeAttachmentTypes = includeAttachmentTypes;
            this.ExcludeAttachmentTypes = excludeAttachmentTypes;
            // use default value if no "viewportSize" provided
            this.ViewportSize = viewportSize ?? "Paper";
            this.PaperSize = paperSize;
            this.PaperSizeCustom = paperSizeCustom;
            // use default value if no "pageMargins" provided
            this.PageMargins = pageMargins ?? "0.5,0.5,0.5,0.5";
            this.BreakMergeOnError = breakMergeOnError;
            this.MinimumImageAttachmentDimension = minimumImageAttachmentDimension;
            this.EnableOfflineMode = enableOfflineMode;
            this.StartPage = startPage;
            this.EndPage = endPage;
            this.Quality = quality;
            this.OverrideSettings = overrideSettings;
            this.FailOnError = failOnError;
        }

        /// <summary>
        /// Use async behaviour for API request
        /// </summary>
        /// <value>Use async behaviour for API request</value>
        [DataMember(Name = "use_async_pattern", IsRequired = true, EmitDefaultValue = true)]
        public bool UseAsyncPattern { get; set; }

        /// <summary>
        /// Name of the source file including extension
        /// </summary>
        /// <value>Name of the source file including extension</value>
        [DataMember(Name = "source_file_name", IsRequired = true, EmitDefaultValue = false)]
        public string SourceFileName { get; set; }

        /// <summary>
        /// Gets or Sets SharepointFile
        /// </summary>
        [DataMember(Name = "sharepoint_file", EmitDefaultValue = false)]
        public SharepointFile SharepointFile { get; set; }

        /// <summary>
        /// Content of the file to convert
        /// </summary>
        /// <value>Content of the file to convert</value>
        [DataMember(Name = "source_file_content", IsRequired = true, EmitDefaultValue = false)]
        public byte[] SourceFileContent { get; set; }

        /// <summary>
        /// Copy metadata (Only for SharePoint operations)
        /// </summary>
        /// <value>Copy metadata (Only for SharePoint operations)</value>
        [DataMember(Name = "copy_metadata", IsRequired = true, EmitDefaultValue = true)]
        public bool CopyMetadata { get; set; }

        /// <summary>
        /// Include attachments
        /// </summary>
        /// <value>Include attachments</value>
        [DataMember(Name = "convert_attachments", EmitDefaultValue = true)]
        public bool ConvertAttachments { get; set; }

        /// <summary>
        /// Display attachment name in the email header
        /// </summary>
        /// <value>Display attachment name in the email header</value>
        [DataMember(Name = "display_attachment_summary", EmitDefaultValue = true)]
        public bool DisplayAttachmentSummary { get; set; }

        /// <summary>
        /// Comma separated values, e.g. *.txt, June???.docx
        /// </summary>
        /// <value>Comma separated values, e.g. *.txt, June???.docx</value>
        [DataMember(Name = "include_attachment_types", EmitDefaultValue = false)]
        public string IncludeAttachmentTypes { get; set; }

        /// <summary>
        /// Comma separated values, e.g. *.txt, June???.docx
        /// </summary>
        /// <value>Comma separated values, e.g. *.txt, June???.docx</value>
        [DataMember(Name = "exclude_attachment_types", EmitDefaultValue = false)]
        public string ExcludeAttachmentTypes { get; set; }

        /// <summary>
        /// Specify the viewport size for the conversion in pixels. E.g. 1024x768
        /// </summary>
        /// <value>Specify the viewport size for the conversion in pixels. E.g. 1024x768</value>
        [DataMember(Name = "viewport_Size", EmitDefaultValue = false)]
        public string ViewportSize { get; set; }

        /// <summary>
        /// Applicable if &#39;Paper size&#39; is set to &#39;Custom&#39;
        /// </summary>
        /// <value>Applicable if &#39;Paper size&#39; is set to &#39;Custom&#39;</value>
        [DataMember(Name = "paper_size_custom", EmitDefaultValue = false)]
        public string PaperSizeCustom { get; set; }

        /// <summary>
        /// E.g. &#39;1.5cm&#39; (for uniform) or &#39;0.5in,0.25in,0.5in,0.25in&#39; (for non-uniform) margins.
        /// </summary>
        /// <value>E.g. &#39;1.5cm&#39; (for uniform) or &#39;0.5in,0.25in,0.5in,0.25in&#39; (for non-uniform) margins.</value>
        [DataMember(Name = "page_margins", EmitDefaultValue = false)]
        public string PageMargins { get; set; }

        /// <summary>
        /// How to deal with failure when converting attachments
        /// </summary>
        /// <value>How to deal with failure when converting attachments</value>
        [DataMember(Name = "break_merge_on_error", EmitDefaultValue = true)]
        public bool BreakMergeOnError { get; set; }

        /// <summary>
        /// Exclude images smaller than the specified number of pixels
        /// </summary>
        /// <value>Exclude images smaller than the specified number of pixels</value>
        [DataMember(Name = "minimum_image_attachment_dimension", EmitDefaultValue = false)]
        public int MinimumImageAttachmentDimension { get; set; }

        /// <summary>
        /// In offline mode external resources are disabled
        /// </summary>
        /// <value>In offline mode external resources are disabled</value>
        [DataMember(Name = "enable_offline_mode", EmitDefaultValue = true)]
        public bool EnableOfflineMode { get; set; }

        /// <summary>
        /// The first page to include
        /// </summary>
        /// <value>The first page to include</value>
        [DataMember(Name = "start_page", EmitDefaultValue = false)]
        public int StartPage { get; set; }

        /// <summary>
        /// The last page to include
        /// </summary>
        /// <value>The last page to include</value>
        [DataMember(Name = "end_page", EmitDefaultValue = false)]
        public int EndPage { get; set; }

        /// <summary>
        /// Optional settings using Muhimbi&#39;s XML syntax
        /// </summary>
        /// <value>Optional settings using Muhimbi&#39;s XML syntax</value>
        [DataMember(Name = "override_settings", EmitDefaultValue = false)]
        public string OverrideSettings { get; set; }

        /// <summary>
        /// Fail on error
        /// </summary>
        /// <value>Fail on error</value>
        [DataMember(Name = "fail_on_error", EmitDefaultValue = true)]
        public bool FailOnError { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class ConvertEmailData {\n");
            sb.Append("  UseAsyncPattern: ").Append(UseAsyncPattern).Append("\n");
            sb.Append("  SourceFileName: ").Append(SourceFileName).Append("\n");
            sb.Append("  SharepointFile: ").Append(SharepointFile).Append("\n");
            sb.Append("  SourceFileContent: ").Append(SourceFileContent).Append("\n");
            sb.Append("  CopyMetadata: ").Append(CopyMetadata).Append("\n");
            sb.Append("  ConvertAttachments: ").Append(ConvertAttachments).Append("\n");
            sb.Append("  AttachmentMergeMode: ").Append(AttachmentMergeMode).Append("\n");
            sb.Append("  DisplayAttachmentSummary: ").Append(DisplayAttachmentSummary).Append("\n");
            sb.Append("  UnsupportedAttachmentBehaviour: ").Append(UnsupportedAttachmentBehaviour).Append("\n");
            sb.Append("  IncludeAttachmentTypes: ").Append(IncludeAttachmentTypes).Append("\n");
            sb.Append("  ExcludeAttachmentTypes: ").Append(ExcludeAttachmentTypes).Append("\n");
            sb.Append("  ViewportSize: ").Append(ViewportSize).Append("\n");
            sb.Append("  PaperSize: ").Append(PaperSize).Append("\n");
            sb.Append("  PaperSizeCustom: ").Append(PaperSizeCustom).Append("\n");
            sb.Append("  PageMargins: ").Append(PageMargins).Append("\n");
            sb.Append("  BreakMergeOnError: ").Append(BreakMergeOnError).Append("\n");
            sb.Append("  MinimumImageAttachmentDimension: ").Append(MinimumImageAttachmentDimension).Append("\n");
            sb.Append("  EnableOfflineMode: ").Append(EnableOfflineMode).Append("\n");
            sb.Append("  StartPage: ").Append(StartPage).Append("\n");
            sb.Append("  EndPage: ").Append(EndPage).Append("\n");
            sb.Append("  Quality: ").Append(Quality).Append("\n");
            sb.Append("  OverrideSettings: ").Append(OverrideSettings).Append("\n");
            sb.Append("  FailOnError: ").Append(FailOnError).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as ConvertEmailData);
        }

        /// <summary>
        /// Returns true if ConvertEmailData instances are equal
        /// </summary>
        /// <param name="input">Instance of ConvertEmailData to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(ConvertEmailData input)
        {
            if (input == null)
            {
                return false;
            }
            return 
                (
                    this.UseAsyncPattern == input.UseAsyncPattern ||
                    this.UseAsyncPattern.Equals(input.UseAsyncPattern)
                ) && 
                (
                    this.SourceFileName == input.SourceFileName ||
                    (this.SourceFileName != null &&
                    this.SourceFileName.Equals(input.SourceFileName))
                ) && 
                (
                    this.SharepointFile == input.SharepointFile ||
                    (this.SharepointFile != null &&
                    this.SharepointFile.Equals(input.SharepointFile))
                ) && 
                (
                    this.SourceFileContent == input.SourceFileContent ||
                    (this.SourceFileContent != null &&
                    this.SourceFileContent.Equals(input.SourceFileContent))
                ) && 
                (
                    this.CopyMetadata == input.CopyMetadata ||
                    this.CopyMetadata.Equals(input.CopyMetadata)
                ) && 
                (
                    this.ConvertAttachments == input.ConvertAttachments ||
                    this.ConvertAttachments.Equals(input.ConvertAttachments)
                ) && 
                (
                    this.AttachmentMergeMode == input.AttachmentMergeMode ||
                    this.AttachmentMergeMode.Equals(input.AttachmentMergeMode)
                ) && 
                (
                    this.DisplayAttachmentSummary == input.DisplayAttachmentSummary ||
                    this.DisplayAttachmentSummary.Equals(input.DisplayAttachmentSummary)
                ) && 
                (
                    this.UnsupportedAttachmentBehaviour == input.UnsupportedAttachmentBehaviour ||
                    this.UnsupportedAttachmentBehaviour.Equals(input.UnsupportedAttachmentBehaviour)
                ) && 
                (
                    this.IncludeAttachmentTypes == input.IncludeAttachmentTypes ||
                    (this.IncludeAttachmentTypes != null &&
                    this.IncludeAttachmentTypes.Equals(input.IncludeAttachmentTypes))
                ) && 
                (
                    this.ExcludeAttachmentTypes == input.ExcludeAttachmentTypes ||
                    (this.ExcludeAttachmentTypes != null &&
                    this.ExcludeAttachmentTypes.Equals(input.ExcludeAttachmentTypes))
                ) && 
                (
                    this.ViewportSize == input.ViewportSize ||
                    (this.ViewportSize != null &&
                    this.ViewportSize.Equals(input.ViewportSize))
                ) && 
                (
                    this.PaperSize == input.PaperSize ||
                    this.PaperSize.Equals(input.PaperSize)
                ) && 
                (
                    this.PaperSizeCustom == input.PaperSizeCustom ||
                    (this.PaperSizeCustom != null &&
                    this.PaperSizeCustom.Equals(input.PaperSizeCustom))
                ) && 
                (
                    this.PageMargins == input.PageMargins ||
                    (this.PageMargins != null &&
                    this.PageMargins.Equals(input.PageMargins))
                ) && 
                (
                    this.BreakMergeOnError == input.BreakMergeOnError ||
                    this.BreakMergeOnError.Equals(input.BreakMergeOnError)
                ) && 
                (
                    this.MinimumImageAttachmentDimension == input.MinimumImageAttachmentDimension ||
                    this.MinimumImageAttachmentDimension.Equals(input.MinimumImageAttachmentDimension)
                ) && 
                (
                    this.EnableOfflineMode == input.EnableOfflineMode ||
                    this.EnableOfflineMode.Equals(input.EnableOfflineMode)
                ) && 
                (
                    this.StartPage == input.StartPage ||
                    this.StartPage.Equals(input.StartPage)
                ) && 
                (
                    this.EndPage == input.EndPage ||
                    this.EndPage.Equals(input.EndPage)
                ) && 
                (
                    this.Quality == input.Quality ||
                    this.Quality.Equals(input.Quality)
                ) && 
                (
                    this.OverrideSettings == input.OverrideSettings ||
                    (this.OverrideSettings != null &&
                    this.OverrideSettings.Equals(input.OverrideSettings))
                ) && 
                (
                    this.FailOnError == input.FailOnError ||
                    this.FailOnError.Equals(input.FailOnError)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                hashCode = (hashCode * 59) + this.UseAsyncPattern.GetHashCode();
                if (this.SourceFileName != null)
                {
                    hashCode = (hashCode * 59) + this.SourceFileName.GetHashCode();
                }
                if (this.SharepointFile != null)
                {
                    hashCode = (hashCode * 59) + this.SharepointFile.GetHashCode();
                }
                if (this.SourceFileContent != null)
                {
                    hashCode = (hashCode * 59) + this.SourceFileContent.GetHashCode();
                }
                hashCode = (hashCode * 59) + this.CopyMetadata.GetHashCode();
                hashCode = (hashCode * 59) + this.ConvertAttachments.GetHashCode();
                hashCode = (hashCode * 59) + this.AttachmentMergeMode.GetHashCode();
                hashCode = (hashCode * 59) + this.DisplayAttachmentSummary.GetHashCode();
                hashCode = (hashCode * 59) + this.UnsupportedAttachmentBehaviour.GetHashCode();
                if (this.IncludeAttachmentTypes != null)
                {
                    hashCode = (hashCode * 59) + this.IncludeAttachmentTypes.GetHashCode();
                }
                if (this.ExcludeAttachmentTypes != null)
                {
                    hashCode = (hashCode * 59) + this.ExcludeAttachmentTypes.GetHashCode();
                }
                if (this.ViewportSize != null)
                {
                    hashCode = (hashCode * 59) + this.ViewportSize.GetHashCode();
                }
                hashCode = (hashCode * 59) + this.PaperSize.GetHashCode();
                if (this.PaperSizeCustom != null)
                {
                    hashCode = (hashCode * 59) + this.PaperSizeCustom.GetHashCode();
                }
                if (this.PageMargins != null)
                {
                    hashCode = (hashCode * 59) + this.PageMargins.GetHashCode();
                }
                hashCode = (hashCode * 59) + this.BreakMergeOnError.GetHashCode();
                hashCode = (hashCode * 59) + this.MinimumImageAttachmentDimension.GetHashCode();
                hashCode = (hashCode * 59) + this.EnableOfflineMode.GetHashCode();
                hashCode = (hashCode * 59) + this.StartPage.GetHashCode();
                hashCode = (hashCode * 59) + this.EndPage.GetHashCode();
                hashCode = (hashCode * 59) + this.Quality.GetHashCode();
                if (this.OverrideSettings != null)
                {
                    hashCode = (hashCode * 59) + this.OverrideSettings.GetHashCode();
                }
                hashCode = (hashCode * 59) + this.FailOnError.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        public IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
