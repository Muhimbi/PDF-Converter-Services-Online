/*
 * Muhimbi PDF
 *
 * Convert, Merge, Watermark, Secure and OCR files.
 *
 * The version of the OpenAPI document: 9.16
 * Contact: support@muhimbi.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = Muhimbi.PDF.Online.Client.Client.OpenAPIDateConverter;

namespace Muhimbi.PDF.Online.Client.Model
{
    /// <summary>
    /// Individual files
    /// </summary>
    [DataContract(Name = "processed_files")]
    public partial class ProcessedFiles : IEquatable<ProcessedFiles>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="ProcessedFiles" /> class.
        /// </summary>
        /// <param name="processedFileName">Name of the file with the extension..</param>
        /// <param name="processedFileContent">File generated by the Muhimbi converter..</param>
        public ProcessedFiles(string processedFileName = default(string), byte[] processedFileContent = default(byte[]))
        {
            this.ProcessedFileName = processedFileName;
            this.ProcessedFileContent = processedFileContent;
        }

        /// <summary>
        /// Name of the file with the extension.
        /// </summary>
        /// <value>Name of the file with the extension.</value>
        [DataMember(Name = "processed_file_name", EmitDefaultValue = false)]
        public string ProcessedFileName { get; set; }

        /// <summary>
        /// File generated by the Muhimbi converter.
        /// </summary>
        /// <value>File generated by the Muhimbi converter.</value>
        [DataMember(Name = "processed_file_content", EmitDefaultValue = false)]
        public byte[] ProcessedFileContent { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class ProcessedFiles {\n");
            sb.Append("  ProcessedFileName: ").Append(ProcessedFileName).Append("\n");
            sb.Append("  ProcessedFileContent: ").Append(ProcessedFileContent).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as ProcessedFiles);
        }

        /// <summary>
        /// Returns true if ProcessedFiles instances are equal
        /// </summary>
        /// <param name="input">Instance of ProcessedFiles to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(ProcessedFiles input)
        {
            if (input == null)
            {
                return false;
            }
            return 
                (
                    this.ProcessedFileName == input.ProcessedFileName ||
                    (this.ProcessedFileName != null &&
                    this.ProcessedFileName.Equals(input.ProcessedFileName))
                ) && 
                (
                    this.ProcessedFileContent == input.ProcessedFileContent ||
                    (this.ProcessedFileContent != null &&
                    this.ProcessedFileContent.Equals(input.ProcessedFileContent))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.ProcessedFileName != null)
                {
                    hashCode = (hashCode * 59) + this.ProcessedFileName.GetHashCode();
                }
                if (this.ProcessedFileContent != null)
                {
                    hashCode = (hashCode * 59) + this.ProcessedFileContent.GetHashCode();
                }
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        public IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
