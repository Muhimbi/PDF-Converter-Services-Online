/*
 * Muhimbi PDF
 *
 * Convert, Merge, Watermark, Secure and OCR files.
 *
 * The version of the OpenAPI document: 9.16
 * Contact: support@muhimbi.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = Muhimbi.PDF.Online.Client.Client.OpenAPIDateConverter;

namespace Muhimbi.PDF.Online.Client.Model
{
    /// <summary>
    /// Parameters for ConvertHtml operation
    /// </summary>
    [DataContract(Name = "convert_html_data")]
    public partial class ConvertHtmlData : IEquatable<ConvertHtmlData>, IValidatableObject
    {
        /// <summary>
        /// Page orientation
        /// </summary>
        /// <value>Page orientation</value>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum PageOrientationEnum
        {
            /// <summary>
            /// Enum Portrait for value: Portrait
            /// </summary>
            [EnumMember(Value = "Portrait")]
            Portrait = 1,

            /// <summary>
            /// Enum Landscape for value: Landscape
            /// </summary>
            [EnumMember(Value = "Landscape")]
            Landscape = 2

        }


        /// <summary>
        /// Page orientation
        /// </summary>
        /// <value>Page orientation</value>
        [DataMember(Name = "page_orientation", EmitDefaultValue = false)]
        public PageOrientationEnum? PageOrientation { get; set; }
        /// <summary>
        /// Media type
        /// </summary>
        /// <value>Media type</value>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum MediaTypeEnum
        {
            /// <summary>
            /// Enum Screen for value: Screen
            /// </summary>
            [EnumMember(Value = "Screen")]
            Screen = 1,

            /// <summary>
            /// Enum Print for value: Print
            /// </summary>
            [EnumMember(Value = "Print")]
            Print = 2

        }


        /// <summary>
        /// Media type
        /// </summary>
        /// <value>Media type</value>
        [DataMember(Name = "media_type", EmitDefaultValue = false)]
        public MediaTypeEnum? MediaType { get; set; }
        /// <summary>
        /// Authentication type
        /// </summary>
        /// <value>Authentication type</value>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum AuthenticationTypeEnum
        {
            /// <summary>
            /// Enum Anonymous for value: Anonymous
            /// </summary>
            [EnumMember(Value = "Anonymous")]
            Anonymous = 1,

            /// <summary>
            /// Enum SharePointOnline for value: SharePoint Online
            /// </summary>
            [EnumMember(Value = "SharePoint Online")]
            SharePointOnline = 2,

            /// <summary>
            /// Enum Web for value: Web
            /// </summary>
            [EnumMember(Value = "Web")]
            Web = 3

        }


        /// <summary>
        /// Authentication type
        /// </summary>
        /// <value>Authentication type</value>
        [DataMember(Name = "authentication_type", EmitDefaultValue = false)]
        public AuthenticationTypeEnum? AuthenticationType { get; set; }
        /// <summary>
        /// Initializes a new instance of the <see cref="ConvertHtmlData" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected ConvertHtmlData() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="ConvertHtmlData" /> class.
        /// </summary>
        /// <param name="useAsyncPattern">Use async behaviour for API request (required) (default to false).</param>
        /// <param name="sourceUrlOrHtml">HTML fragment or URL to convert (required).</param>
        /// <param name="pageOrientation">Page orientation (default to PageOrientationEnum.Portrait).</param>
        /// <param name="mediaType">Media type (default to MediaTypeEnum.Screen).</param>
        /// <param name="authenticationType">Authentication type (default to AuthenticationTypeEnum.Anonymous).</param>
        /// <param name="username">User name.</param>
        /// <param name="password">Password.</param>
        /// <param name="viewportSize">Optional width and height of the simulated browser (e.g. 1024x768).</param>
        /// <param name="conversionDelay">Conversion delay (in milliseconds).</param>
        /// <param name="failOnError">Fail on error (default to true).</param>
        public ConvertHtmlData(bool useAsyncPattern = false, string sourceUrlOrHtml = default(string), PageOrientationEnum? pageOrientation = PageOrientationEnum.Portrait, MediaTypeEnum? mediaType = MediaTypeEnum.Screen, AuthenticationTypeEnum? authenticationType = AuthenticationTypeEnum.Anonymous, string username = default(string), string password = default(string), string viewportSize = default(string), int conversionDelay = default(int), bool failOnError = true)
        {
            this.UseAsyncPattern = useAsyncPattern;
            // to ensure "sourceUrlOrHtml" is required (not null)
            if (sourceUrlOrHtml == null)
            {
                throw new ArgumentNullException("sourceUrlOrHtml is a required property for ConvertHtmlData and cannot be null");
            }
            this.SourceUrlOrHtml = sourceUrlOrHtml;
            this.PageOrientation = pageOrientation;
            this.MediaType = mediaType;
            this.AuthenticationType = authenticationType;
            this.Username = username;
            this.Password = password;
            this.ViewportSize = viewportSize;
            this.ConversionDelay = conversionDelay;
            this.FailOnError = failOnError;
        }

        /// <summary>
        /// Use async behaviour for API request
        /// </summary>
        /// <value>Use async behaviour for API request</value>
        [DataMember(Name = "use_async_pattern", IsRequired = true, EmitDefaultValue = true)]
        public bool UseAsyncPattern { get; set; }

        /// <summary>
        /// HTML fragment or URL to convert
        /// </summary>
        /// <value>HTML fragment or URL to convert</value>
        [DataMember(Name = "source_url_or_html", IsRequired = true, EmitDefaultValue = false)]
        public string SourceUrlOrHtml { get; set; }

        /// <summary>
        /// User name
        /// </summary>
        /// <value>User name</value>
        [DataMember(Name = "username", EmitDefaultValue = false)]
        public string Username { get; set; }

        /// <summary>
        /// Password
        /// </summary>
        /// <value>Password</value>
        [DataMember(Name = "password", EmitDefaultValue = false)]
        public string Password { get; set; }

        /// <summary>
        /// Optional width and height of the simulated browser (e.g. 1024x768)
        /// </summary>
        /// <value>Optional width and height of the simulated browser (e.g. 1024x768)</value>
        [DataMember(Name = "viewport_size", EmitDefaultValue = false)]
        public string ViewportSize { get; set; }

        /// <summary>
        /// Conversion delay (in milliseconds)
        /// </summary>
        /// <value>Conversion delay (in milliseconds)</value>
        [DataMember(Name = "conversion_delay", EmitDefaultValue = false)]
        public int ConversionDelay { get; set; }

        /// <summary>
        /// Fail on error
        /// </summary>
        /// <value>Fail on error</value>
        [DataMember(Name = "fail_on_error", EmitDefaultValue = true)]
        public bool FailOnError { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class ConvertHtmlData {\n");
            sb.Append("  UseAsyncPattern: ").Append(UseAsyncPattern).Append("\n");
            sb.Append("  SourceUrlOrHtml: ").Append(SourceUrlOrHtml).Append("\n");
            sb.Append("  PageOrientation: ").Append(PageOrientation).Append("\n");
            sb.Append("  MediaType: ").Append(MediaType).Append("\n");
            sb.Append("  AuthenticationType: ").Append(AuthenticationType).Append("\n");
            sb.Append("  Username: ").Append(Username).Append("\n");
            sb.Append("  Password: ").Append(Password).Append("\n");
            sb.Append("  ViewportSize: ").Append(ViewportSize).Append("\n");
            sb.Append("  ConversionDelay: ").Append(ConversionDelay).Append("\n");
            sb.Append("  FailOnError: ").Append(FailOnError).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as ConvertHtmlData);
        }

        /// <summary>
        /// Returns true if ConvertHtmlData instances are equal
        /// </summary>
        /// <param name="input">Instance of ConvertHtmlData to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(ConvertHtmlData input)
        {
            if (input == null)
            {
                return false;
            }
            return 
                (
                    this.UseAsyncPattern == input.UseAsyncPattern ||
                    this.UseAsyncPattern.Equals(input.UseAsyncPattern)
                ) && 
                (
                    this.SourceUrlOrHtml == input.SourceUrlOrHtml ||
                    (this.SourceUrlOrHtml != null &&
                    this.SourceUrlOrHtml.Equals(input.SourceUrlOrHtml))
                ) && 
                (
                    this.PageOrientation == input.PageOrientation ||
                    this.PageOrientation.Equals(input.PageOrientation)
                ) && 
                (
                    this.MediaType == input.MediaType ||
                    this.MediaType.Equals(input.MediaType)
                ) && 
                (
                    this.AuthenticationType == input.AuthenticationType ||
                    this.AuthenticationType.Equals(input.AuthenticationType)
                ) && 
                (
                    this.Username == input.Username ||
                    (this.Username != null &&
                    this.Username.Equals(input.Username))
                ) && 
                (
                    this.Password == input.Password ||
                    (this.Password != null &&
                    this.Password.Equals(input.Password))
                ) && 
                (
                    this.ViewportSize == input.ViewportSize ||
                    (this.ViewportSize != null &&
                    this.ViewportSize.Equals(input.ViewportSize))
                ) && 
                (
                    this.ConversionDelay == input.ConversionDelay ||
                    this.ConversionDelay.Equals(input.ConversionDelay)
                ) && 
                (
                    this.FailOnError == input.FailOnError ||
                    this.FailOnError.Equals(input.FailOnError)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                hashCode = (hashCode * 59) + this.UseAsyncPattern.GetHashCode();
                if (this.SourceUrlOrHtml != null)
                {
                    hashCode = (hashCode * 59) + this.SourceUrlOrHtml.GetHashCode();
                }
                hashCode = (hashCode * 59) + this.PageOrientation.GetHashCode();
                hashCode = (hashCode * 59) + this.MediaType.GetHashCode();
                hashCode = (hashCode * 59) + this.AuthenticationType.GetHashCode();
                if (this.Username != null)
                {
                    hashCode = (hashCode * 59) + this.Username.GetHashCode();
                }
                if (this.Password != null)
                {
                    hashCode = (hashCode * 59) + this.Password.GetHashCode();
                }
                if (this.ViewportSize != null)
                {
                    hashCode = (hashCode * 59) + this.ViewportSize.GetHashCode();
                }
                hashCode = (hashCode * 59) + this.ConversionDelay.GetHashCode();
                hashCode = (hashCode * 59) + this.FailOnError.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        public IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
