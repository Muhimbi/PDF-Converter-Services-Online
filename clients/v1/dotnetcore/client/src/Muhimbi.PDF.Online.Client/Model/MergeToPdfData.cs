/*
 * Muhimbi PDF
 *
 * Convert, Merge, Watermark, Secure and OCR files.
 *
 * The version of the OpenAPI document: 9.16
 * Contact: support@muhimbi.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = Muhimbi.PDF.Online.Client.Client.OpenAPIDateConverter;

namespace Muhimbi.PDF.Online.Client.Model
{
    /// <summary>
    /// Parameters for MergeToPdf operation
    /// </summary>
    [DataContract(Name = "merge_to_pdf_data")]
    public partial class MergeToPdfData : IEquatable<MergeToPdfData>, IValidatableObject
    {
        /// <summary>
        /// Document start page
        /// </summary>
        /// <value>Document start page</value>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum DocumentStartPageEnum
        {
            /// <summary>
            /// Enum DefaultPage for value: Starts on the default page
            /// </summary>
            [EnumMember(Value = "Starts on the default page")]
            DefaultPage = 1,

            /// <summary>
            /// Enum NextPage for value: Starts on the next page
            /// </summary>
            [EnumMember(Value = "Starts on the next page")]
            NextPage = 2,

            /// <summary>
            /// Enum NextOddPage for value: Starts on the next odd page
            /// </summary>
            [EnumMember(Value = "Starts on the next odd page")]
            NextOddPage = 3,

            /// <summary>
            /// Enum NextEvenPage for value: Starts on the next even page
            /// </summary>
            [EnumMember(Value = "Starts on the next even page")]
            NextEvenPage = 4

        }


        /// <summary>
        /// Document start page
        /// </summary>
        /// <value>Document start page</value>
        [DataMember(Name = "document_start_page", EmitDefaultValue = false)]
        public DocumentStartPageEnum? DocumentStartPage { get; set; }
        /// <summary>
        /// Initializes a new instance of the <see cref="MergeToPdfData" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected MergeToPdfData() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="MergeToPdfData" /> class.
        /// </summary>
        /// <param name="useAsyncPattern">Use async behaviour for API request (required) (default to false).</param>
        /// <param name="sourceFileName1">Name of the source file including extension.</param>
        /// <param name="sourceFileContent1">Content of the file to merge.</param>
        /// <param name="sourceFileName2">Name of the source file including extension.</param>
        /// <param name="sourceFileContent2">Content of the file to merge.</param>
        /// <param name="sourceFileName3">Name of the source file including extension.</param>
        /// <param name="sourceFileContent3">Content of the file to merge.</param>
        /// <param name="sourceFileName4">Name of the source file including extension.</param>
        /// <param name="sourceFileContent4">Content of the file to merge.</param>
        /// <param name="sourceFileName5">Name of the source file including extension.</param>
        /// <param name="sourceFileContent5">Content of the file to merge.</param>
        /// <param name="sharepointFile">sharepointFile.</param>
        /// <param name="sharepointFieldName">Bookmark field name (For SharePoint only).</param>
        /// <param name="documentStartPage">Document start page (default to DocumentStartPageEnum.NextPage).</param>
        /// <param name="sourceFiles">List of files to merge.</param>
        /// <param name="overrideSettings">Optional settings using Muhimbi&#39;s XML syntax.</param>
        /// <param name="failOnError">Fail on error (default to true).</param>
        public MergeToPdfData(bool useAsyncPattern = false, string sourceFileName1 = default(string), byte[] sourceFileContent1 = default(byte[]), string sourceFileName2 = default(string), byte[] sourceFileContent2 = default(byte[]), string sourceFileName3 = default(string), byte[] sourceFileContent3 = default(byte[]), string sourceFileName4 = default(string), byte[] sourceFileContent4 = default(byte[]), string sourceFileName5 = default(string), byte[] sourceFileContent5 = default(byte[]), SharepointFile sharepointFile = default(SharepointFile), string sharepointFieldName = default(string), DocumentStartPageEnum? documentStartPage = DocumentStartPageEnum.NextPage, List<MergeSourceFile> sourceFiles = default(List<MergeSourceFile>), string overrideSettings = default(string), bool failOnError = true)
        {
            this.UseAsyncPattern = useAsyncPattern;
            this.SourceFileName1 = sourceFileName1;
            this.SourceFileContent1 = sourceFileContent1;
            this.SourceFileName2 = sourceFileName2;
            this.SourceFileContent2 = sourceFileContent2;
            this.SourceFileName3 = sourceFileName3;
            this.SourceFileContent3 = sourceFileContent3;
            this.SourceFileName4 = sourceFileName4;
            this.SourceFileContent4 = sourceFileContent4;
            this.SourceFileName5 = sourceFileName5;
            this.SourceFileContent5 = sourceFileContent5;
            this.SharepointFile = sharepointFile;
            this.SharepointFieldName = sharepointFieldName;
            this.DocumentStartPage = documentStartPage;
            this.SourceFiles = sourceFiles;
            this.OverrideSettings = overrideSettings;
            this.FailOnError = failOnError;
        }

        /// <summary>
        /// Use async behaviour for API request
        /// </summary>
        /// <value>Use async behaviour for API request</value>
        [DataMember(Name = "use_async_pattern", IsRequired = true, EmitDefaultValue = true)]
        public bool UseAsyncPattern { get; set; }

        /// <summary>
        /// Name of the source file including extension
        /// </summary>
        /// <value>Name of the source file including extension</value>
        [DataMember(Name = "source_file_name_1", EmitDefaultValue = false)]
        public string SourceFileName1 { get; set; }

        /// <summary>
        /// Content of the file to merge
        /// </summary>
        /// <value>Content of the file to merge</value>
        [DataMember(Name = "source_file_content_1", EmitDefaultValue = false)]
        public byte[] SourceFileContent1 { get; set; }

        /// <summary>
        /// Name of the source file including extension
        /// </summary>
        /// <value>Name of the source file including extension</value>
        [DataMember(Name = "source_file_name_2", EmitDefaultValue = false)]
        public string SourceFileName2 { get; set; }

        /// <summary>
        /// Content of the file to merge
        /// </summary>
        /// <value>Content of the file to merge</value>
        [DataMember(Name = "source_file_content_2", EmitDefaultValue = false)]
        public byte[] SourceFileContent2 { get; set; }

        /// <summary>
        /// Name of the source file including extension
        /// </summary>
        /// <value>Name of the source file including extension</value>
        [DataMember(Name = "source_file_name_3", EmitDefaultValue = false)]
        public string SourceFileName3 { get; set; }

        /// <summary>
        /// Content of the file to merge
        /// </summary>
        /// <value>Content of the file to merge</value>
        [DataMember(Name = "source_file_content_3", EmitDefaultValue = false)]
        public byte[] SourceFileContent3 { get; set; }

        /// <summary>
        /// Name of the source file including extension
        /// </summary>
        /// <value>Name of the source file including extension</value>
        [DataMember(Name = "source_file_name_4", EmitDefaultValue = false)]
        public string SourceFileName4 { get; set; }

        /// <summary>
        /// Content of the file to merge
        /// </summary>
        /// <value>Content of the file to merge</value>
        [DataMember(Name = "source_file_content_4", EmitDefaultValue = false)]
        public byte[] SourceFileContent4 { get; set; }

        /// <summary>
        /// Name of the source file including extension
        /// </summary>
        /// <value>Name of the source file including extension</value>
        [DataMember(Name = "source_file_name_5", EmitDefaultValue = false)]
        public string SourceFileName5 { get; set; }

        /// <summary>
        /// Content of the file to merge
        /// </summary>
        /// <value>Content of the file to merge</value>
        [DataMember(Name = "source_file_content_5", EmitDefaultValue = false)]
        public byte[] SourceFileContent5 { get; set; }

        /// <summary>
        /// Gets or Sets SharepointFile
        /// </summary>
        [DataMember(Name = "sharepoint_file", EmitDefaultValue = false)]
        public SharepointFile SharepointFile { get; set; }

        /// <summary>
        /// Bookmark field name (For SharePoint only)
        /// </summary>
        /// <value>Bookmark field name (For SharePoint only)</value>
        [DataMember(Name = "sharepoint_field_name", EmitDefaultValue = false)]
        public string SharepointFieldName { get; set; }

        /// <summary>
        /// List of files to merge
        /// </summary>
        /// <value>List of files to merge</value>
        [DataMember(Name = "source_files", EmitDefaultValue = false)]
        public List<MergeSourceFile> SourceFiles { get; set; }

        /// <summary>
        /// Optional settings using Muhimbi&#39;s XML syntax
        /// </summary>
        /// <value>Optional settings using Muhimbi&#39;s XML syntax</value>
        [DataMember(Name = "override_settings", EmitDefaultValue = false)]
        public string OverrideSettings { get; set; }

        /// <summary>
        /// Fail on error
        /// </summary>
        /// <value>Fail on error</value>
        [DataMember(Name = "fail_on_error", EmitDefaultValue = true)]
        public bool FailOnError { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class MergeToPdfData {\n");
            sb.Append("  UseAsyncPattern: ").Append(UseAsyncPattern).Append("\n");
            sb.Append("  SourceFileName1: ").Append(SourceFileName1).Append("\n");
            sb.Append("  SourceFileContent1: ").Append(SourceFileContent1).Append("\n");
            sb.Append("  SourceFileName2: ").Append(SourceFileName2).Append("\n");
            sb.Append("  SourceFileContent2: ").Append(SourceFileContent2).Append("\n");
            sb.Append("  SourceFileName3: ").Append(SourceFileName3).Append("\n");
            sb.Append("  SourceFileContent3: ").Append(SourceFileContent3).Append("\n");
            sb.Append("  SourceFileName4: ").Append(SourceFileName4).Append("\n");
            sb.Append("  SourceFileContent4: ").Append(SourceFileContent4).Append("\n");
            sb.Append("  SourceFileName5: ").Append(SourceFileName5).Append("\n");
            sb.Append("  SourceFileContent5: ").Append(SourceFileContent5).Append("\n");
            sb.Append("  SharepointFile: ").Append(SharepointFile).Append("\n");
            sb.Append("  SharepointFieldName: ").Append(SharepointFieldName).Append("\n");
            sb.Append("  DocumentStartPage: ").Append(DocumentStartPage).Append("\n");
            sb.Append("  SourceFiles: ").Append(SourceFiles).Append("\n");
            sb.Append("  OverrideSettings: ").Append(OverrideSettings).Append("\n");
            sb.Append("  FailOnError: ").Append(FailOnError).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as MergeToPdfData);
        }

        /// <summary>
        /// Returns true if MergeToPdfData instances are equal
        /// </summary>
        /// <param name="input">Instance of MergeToPdfData to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(MergeToPdfData input)
        {
            if (input == null)
            {
                return false;
            }
            return 
                (
                    this.UseAsyncPattern == input.UseAsyncPattern ||
                    this.UseAsyncPattern.Equals(input.UseAsyncPattern)
                ) && 
                (
                    this.SourceFileName1 == input.SourceFileName1 ||
                    (this.SourceFileName1 != null &&
                    this.SourceFileName1.Equals(input.SourceFileName1))
                ) && 
                (
                    this.SourceFileContent1 == input.SourceFileContent1 ||
                    (this.SourceFileContent1 != null &&
                    this.SourceFileContent1.Equals(input.SourceFileContent1))
                ) && 
                (
                    this.SourceFileName2 == input.SourceFileName2 ||
                    (this.SourceFileName2 != null &&
                    this.SourceFileName2.Equals(input.SourceFileName2))
                ) && 
                (
                    this.SourceFileContent2 == input.SourceFileContent2 ||
                    (this.SourceFileContent2 != null &&
                    this.SourceFileContent2.Equals(input.SourceFileContent2))
                ) && 
                (
                    this.SourceFileName3 == input.SourceFileName3 ||
                    (this.SourceFileName3 != null &&
                    this.SourceFileName3.Equals(input.SourceFileName3))
                ) && 
                (
                    this.SourceFileContent3 == input.SourceFileContent3 ||
                    (this.SourceFileContent3 != null &&
                    this.SourceFileContent3.Equals(input.SourceFileContent3))
                ) && 
                (
                    this.SourceFileName4 == input.SourceFileName4 ||
                    (this.SourceFileName4 != null &&
                    this.SourceFileName4.Equals(input.SourceFileName4))
                ) && 
                (
                    this.SourceFileContent4 == input.SourceFileContent4 ||
                    (this.SourceFileContent4 != null &&
                    this.SourceFileContent4.Equals(input.SourceFileContent4))
                ) && 
                (
                    this.SourceFileName5 == input.SourceFileName5 ||
                    (this.SourceFileName5 != null &&
                    this.SourceFileName5.Equals(input.SourceFileName5))
                ) && 
                (
                    this.SourceFileContent5 == input.SourceFileContent5 ||
                    (this.SourceFileContent5 != null &&
                    this.SourceFileContent5.Equals(input.SourceFileContent5))
                ) && 
                (
                    this.SharepointFile == input.SharepointFile ||
                    (this.SharepointFile != null &&
                    this.SharepointFile.Equals(input.SharepointFile))
                ) && 
                (
                    this.SharepointFieldName == input.SharepointFieldName ||
                    (this.SharepointFieldName != null &&
                    this.SharepointFieldName.Equals(input.SharepointFieldName))
                ) && 
                (
                    this.DocumentStartPage == input.DocumentStartPage ||
                    this.DocumentStartPage.Equals(input.DocumentStartPage)
                ) && 
                (
                    this.SourceFiles == input.SourceFiles ||
                    this.SourceFiles != null &&
                    input.SourceFiles != null &&
                    this.SourceFiles.SequenceEqual(input.SourceFiles)
                ) && 
                (
                    this.OverrideSettings == input.OverrideSettings ||
                    (this.OverrideSettings != null &&
                    this.OverrideSettings.Equals(input.OverrideSettings))
                ) && 
                (
                    this.FailOnError == input.FailOnError ||
                    this.FailOnError.Equals(input.FailOnError)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                hashCode = (hashCode * 59) + this.UseAsyncPattern.GetHashCode();
                if (this.SourceFileName1 != null)
                {
                    hashCode = (hashCode * 59) + this.SourceFileName1.GetHashCode();
                }
                if (this.SourceFileContent1 != null)
                {
                    hashCode = (hashCode * 59) + this.SourceFileContent1.GetHashCode();
                }
                if (this.SourceFileName2 != null)
                {
                    hashCode = (hashCode * 59) + this.SourceFileName2.GetHashCode();
                }
                if (this.SourceFileContent2 != null)
                {
                    hashCode = (hashCode * 59) + this.SourceFileContent2.GetHashCode();
                }
                if (this.SourceFileName3 != null)
                {
                    hashCode = (hashCode * 59) + this.SourceFileName3.GetHashCode();
                }
                if (this.SourceFileContent3 != null)
                {
                    hashCode = (hashCode * 59) + this.SourceFileContent3.GetHashCode();
                }
                if (this.SourceFileName4 != null)
                {
                    hashCode = (hashCode * 59) + this.SourceFileName4.GetHashCode();
                }
                if (this.SourceFileContent4 != null)
                {
                    hashCode = (hashCode * 59) + this.SourceFileContent4.GetHashCode();
                }
                if (this.SourceFileName5 != null)
                {
                    hashCode = (hashCode * 59) + this.SourceFileName5.GetHashCode();
                }
                if (this.SourceFileContent5 != null)
                {
                    hashCode = (hashCode * 59) + this.SourceFileContent5.GetHashCode();
                }
                if (this.SharepointFile != null)
                {
                    hashCode = (hashCode * 59) + this.SharepointFile.GetHashCode();
                }
                if (this.SharepointFieldName != null)
                {
                    hashCode = (hashCode * 59) + this.SharepointFieldName.GetHashCode();
                }
                hashCode = (hashCode * 59) + this.DocumentStartPage.GetHashCode();
                if (this.SourceFiles != null)
                {
                    hashCode = (hashCode * 59) + this.SourceFiles.GetHashCode();
                }
                if (this.OverrideSettings != null)
                {
                    hashCode = (hashCode * 59) + this.OverrideSettings.GetHashCode();
                }
                hashCode = (hashCode * 59) + this.FailOnError.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        public IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
