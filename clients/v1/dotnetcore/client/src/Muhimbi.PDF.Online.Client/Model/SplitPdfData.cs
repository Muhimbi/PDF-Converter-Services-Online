/*
 * Muhimbi PDF
 *
 * Convert, Merge, Watermark, Secure and OCR files.
 *
 * The version of the OpenAPI document: 9.16
 * Contact: support@muhimbi.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = Muhimbi.PDF.Online.Client.Client.OpenAPIDateConverter;

namespace Muhimbi.PDF.Online.Client.Model
{
    /// <summary>
    /// Parameters for SplitPdf operation
    /// </summary>
    [DataContract(Name = "split_pdf_data")]
    public partial class SplitPdfData : IEquatable<SplitPdfData>, IValidatableObject
    {
        /// <summary>
        /// Split by option
        /// </summary>
        /// <value>Split by option</value>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum FileSplitByEnum
        {
            /// <summary>
            /// Enum NumberOfPages for value: Number of Pages
            /// </summary>
            [EnumMember(Value = "Number of Pages")]
            NumberOfPages = 1,

            /// <summary>
            /// Enum BookmarkLevel for value: Bookmark Level
            /// </summary>
            [EnumMember(Value = "Bookmark Level")]
            BookmarkLevel = 2

        }


        /// <summary>
        /// Split by option
        /// </summary>
        /// <value>Split by option</value>
        [DataMember(Name = "file_split_by", IsRequired = true, EmitDefaultValue = false)]
        public FileSplitByEnum FileSplitBy { get; set; }
        /// <summary>
        /// Initializes a new instance of the <see cref="SplitPdfData" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected SplitPdfData() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="SplitPdfData" /> class.
        /// </summary>
        /// <param name="useAsyncPattern">Use async behaviour for API request (required) (default to false).</param>
        /// <param name="sourceFileName">Name of the source file including extension (required).</param>
        /// <param name="sourceFileContent">Content of the file to split (required).</param>
        /// <param name="sharepointFile">sharepointFile.</param>
        /// <param name="fileNameTemplate">File name template for returned files.</param>
        /// <param name="fileSplitBy">Split by option (required) (default to FileSplitByEnum.NumberOfPages).</param>
        /// <param name="splitParameter">Split parameter (number of pages or level) (required) (default to 1).</param>
        /// <param name="failOnError">Fail on error (default to true).</param>
        public SplitPdfData(bool useAsyncPattern = false, string sourceFileName = default(string), byte[] sourceFileContent = default(byte[]), SharepointFile sharepointFile = default(SharepointFile), string fileNameTemplate = default(string), FileSplitByEnum fileSplitBy = FileSplitByEnum.NumberOfPages, int splitParameter = 1, bool failOnError = true)
        {
            this.UseAsyncPattern = useAsyncPattern;
            // to ensure "sourceFileName" is required (not null)
            if (sourceFileName == null)
            {
                throw new ArgumentNullException("sourceFileName is a required property for SplitPdfData and cannot be null");
            }
            this.SourceFileName = sourceFileName;
            // to ensure "sourceFileContent" is required (not null)
            if (sourceFileContent == null)
            {
                throw new ArgumentNullException("sourceFileContent is a required property for SplitPdfData and cannot be null");
            }
            this.SourceFileContent = sourceFileContent;
            this.FileSplitBy = fileSplitBy;
            this.SplitParameter = splitParameter;
            this.SharepointFile = sharepointFile;
            this.FileNameTemplate = fileNameTemplate;
            this.FailOnError = failOnError;
        }

        /// <summary>
        /// Use async behaviour for API request
        /// </summary>
        /// <value>Use async behaviour for API request</value>
        [DataMember(Name = "use_async_pattern", IsRequired = true, EmitDefaultValue = true)]
        public bool UseAsyncPattern { get; set; }

        /// <summary>
        /// Name of the source file including extension
        /// </summary>
        /// <value>Name of the source file including extension</value>
        [DataMember(Name = "source_file_name", IsRequired = true, EmitDefaultValue = false)]
        public string SourceFileName { get; set; }

        /// <summary>
        /// Content of the file to split
        /// </summary>
        /// <value>Content of the file to split</value>
        [DataMember(Name = "source_file_content", IsRequired = true, EmitDefaultValue = false)]
        public byte[] SourceFileContent { get; set; }

        /// <summary>
        /// Gets or Sets SharepointFile
        /// </summary>
        [DataMember(Name = "sharepoint_file", EmitDefaultValue = false)]
        public SharepointFile SharepointFile { get; set; }

        /// <summary>
        /// File name template for returned files
        /// </summary>
        /// <value>File name template for returned files</value>
        [DataMember(Name = "file_name_template", EmitDefaultValue = false)]
        public string FileNameTemplate { get; set; }

        /// <summary>
        /// Split parameter (number of pages or level)
        /// </summary>
        /// <value>Split parameter (number of pages or level)</value>
        [DataMember(Name = "split_parameter", IsRequired = true, EmitDefaultValue = false)]
        public int SplitParameter { get; set; }

        /// <summary>
        /// Fail on error
        /// </summary>
        /// <value>Fail on error</value>
        [DataMember(Name = "fail_on_error", EmitDefaultValue = true)]
        public bool FailOnError { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class SplitPdfData {\n");
            sb.Append("  UseAsyncPattern: ").Append(UseAsyncPattern).Append("\n");
            sb.Append("  SourceFileName: ").Append(SourceFileName).Append("\n");
            sb.Append("  SourceFileContent: ").Append(SourceFileContent).Append("\n");
            sb.Append("  SharepointFile: ").Append(SharepointFile).Append("\n");
            sb.Append("  FileNameTemplate: ").Append(FileNameTemplate).Append("\n");
            sb.Append("  FileSplitBy: ").Append(FileSplitBy).Append("\n");
            sb.Append("  SplitParameter: ").Append(SplitParameter).Append("\n");
            sb.Append("  FailOnError: ").Append(FailOnError).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as SplitPdfData);
        }

        /// <summary>
        /// Returns true if SplitPdfData instances are equal
        /// </summary>
        /// <param name="input">Instance of SplitPdfData to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(SplitPdfData input)
        {
            if (input == null)
            {
                return false;
            }
            return 
                (
                    this.UseAsyncPattern == input.UseAsyncPattern ||
                    this.UseAsyncPattern.Equals(input.UseAsyncPattern)
                ) && 
                (
                    this.SourceFileName == input.SourceFileName ||
                    (this.SourceFileName != null &&
                    this.SourceFileName.Equals(input.SourceFileName))
                ) && 
                (
                    this.SourceFileContent == input.SourceFileContent ||
                    (this.SourceFileContent != null &&
                    this.SourceFileContent.Equals(input.SourceFileContent))
                ) && 
                (
                    this.SharepointFile == input.SharepointFile ||
                    (this.SharepointFile != null &&
                    this.SharepointFile.Equals(input.SharepointFile))
                ) && 
                (
                    this.FileNameTemplate == input.FileNameTemplate ||
                    (this.FileNameTemplate != null &&
                    this.FileNameTemplate.Equals(input.FileNameTemplate))
                ) && 
                (
                    this.FileSplitBy == input.FileSplitBy ||
                    this.FileSplitBy.Equals(input.FileSplitBy)
                ) && 
                (
                    this.SplitParameter == input.SplitParameter ||
                    this.SplitParameter.Equals(input.SplitParameter)
                ) && 
                (
                    this.FailOnError == input.FailOnError ||
                    this.FailOnError.Equals(input.FailOnError)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                hashCode = (hashCode * 59) + this.UseAsyncPattern.GetHashCode();
                if (this.SourceFileName != null)
                {
                    hashCode = (hashCode * 59) + this.SourceFileName.GetHashCode();
                }
                if (this.SourceFileContent != null)
                {
                    hashCode = (hashCode * 59) + this.SourceFileContent.GetHashCode();
                }
                if (this.SharepointFile != null)
                {
                    hashCode = (hashCode * 59) + this.SharepointFile.GetHashCode();
                }
                if (this.FileNameTemplate != null)
                {
                    hashCode = (hashCode * 59) + this.FileNameTemplate.GetHashCode();
                }
                hashCode = (hashCode * 59) + this.FileSplitBy.GetHashCode();
                hashCode = (hashCode * 59) + this.SplitParameter.GetHashCode();
                hashCode = (hashCode * 59) + this.FailOnError.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        public IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
