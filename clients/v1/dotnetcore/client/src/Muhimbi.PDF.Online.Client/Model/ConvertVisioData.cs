/*
 * Muhimbi PDF
 *
 * Convert, Merge, Watermark, Secure and OCR files.
 *
 * The version of the OpenAPI document: 9.16
 * Contact: support@muhimbi.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = Muhimbi.PDF.Online.Client.Client.OpenAPIDateConverter;

namespace Muhimbi.PDF.Online.Client.Model
{
    /// <summary>
    /// Parameters for Convert Visio operation
    /// </summary>
    [DataContract(Name = "convert_visio_data")]
    public partial class ConvertVisioData : IEquatable<ConvertVisioData>, IValidatableObject
    {
        /// <summary>
        /// Output format
        /// </summary>
        /// <value>Output format</value>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum OutputFormatEnum
        {
            /// <summary>
            /// Enum PDF for value: PDF
            /// </summary>
            [EnumMember(Value = "PDF")]
            PDF = 1,

            /// <summary>
            /// Enum XPS for value: XPS
            /// </summary>
            [EnumMember(Value = "XPS")]
            XPS = 2

        }


        /// <summary>
        /// Output format
        /// </summary>
        /// <value>Output format</value>
        [DataMember(Name = "output_format", IsRequired = true, EmitDefaultValue = false)]
        public OutputFormatEnum OutputFormat { get; set; }
        /// <summary>
        /// Specify which parts of the file to render
        /// </summary>
        /// <value>Specify which parts of the file to render</value>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum RangeEnum
        {
            /// <summary>
            /// Enum AllDocuments for value: AllDocuments
            /// </summary>
            [EnumMember(Value = "AllDocuments")]
            AllDocuments = 1,

            /// <summary>
            /// Enum ActiveDocuments for value: ActiveDocuments
            /// </summary>
            [EnumMember(Value = "ActiveDocuments")]
            ActiveDocuments = 2

        }


        /// <summary>
        /// Specify which parts of the file to render
        /// </summary>
        /// <value>Specify which parts of the file to render</value>
        [DataMember(Name = "range", EmitDefaultValue = false)]
        public RangeEnum? Range { get; set; }
        /// <summary>
        /// Quality of the output file
        /// </summary>
        /// <value>Quality of the output file</value>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum QualityEnum
        {
            /// <summary>
            /// Enum OptimizeForPrint for value: OptimizeForPrint
            /// </summary>
            [EnumMember(Value = "OptimizeForPrint")]
            OptimizeForPrint = 1,

            /// <summary>
            /// Enum OptimizeForOnScreen for value: OptimizeForOnScreen
            /// </summary>
            [EnumMember(Value = "OptimizeForOnScreen")]
            OptimizeForOnScreen = 2,

            /// <summary>
            /// Enum Original for value: Original
            /// </summary>
            [EnumMember(Value = "Original")]
            Original = 3

        }


        /// <summary>
        /// Quality of the output file
        /// </summary>
        /// <value>Quality of the output file</value>
        [DataMember(Name = "quality", EmitDefaultValue = false)]
        public QualityEnum? Quality { get; set; }
        /// <summary>
        /// Initializes a new instance of the <see cref="ConvertVisioData" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected ConvertVisioData() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="ConvertVisioData" /> class.
        /// </summary>
        /// <param name="useAsyncPattern">Use async behaviour for API request (required) (default to false).</param>
        /// <param name="sourceFileName">Name of the source file including extension (required).</param>
        /// <param name="sharepointFile">sharepointFile.</param>
        /// <param name="sourceFileContent">Content of the file to convert (required).</param>
        /// <param name="outputFormat">Output format (required) (default to OutputFormatEnum.PDF).</param>
        /// <param name="copyMetadata">Copy metadata (Only for SharePoint operations) (required) (default to false).</param>
        /// <param name="range">Specify which parts of the file to render.</param>
        /// <param name="startPage">The first page to include.</param>
        /// <param name="endPage">The last page to include.</param>
        /// <param name="quality">Quality of the output file.</param>
        /// <param name="overrideSettings">Optional settings using Muhimbi&#39;s XML syntax.</param>
        /// <param name="failOnError">Fail on error (default to true).</param>
        public ConvertVisioData(bool useAsyncPattern = false, string sourceFileName = default(string), SharepointFile sharepointFile = default(SharepointFile), byte[] sourceFileContent = default(byte[]), OutputFormatEnum outputFormat = OutputFormatEnum.PDF, bool copyMetadata = false, RangeEnum? range = default(RangeEnum?), int startPage = default(int), int endPage = default(int), QualityEnum? quality = default(QualityEnum?), string overrideSettings = default(string), bool failOnError = true)
        {
            this.UseAsyncPattern = useAsyncPattern;
            // to ensure "sourceFileName" is required (not null)
            if (sourceFileName == null)
            {
                throw new ArgumentNullException("sourceFileName is a required property for ConvertVisioData and cannot be null");
            }
            this.SourceFileName = sourceFileName;
            // to ensure "sourceFileContent" is required (not null)
            if (sourceFileContent == null)
            {
                throw new ArgumentNullException("sourceFileContent is a required property for ConvertVisioData and cannot be null");
            }
            this.SourceFileContent = sourceFileContent;
            this.OutputFormat = outputFormat;
            this.CopyMetadata = copyMetadata;
            this.SharepointFile = sharepointFile;
            this.Range = range;
            this.StartPage = startPage;
            this.EndPage = endPage;
            this.Quality = quality;
            this.OverrideSettings = overrideSettings;
            this.FailOnError = failOnError;
        }

        /// <summary>
        /// Use async behaviour for API request
        /// </summary>
        /// <value>Use async behaviour for API request</value>
        [DataMember(Name = "use_async_pattern", IsRequired = true, EmitDefaultValue = true)]
        public bool UseAsyncPattern { get; set; }

        /// <summary>
        /// Name of the source file including extension
        /// </summary>
        /// <value>Name of the source file including extension</value>
        [DataMember(Name = "source_file_name", IsRequired = true, EmitDefaultValue = false)]
        public string SourceFileName { get; set; }

        /// <summary>
        /// Gets or Sets SharepointFile
        /// </summary>
        [DataMember(Name = "sharepoint_file", EmitDefaultValue = false)]
        public SharepointFile SharepointFile { get; set; }

        /// <summary>
        /// Content of the file to convert
        /// </summary>
        /// <value>Content of the file to convert</value>
        [DataMember(Name = "source_file_content", IsRequired = true, EmitDefaultValue = false)]
        public byte[] SourceFileContent { get; set; }

        /// <summary>
        /// Copy metadata (Only for SharePoint operations)
        /// </summary>
        /// <value>Copy metadata (Only for SharePoint operations)</value>
        [DataMember(Name = "copy_metadata", IsRequired = true, EmitDefaultValue = true)]
        public bool CopyMetadata { get; set; }

        /// <summary>
        /// The first page to include
        /// </summary>
        /// <value>The first page to include</value>
        [DataMember(Name = "start_page", EmitDefaultValue = false)]
        public int StartPage { get; set; }

        /// <summary>
        /// The last page to include
        /// </summary>
        /// <value>The last page to include</value>
        [DataMember(Name = "end_page", EmitDefaultValue = false)]
        public int EndPage { get; set; }

        /// <summary>
        /// Optional settings using Muhimbi&#39;s XML syntax
        /// </summary>
        /// <value>Optional settings using Muhimbi&#39;s XML syntax</value>
        [DataMember(Name = "override_settings", EmitDefaultValue = false)]
        public string OverrideSettings { get; set; }

        /// <summary>
        /// Fail on error
        /// </summary>
        /// <value>Fail on error</value>
        [DataMember(Name = "fail_on_error", EmitDefaultValue = true)]
        public bool FailOnError { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class ConvertVisioData {\n");
            sb.Append("  UseAsyncPattern: ").Append(UseAsyncPattern).Append("\n");
            sb.Append("  SourceFileName: ").Append(SourceFileName).Append("\n");
            sb.Append("  SharepointFile: ").Append(SharepointFile).Append("\n");
            sb.Append("  SourceFileContent: ").Append(SourceFileContent).Append("\n");
            sb.Append("  OutputFormat: ").Append(OutputFormat).Append("\n");
            sb.Append("  CopyMetadata: ").Append(CopyMetadata).Append("\n");
            sb.Append("  Range: ").Append(Range).Append("\n");
            sb.Append("  StartPage: ").Append(StartPage).Append("\n");
            sb.Append("  EndPage: ").Append(EndPage).Append("\n");
            sb.Append("  Quality: ").Append(Quality).Append("\n");
            sb.Append("  OverrideSettings: ").Append(OverrideSettings).Append("\n");
            sb.Append("  FailOnError: ").Append(FailOnError).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as ConvertVisioData);
        }

        /// <summary>
        /// Returns true if ConvertVisioData instances are equal
        /// </summary>
        /// <param name="input">Instance of ConvertVisioData to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(ConvertVisioData input)
        {
            if (input == null)
            {
                return false;
            }
            return 
                (
                    this.UseAsyncPattern == input.UseAsyncPattern ||
                    this.UseAsyncPattern.Equals(input.UseAsyncPattern)
                ) && 
                (
                    this.SourceFileName == input.SourceFileName ||
                    (this.SourceFileName != null &&
                    this.SourceFileName.Equals(input.SourceFileName))
                ) && 
                (
                    this.SharepointFile == input.SharepointFile ||
                    (this.SharepointFile != null &&
                    this.SharepointFile.Equals(input.SharepointFile))
                ) && 
                (
                    this.SourceFileContent == input.SourceFileContent ||
                    (this.SourceFileContent != null &&
                    this.SourceFileContent.Equals(input.SourceFileContent))
                ) && 
                (
                    this.OutputFormat == input.OutputFormat ||
                    this.OutputFormat.Equals(input.OutputFormat)
                ) && 
                (
                    this.CopyMetadata == input.CopyMetadata ||
                    this.CopyMetadata.Equals(input.CopyMetadata)
                ) && 
                (
                    this.Range == input.Range ||
                    this.Range.Equals(input.Range)
                ) && 
                (
                    this.StartPage == input.StartPage ||
                    this.StartPage.Equals(input.StartPage)
                ) && 
                (
                    this.EndPage == input.EndPage ||
                    this.EndPage.Equals(input.EndPage)
                ) && 
                (
                    this.Quality == input.Quality ||
                    this.Quality.Equals(input.Quality)
                ) && 
                (
                    this.OverrideSettings == input.OverrideSettings ||
                    (this.OverrideSettings != null &&
                    this.OverrideSettings.Equals(input.OverrideSettings))
                ) && 
                (
                    this.FailOnError == input.FailOnError ||
                    this.FailOnError.Equals(input.FailOnError)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                hashCode = (hashCode * 59) + this.UseAsyncPattern.GetHashCode();
                if (this.SourceFileName != null)
                {
                    hashCode = (hashCode * 59) + this.SourceFileName.GetHashCode();
                }
                if (this.SharepointFile != null)
                {
                    hashCode = (hashCode * 59) + this.SharepointFile.GetHashCode();
                }
                if (this.SourceFileContent != null)
                {
                    hashCode = (hashCode * 59) + this.SourceFileContent.GetHashCode();
                }
                hashCode = (hashCode * 59) + this.OutputFormat.GetHashCode();
                hashCode = (hashCode * 59) + this.CopyMetadata.GetHashCode();
                hashCode = (hashCode * 59) + this.Range.GetHashCode();
                hashCode = (hashCode * 59) + this.StartPage.GetHashCode();
                hashCode = (hashCode * 59) + this.EndPage.GetHashCode();
                hashCode = (hashCode * 59) + this.Quality.GetHashCode();
                if (this.OverrideSettings != null)
                {
                    hashCode = (hashCode * 59) + this.OverrideSettings.GetHashCode();
                }
                hashCode = (hashCode * 59) + this.FailOnError.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        public IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
