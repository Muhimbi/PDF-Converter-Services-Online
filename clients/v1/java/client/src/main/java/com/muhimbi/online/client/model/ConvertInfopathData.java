/*
 * Muhimbi PDF
 * Convert, Merge, Watermark, Secure and OCR files.
 *
 * OpenAPI spec version: 9.16
 * Contact: support@muhimbi.com
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */


package com.muhimbi.online.client.model;

import java.util.Objects;
import com.google.gson.annotations.SerializedName;
import com.muhimbi.online.client.model.SharepointFile;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;

/**
 * Parameters for Convert Infopath operation
 */
@ApiModel(description = "Parameters for Convert Infopath operation")
@javax.annotation.Generated(value = "io.swagger.codegen.languages.JavaClientCodegen", date = "2022-05-17T15:20:03.344+01:00")
public class ConvertInfopathData {
  @SerializedName("use_async_pattern")
  private Boolean useAsyncPattern = false;

  @SerializedName("source_file_name")
  private String sourceFileName = null;

  @SerializedName("sharepoint_file")
  private SharepointFile sharepointFile = null;

  @SerializedName("source_file_content")
  private String sourceFileContent = null;

  /**
   * Output format
   */
  public enum OutputFormatEnum {
    @SerializedName("PDF")
    PDF("PDF"),
    
    @SerializedName("XPS")
    XPS("XPS"),
    
    @SerializedName("DOCX")
    DOCX("DOCX"),
    
    @SerializedName("DOC")
    DOC("DOC"),
    
    @SerializedName("ODT")
    ODT("ODT"),
    
    @SerializedName("RTF")
    RTF("RTF"),
    
    @SerializedName("TXT")
    TXT("TXT"),
    
    @SerializedName("MHT")
    MHT("MHT"),
    
    @SerializedName("HTML")
    HTML("HTML"),
    
    @SerializedName("XML")
    XML("XML"),
    
    @SerializedName("XLS")
    XLS("XLS"),
    
    @SerializedName("XLSX")
    XLSX("XLSX"),
    
    @SerializedName("CSV")
    CSV("CSV"),
    
    @SerializedName("ODS")
    ODS("ODS");

    private String value;

    OutputFormatEnum(String value) {
      this.value = value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }
  }

  @SerializedName("output_format")
  private OutputFormatEnum outputFormat = OutputFormatEnum.PDF;

  @SerializedName("copy_metadata")
  private Boolean copyMetadata = false;

  @SerializedName("template_file_content")
  private String templateFileContent = null;

  @SerializedName("views_to_convert")
  private String viewsToConvert = null;

  @SerializedName("convert_attachments")
  private Boolean convertAttachments = true;

  /**
   * What to do with attachments
   */
  public enum AttachmentMergeModeEnum {
    @SerializedName("Default")
    DEFAULT("Default"),
    
    @SerializedName("Merge")
    MERGE("Merge"),
    
    @SerializedName("AttachAsPDF")
    ATTACHASPDF("AttachAsPDF"),
    
    @SerializedName("AttachOriginal")
    ATTACHORIGINAL("AttachOriginal");

    private String value;

    AttachmentMergeModeEnum(String value) {
      this.value = value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }
  }

  @SerializedName("attachment_merge_mode")
  private AttachmentMergeModeEnum attachmentMergeMode = null;

  /**
   * What to do with attachments which cannot be converted into PDF
   */
  public enum UnsupportedAttachmentBehaviourEnum {
    @SerializedName("Error")
    ERROR("Error"),
    
    @SerializedName("Remove")
    REMOVE("Remove"),
    
    @SerializedName("AttachOriginal")
    ATTACHORIGINAL("AttachOriginal");

    private String value;

    UnsupportedAttachmentBehaviourEnum(String value) {
      this.value = value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }
  }

  @SerializedName("unsupported_attachment_behaviour")
  private UnsupportedAttachmentBehaviourEnum unsupportedAttachmentBehaviour = null;

  @SerializedName("break_merge_on_error")
  private Boolean breakMergeOnError = null;

  @SerializedName("include_attachment_types")
  private String includeAttachmentTypes = null;

  @SerializedName("exclude_attachment_types")
  private String excludeAttachmentTypes = null;

  /**
   * Specify paper size to be used when it is not specified in the view
   */
  public enum DefaultPaperSizeEnum {
    @SerializedName("A3")
    A3("A3"),
    
    @SerializedName("A4")
    A4("A4"),
    
    @SerializedName("A5")
    A5("A5"),
    
    @SerializedName("Legal")
    LEGAL("Legal"),
    
    @SerializedName("Letter")
    LETTER("Letter"),
    
    @SerializedName("Custom")
    CUSTOM("Custom");

    private String value;

    DefaultPaperSizeEnum(String value) {
      this.value = value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }
  }

  @SerializedName("default_paper_size")
  private DefaultPaperSizeEnum defaultPaperSize = null;

  @SerializedName("default_paper_size_custom")
  private String defaultPaperSizeCustom = null;

  /**
   * Force this papers size regardless of whether it is set in the views or not
   */
  public enum ForcePaperSizeEnum {
    @SerializedName("A3")
    A3("A3"),
    
    @SerializedName("A4")
    A4("A4"),
    
    @SerializedName("A5")
    A5("A5"),
    
    @SerializedName("Legal")
    LEGAL("Legal"),
    
    @SerializedName("Letter")
    LETTER("Letter"),
    
    @SerializedName("Custom")
    CUSTOM("Custom");

    private String value;

    ForcePaperSizeEnum(String value) {
      this.value = value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }
  }

  @SerializedName("force_paper_size")
  private ForcePaperSizeEnum forcePaperSize = null;

  @SerializedName("force_paper_size_custom")
  private String forcePaperSizeCustom = null;

  /**
   * Specify papers size to be used if it is not specified in the view
   */
  public enum DefaultPageOrientationEnum {
    @SerializedName("Default")
    DEFAULT("Default"),
    
    @SerializedName("Portrait")
    PORTRAIT("Portrait"),
    
    @SerializedName("Landscape")
    LANDSCAPE("Landscape"),
    
    @SerializedName("Both")
    BOTH("Both");

    private String value;

    DefaultPageOrientationEnum(String value) {
      this.value = value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }
  }

  @SerializedName("default_page_orientation")
  private DefaultPageOrientationEnum defaultPageOrientation = DefaultPageOrientationEnum.DEFAULT;

  /**
   * Force page orientation regardless of whether it is set in the view or not
   */
  public enum ForcePageOrientationEnum {
    @SerializedName("Default")
    DEFAULT("Default"),
    
    @SerializedName("Portrait")
    PORTRAIT("Portrait"),
    
    @SerializedName("Landscape")
    LANDSCAPE("Landscape"),
    
    @SerializedName("Both")
    BOTH("Both");

    private String value;

    ForcePageOrientationEnum(String value) {
      this.value = value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }
  }

  @SerializedName("force_page_orientation")
  private ForcePageOrientationEnum forcePageOrientation = null;

  @SerializedName("start_page")
  private Integer startPage = null;

  @SerializedName("end_page")
  private Integer endPage = null;

  /**
   * Quality of the output file
   */
  public enum QualityEnum {
    @SerializedName("OptimizeForPrint")
    OPTIMIZEFORPRINT("OptimizeForPrint"),
    
    @SerializedName("OptimizeForOnScreen")
    OPTIMIZEFORONSCREEN("OptimizeForOnScreen"),
    
    @SerializedName("Original")
    ORIGINAL("Original");

    private String value;

    QualityEnum(String value) {
      this.value = value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }
  }

  @SerializedName("quality")
  private QualityEnum quality = null;

  @SerializedName("override_settings")
  private String overrideSettings = null;

  @SerializedName("fail_on_error")
  private Boolean failOnError = true;

  public ConvertInfopathData useAsyncPattern(Boolean useAsyncPattern) {
    this.useAsyncPattern = useAsyncPattern;
    return this;
  }

   /**
   * Use async behaviour for API request
   * @return useAsyncPattern
  **/
  @ApiModelProperty(example = "null", required = true, value = "Use async behaviour for API request")
  public Boolean getUseAsyncPattern() {
    return useAsyncPattern;
  }

  public void setUseAsyncPattern(Boolean useAsyncPattern) {
    this.useAsyncPattern = useAsyncPattern;
  }

  public ConvertInfopathData sourceFileName(String sourceFileName) {
    this.sourceFileName = sourceFileName;
    return this;
  }

   /**
   * Name of the source file including extension
   * @return sourceFileName
  **/
  @ApiModelProperty(example = "null", required = true, value = "Name of the source file including extension")
  public String getSourceFileName() {
    return sourceFileName;
  }

  public void setSourceFileName(String sourceFileName) {
    this.sourceFileName = sourceFileName;
  }

  public ConvertInfopathData sharepointFile(SharepointFile sharepointFile) {
    this.sharepointFile = sharepointFile;
    return this;
  }

   /**
   * Get sharepointFile
   * @return sharepointFile
  **/
  @ApiModelProperty(example = "null", value = "")
  public SharepointFile getSharepointFile() {
    return sharepointFile;
  }

  public void setSharepointFile(SharepointFile sharepointFile) {
    this.sharepointFile = sharepointFile;
  }

  public ConvertInfopathData sourceFileContent(String sourceFileContent) {
    this.sourceFileContent = sourceFileContent;
    return this;
  }

   /**
   * Content of the file to convert
   * @return sourceFileContent
  **/
  @ApiModelProperty(example = "null", required = true, value = "Content of the file to convert")
  public String getSourceFileContent() {
    return sourceFileContent;
  }

  public void setSourceFileContent(String sourceFileContent) {
    this.sourceFileContent = sourceFileContent;
  }

  public ConvertInfopathData outputFormat(OutputFormatEnum outputFormat) {
    this.outputFormat = outputFormat;
    return this;
  }

   /**
   * Output format
   * @return outputFormat
  **/
  @ApiModelProperty(example = "null", required = true, value = "Output format")
  public OutputFormatEnum getOutputFormat() {
    return outputFormat;
  }

  public void setOutputFormat(OutputFormatEnum outputFormat) {
    this.outputFormat = outputFormat;
  }

  public ConvertInfopathData copyMetadata(Boolean copyMetadata) {
    this.copyMetadata = copyMetadata;
    return this;
  }

   /**
   * Copy metadata (Only for SharePoint operations)
   * @return copyMetadata
  **/
  @ApiModelProperty(example = "null", required = true, value = "Copy metadata (Only for SharePoint operations)")
  public Boolean getCopyMetadata() {
    return copyMetadata;
  }

  public void setCopyMetadata(Boolean copyMetadata) {
    this.copyMetadata = copyMetadata;
  }

  public ConvertInfopathData templateFileContent(String templateFileContent) {
    this.templateFileContent = templateFileContent;
    return this;
  }

   /**
   * Optional XSN file content
   * @return templateFileContent
  **/
  @ApiModelProperty(example = "null", value = "Optional XSN file content")
  public String getTemplateFileContent() {
    return templateFileContent;
  }

  public void setTemplateFileContent(String templateFileContent) {
    this.templateFileContent = templateFileContent;
  }

  public ConvertInfopathData viewsToConvert(String viewsToConvert) {
    this.viewsToConvert = viewsToConvert;
    return this;
  }

   /**
   * Comma separated list view names to convert
   * @return viewsToConvert
  **/
  @ApiModelProperty(example = "null", value = "Comma separated list view names to convert")
  public String getViewsToConvert() {
    return viewsToConvert;
  }

  public void setViewsToConvert(String viewsToConvert) {
    this.viewsToConvert = viewsToConvert;
  }

  public ConvertInfopathData convertAttachments(Boolean convertAttachments) {
    this.convertAttachments = convertAttachments;
    return this;
  }

   /**
   * Include attachments
   * @return convertAttachments
  **/
  @ApiModelProperty(example = "null", value = "Include attachments")
  public Boolean getConvertAttachments() {
    return convertAttachments;
  }

  public void setConvertAttachments(Boolean convertAttachments) {
    this.convertAttachments = convertAttachments;
  }

  public ConvertInfopathData attachmentMergeMode(AttachmentMergeModeEnum attachmentMergeMode) {
    this.attachmentMergeMode = attachmentMergeMode;
    return this;
  }

   /**
   * What to do with attachments
   * @return attachmentMergeMode
  **/
  @ApiModelProperty(example = "null", value = "What to do with attachments")
  public AttachmentMergeModeEnum getAttachmentMergeMode() {
    return attachmentMergeMode;
  }

  public void setAttachmentMergeMode(AttachmentMergeModeEnum attachmentMergeMode) {
    this.attachmentMergeMode = attachmentMergeMode;
  }

  public ConvertInfopathData unsupportedAttachmentBehaviour(UnsupportedAttachmentBehaviourEnum unsupportedAttachmentBehaviour) {
    this.unsupportedAttachmentBehaviour = unsupportedAttachmentBehaviour;
    return this;
  }

   /**
   * What to do with attachments which cannot be converted into PDF
   * @return unsupportedAttachmentBehaviour
  **/
  @ApiModelProperty(example = "null", value = "What to do with attachments which cannot be converted into PDF")
  public UnsupportedAttachmentBehaviourEnum getUnsupportedAttachmentBehaviour() {
    return unsupportedAttachmentBehaviour;
  }

  public void setUnsupportedAttachmentBehaviour(UnsupportedAttachmentBehaviourEnum unsupportedAttachmentBehaviour) {
    this.unsupportedAttachmentBehaviour = unsupportedAttachmentBehaviour;
  }

  public ConvertInfopathData breakMergeOnError(Boolean breakMergeOnError) {
    this.breakMergeOnError = breakMergeOnError;
    return this;
  }

   /**
   * Break conversion when processing of an individual part fails
   * @return breakMergeOnError
  **/
  @ApiModelProperty(example = "null", value = "Break conversion when processing of an individual part fails")
  public Boolean getBreakMergeOnError() {
    return breakMergeOnError;
  }

  public void setBreakMergeOnError(Boolean breakMergeOnError) {
    this.breakMergeOnError = breakMergeOnError;
  }

  public ConvertInfopathData includeAttachmentTypes(String includeAttachmentTypes) {
    this.includeAttachmentTypes = includeAttachmentTypes;
    return this;
  }

   /**
   * Comma separated values, e.g. *.txt, June???.docx
   * @return includeAttachmentTypes
  **/
  @ApiModelProperty(example = "null", value = "Comma separated values, e.g. *.txt, June???.docx")
  public String getIncludeAttachmentTypes() {
    return includeAttachmentTypes;
  }

  public void setIncludeAttachmentTypes(String includeAttachmentTypes) {
    this.includeAttachmentTypes = includeAttachmentTypes;
  }

  public ConvertInfopathData excludeAttachmentTypes(String excludeAttachmentTypes) {
    this.excludeAttachmentTypes = excludeAttachmentTypes;
    return this;
  }

   /**
   * Comma separated values, e.g. *.txt, June???.docx
   * @return excludeAttachmentTypes
  **/
  @ApiModelProperty(example = "null", value = "Comma separated values, e.g. *.txt, June???.docx")
  public String getExcludeAttachmentTypes() {
    return excludeAttachmentTypes;
  }

  public void setExcludeAttachmentTypes(String excludeAttachmentTypes) {
    this.excludeAttachmentTypes = excludeAttachmentTypes;
  }

  public ConvertInfopathData defaultPaperSize(DefaultPaperSizeEnum defaultPaperSize) {
    this.defaultPaperSize = defaultPaperSize;
    return this;
  }

   /**
   * Specify paper size to be used when it is not specified in the view
   * @return defaultPaperSize
  **/
  @ApiModelProperty(example = "null", value = "Specify paper size to be used when it is not specified in the view")
  public DefaultPaperSizeEnum getDefaultPaperSize() {
    return defaultPaperSize;
  }

  public void setDefaultPaperSize(DefaultPaperSizeEnum defaultPaperSize) {
    this.defaultPaperSize = defaultPaperSize;
  }

  public ConvertInfopathData defaultPaperSizeCustom(String defaultPaperSizeCustom) {
    this.defaultPaperSizeCustom = defaultPaperSizeCustom;
    return this;
  }

   /**
   * Applicable if 'Default paper size' is set to 'Custom'
   * @return defaultPaperSizeCustom
  **/
  @ApiModelProperty(example = "null", value = "Applicable if 'Default paper size' is set to 'Custom'")
  public String getDefaultPaperSizeCustom() {
    return defaultPaperSizeCustom;
  }

  public void setDefaultPaperSizeCustom(String defaultPaperSizeCustom) {
    this.defaultPaperSizeCustom = defaultPaperSizeCustom;
  }

  public ConvertInfopathData forcePaperSize(ForcePaperSizeEnum forcePaperSize) {
    this.forcePaperSize = forcePaperSize;
    return this;
  }

   /**
   * Force this papers size regardless of whether it is set in the views or not
   * @return forcePaperSize
  **/
  @ApiModelProperty(example = "null", value = "Force this papers size regardless of whether it is set in the views or not")
  public ForcePaperSizeEnum getForcePaperSize() {
    return forcePaperSize;
  }

  public void setForcePaperSize(ForcePaperSizeEnum forcePaperSize) {
    this.forcePaperSize = forcePaperSize;
  }

  public ConvertInfopathData forcePaperSizeCustom(String forcePaperSizeCustom) {
    this.forcePaperSizeCustom = forcePaperSizeCustom;
    return this;
  }

   /**
   * Applicable if 'Force paper size' is set to custom
   * @return forcePaperSizeCustom
  **/
  @ApiModelProperty(example = "null", value = "Applicable if 'Force paper size' is set to custom")
  public String getForcePaperSizeCustom() {
    return forcePaperSizeCustom;
  }

  public void setForcePaperSizeCustom(String forcePaperSizeCustom) {
    this.forcePaperSizeCustom = forcePaperSizeCustom;
  }

  public ConvertInfopathData defaultPageOrientation(DefaultPageOrientationEnum defaultPageOrientation) {
    this.defaultPageOrientation = defaultPageOrientation;
    return this;
  }

   /**
   * Specify papers size to be used if it is not specified in the view
   * @return defaultPageOrientation
  **/
  @ApiModelProperty(example = "null", value = "Specify papers size to be used if it is not specified in the view")
  public DefaultPageOrientationEnum getDefaultPageOrientation() {
    return defaultPageOrientation;
  }

  public void setDefaultPageOrientation(DefaultPageOrientationEnum defaultPageOrientation) {
    this.defaultPageOrientation = defaultPageOrientation;
  }

  public ConvertInfopathData forcePageOrientation(ForcePageOrientationEnum forcePageOrientation) {
    this.forcePageOrientation = forcePageOrientation;
    return this;
  }

   /**
   * Force page orientation regardless of whether it is set in the view or not
   * @return forcePageOrientation
  **/
  @ApiModelProperty(example = "null", value = "Force page orientation regardless of whether it is set in the view or not")
  public ForcePageOrientationEnum getForcePageOrientation() {
    return forcePageOrientation;
  }

  public void setForcePageOrientation(ForcePageOrientationEnum forcePageOrientation) {
    this.forcePageOrientation = forcePageOrientation;
  }

  public ConvertInfopathData startPage(Integer startPage) {
    this.startPage = startPage;
    return this;
  }

   /**
   * The first page to include
   * @return startPage
  **/
  @ApiModelProperty(example = "null", value = "The first page to include")
  public Integer getStartPage() {
    return startPage;
  }

  public void setStartPage(Integer startPage) {
    this.startPage = startPage;
  }

  public ConvertInfopathData endPage(Integer endPage) {
    this.endPage = endPage;
    return this;
  }

   /**
   * The last page to include
   * @return endPage
  **/
  @ApiModelProperty(example = "null", value = "The last page to include")
  public Integer getEndPage() {
    return endPage;
  }

  public void setEndPage(Integer endPage) {
    this.endPage = endPage;
  }

  public ConvertInfopathData quality(QualityEnum quality) {
    this.quality = quality;
    return this;
  }

   /**
   * Quality of the output file
   * @return quality
  **/
  @ApiModelProperty(example = "null", value = "Quality of the output file")
  public QualityEnum getQuality() {
    return quality;
  }

  public void setQuality(QualityEnum quality) {
    this.quality = quality;
  }

  public ConvertInfopathData overrideSettings(String overrideSettings) {
    this.overrideSettings = overrideSettings;
    return this;
  }

   /**
   * Optional settings using Muhimbi's XML syntax
   * @return overrideSettings
  **/
  @ApiModelProperty(example = "null", value = "Optional settings using Muhimbi's XML syntax")
  public String getOverrideSettings() {
    return overrideSettings;
  }

  public void setOverrideSettings(String overrideSettings) {
    this.overrideSettings = overrideSettings;
  }

  public ConvertInfopathData failOnError(Boolean failOnError) {
    this.failOnError = failOnError;
    return this;
  }

   /**
   * Fail on error
   * @return failOnError
  **/
  @ApiModelProperty(example = "null", value = "Fail on error")
  public Boolean getFailOnError() {
    return failOnError;
  }

  public void setFailOnError(Boolean failOnError) {
    this.failOnError = failOnError;
  }


  @Override
  public boolean equals(java.lang.Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    ConvertInfopathData convertInfopathData = (ConvertInfopathData) o;
    return Objects.equals(this.useAsyncPattern, convertInfopathData.useAsyncPattern) &&
        Objects.equals(this.sourceFileName, convertInfopathData.sourceFileName) &&
        Objects.equals(this.sharepointFile, convertInfopathData.sharepointFile) &&
        Objects.equals(this.sourceFileContent, convertInfopathData.sourceFileContent) &&
        Objects.equals(this.outputFormat, convertInfopathData.outputFormat) &&
        Objects.equals(this.copyMetadata, convertInfopathData.copyMetadata) &&
        Objects.equals(this.templateFileContent, convertInfopathData.templateFileContent) &&
        Objects.equals(this.viewsToConvert, convertInfopathData.viewsToConvert) &&
        Objects.equals(this.convertAttachments, convertInfopathData.convertAttachments) &&
        Objects.equals(this.attachmentMergeMode, convertInfopathData.attachmentMergeMode) &&
        Objects.equals(this.unsupportedAttachmentBehaviour, convertInfopathData.unsupportedAttachmentBehaviour) &&
        Objects.equals(this.breakMergeOnError, convertInfopathData.breakMergeOnError) &&
        Objects.equals(this.includeAttachmentTypes, convertInfopathData.includeAttachmentTypes) &&
        Objects.equals(this.excludeAttachmentTypes, convertInfopathData.excludeAttachmentTypes) &&
        Objects.equals(this.defaultPaperSize, convertInfopathData.defaultPaperSize) &&
        Objects.equals(this.defaultPaperSizeCustom, convertInfopathData.defaultPaperSizeCustom) &&
        Objects.equals(this.forcePaperSize, convertInfopathData.forcePaperSize) &&
        Objects.equals(this.forcePaperSizeCustom, convertInfopathData.forcePaperSizeCustom) &&
        Objects.equals(this.defaultPageOrientation, convertInfopathData.defaultPageOrientation) &&
        Objects.equals(this.forcePageOrientation, convertInfopathData.forcePageOrientation) &&
        Objects.equals(this.startPage, convertInfopathData.startPage) &&
        Objects.equals(this.endPage, convertInfopathData.endPage) &&
        Objects.equals(this.quality, convertInfopathData.quality) &&
        Objects.equals(this.overrideSettings, convertInfopathData.overrideSettings) &&
        Objects.equals(this.failOnError, convertInfopathData.failOnError);
  }

  @Override
  public int hashCode() {
    return Objects.hash(useAsyncPattern, sourceFileName, sharepointFile, sourceFileContent, outputFormat, copyMetadata, templateFileContent, viewsToConvert, convertAttachments, attachmentMergeMode, unsupportedAttachmentBehaviour, breakMergeOnError, includeAttachmentTypes, excludeAttachmentTypes, defaultPaperSize, defaultPaperSizeCustom, forcePaperSize, forcePaperSizeCustom, defaultPageOrientation, forcePageOrientation, startPage, endPage, quality, overrideSettings, failOnError);
  }


  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class ConvertInfopathData {\n");
    
    sb.append("    useAsyncPattern: ").append(toIndentedString(useAsyncPattern)).append("\n");
    sb.append("    sourceFileName: ").append(toIndentedString(sourceFileName)).append("\n");
    sb.append("    sharepointFile: ").append(toIndentedString(sharepointFile)).append("\n");
    sb.append("    sourceFileContent: ").append(toIndentedString(sourceFileContent)).append("\n");
    sb.append("    outputFormat: ").append(toIndentedString(outputFormat)).append("\n");
    sb.append("    copyMetadata: ").append(toIndentedString(copyMetadata)).append("\n");
    sb.append("    templateFileContent: ").append(toIndentedString(templateFileContent)).append("\n");
    sb.append("    viewsToConvert: ").append(toIndentedString(viewsToConvert)).append("\n");
    sb.append("    convertAttachments: ").append(toIndentedString(convertAttachments)).append("\n");
    sb.append("    attachmentMergeMode: ").append(toIndentedString(attachmentMergeMode)).append("\n");
    sb.append("    unsupportedAttachmentBehaviour: ").append(toIndentedString(unsupportedAttachmentBehaviour)).append("\n");
    sb.append("    breakMergeOnError: ").append(toIndentedString(breakMergeOnError)).append("\n");
    sb.append("    includeAttachmentTypes: ").append(toIndentedString(includeAttachmentTypes)).append("\n");
    sb.append("    excludeAttachmentTypes: ").append(toIndentedString(excludeAttachmentTypes)).append("\n");
    sb.append("    defaultPaperSize: ").append(toIndentedString(defaultPaperSize)).append("\n");
    sb.append("    defaultPaperSizeCustom: ").append(toIndentedString(defaultPaperSizeCustom)).append("\n");
    sb.append("    forcePaperSize: ").append(toIndentedString(forcePaperSize)).append("\n");
    sb.append("    forcePaperSizeCustom: ").append(toIndentedString(forcePaperSizeCustom)).append("\n");
    sb.append("    defaultPageOrientation: ").append(toIndentedString(defaultPageOrientation)).append("\n");
    sb.append("    forcePageOrientation: ").append(toIndentedString(forcePageOrientation)).append("\n");
    sb.append("    startPage: ").append(toIndentedString(startPage)).append("\n");
    sb.append("    endPage: ").append(toIndentedString(endPage)).append("\n");
    sb.append("    quality: ").append(toIndentedString(quality)).append("\n");
    sb.append("    overrideSettings: ").append(toIndentedString(overrideSettings)).append("\n");
    sb.append("    failOnError: ").append(toIndentedString(failOnError)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(java.lang.Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }
  
}

