/*
 * Muhimbi PDF
 * Convert, Merge, Watermark, Secure and OCR files.
 *
 * OpenAPI spec version: 9.14.1
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */


package com.muhimbi.online.client.model;

import java.util.Objects;
import com.google.gson.annotations.SerializedName;
import com.muhimbi.online.client.model.SharepointFile;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;

/**
 * Parameters for SplitPdf operation
 */
@ApiModel(description = "Parameters for SplitPdf operation")
@javax.annotation.Generated(value = "io.swagger.codegen.languages.JavaClientCodegen", date = "2020-12-15T15:24:28.962Z")
public class SplitPdfData {
  @SerializedName("use_async_pattern")
  private Boolean useAsyncPattern = false;

  @SerializedName("source_file_name")
  private String sourceFileName = null;

  @SerializedName("source_file_content")
  private String sourceFileContent = null;

  @SerializedName("sharepoint_file")
  private SharepointFile sharepointFile = null;

  @SerializedName("file_name_template")
  private String fileNameTemplate = null;

  /**
   * Split by option
   */
  public enum FileSplitByEnum {
    @SerializedName("Number of Pages")
    NUMBER_OF_PAGES("Number of Pages"),
    
    @SerializedName("Bookmark Level")
    BOOKMARK_LEVEL("Bookmark Level");

    private String value;

    FileSplitByEnum(String value) {
      this.value = value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }
  }

  @SerializedName("file_split_by")
  private FileSplitByEnum fileSplitBy = FileSplitByEnum.NUMBER_OF_PAGES;

  @SerializedName("split_parameter")
  private Integer splitParameter = 1;

  @SerializedName("fail_on_error")
  private Boolean failOnError = true;

  public SplitPdfData useAsyncPattern(Boolean useAsyncPattern) {
    this.useAsyncPattern = useAsyncPattern;
    return this;
  }

   /**
   * Use async behaviour for API request
   * @return useAsyncPattern
  **/
  @ApiModelProperty(example = "null", required = true, value = "Use async behaviour for API request")
  public Boolean getUseAsyncPattern() {
    return useAsyncPattern;
  }

  public void setUseAsyncPattern(Boolean useAsyncPattern) {
    this.useAsyncPattern = useAsyncPattern;
  }

  public SplitPdfData sourceFileName(String sourceFileName) {
    this.sourceFileName = sourceFileName;
    return this;
  }

   /**
   * Name of the source file including extension
   * @return sourceFileName
  **/
  @ApiModelProperty(example = "null", required = true, value = "Name of the source file including extension")
  public String getSourceFileName() {
    return sourceFileName;
  }

  public void setSourceFileName(String sourceFileName) {
    this.sourceFileName = sourceFileName;
  }

  public SplitPdfData sourceFileContent(String sourceFileContent) {
    this.sourceFileContent = sourceFileContent;
    return this;
  }

   /**
   * Content of the file to split
   * @return sourceFileContent
  **/
  @ApiModelProperty(example = "null", required = true, value = "Content of the file to split")
  public String getSourceFileContent() {
    return sourceFileContent;
  }

  public void setSourceFileContent(String sourceFileContent) {
    this.sourceFileContent = sourceFileContent;
  }

  public SplitPdfData sharepointFile(SharepointFile sharepointFile) {
    this.sharepointFile = sharepointFile;
    return this;
  }

   /**
   * Get sharepointFile
   * @return sharepointFile
  **/
  @ApiModelProperty(example = "null", value = "")
  public SharepointFile getSharepointFile() {
    return sharepointFile;
  }

  public void setSharepointFile(SharepointFile sharepointFile) {
    this.sharepointFile = sharepointFile;
  }

  public SplitPdfData fileNameTemplate(String fileNameTemplate) {
    this.fileNameTemplate = fileNameTemplate;
    return this;
  }

   /**
   * File name template for returned files
   * @return fileNameTemplate
  **/
  @ApiModelProperty(example = "null", value = "File name template for returned files")
  public String getFileNameTemplate() {
    return fileNameTemplate;
  }

  public void setFileNameTemplate(String fileNameTemplate) {
    this.fileNameTemplate = fileNameTemplate;
  }

  public SplitPdfData fileSplitBy(FileSplitByEnum fileSplitBy) {
    this.fileSplitBy = fileSplitBy;
    return this;
  }

   /**
   * Split by option
   * @return fileSplitBy
  **/
  @ApiModelProperty(example = "null", required = true, value = "Split by option")
  public FileSplitByEnum getFileSplitBy() {
    return fileSplitBy;
  }

  public void setFileSplitBy(FileSplitByEnum fileSplitBy) {
    this.fileSplitBy = fileSplitBy;
  }

  public SplitPdfData splitParameter(Integer splitParameter) {
    this.splitParameter = splitParameter;
    return this;
  }

   /**
   * Split parameter (number of pages or level)
   * @return splitParameter
  **/
  @ApiModelProperty(example = "null", required = true, value = "Split parameter (number of pages or level)")
  public Integer getSplitParameter() {
    return splitParameter;
  }

  public void setSplitParameter(Integer splitParameter) {
    this.splitParameter = splitParameter;
  }

  public SplitPdfData failOnError(Boolean failOnError) {
    this.failOnError = failOnError;
    return this;
  }

   /**
   * Fail on error
   * @return failOnError
  **/
  @ApiModelProperty(example = "null", value = "Fail on error")
  public Boolean getFailOnError() {
    return failOnError;
  }

  public void setFailOnError(Boolean failOnError) {
    this.failOnError = failOnError;
  }


  @Override
  public boolean equals(java.lang.Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    SplitPdfData splitPdfData = (SplitPdfData) o;
    return Objects.equals(this.useAsyncPattern, splitPdfData.useAsyncPattern) &&
        Objects.equals(this.sourceFileName, splitPdfData.sourceFileName) &&
        Objects.equals(this.sourceFileContent, splitPdfData.sourceFileContent) &&
        Objects.equals(this.sharepointFile, splitPdfData.sharepointFile) &&
        Objects.equals(this.fileNameTemplate, splitPdfData.fileNameTemplate) &&
        Objects.equals(this.fileSplitBy, splitPdfData.fileSplitBy) &&
        Objects.equals(this.splitParameter, splitPdfData.splitParameter) &&
        Objects.equals(this.failOnError, splitPdfData.failOnError);
  }

  @Override
  public int hashCode() {
    return Objects.hash(useAsyncPattern, sourceFileName, sourceFileContent, sharepointFile, fileNameTemplate, fileSplitBy, splitParameter, failOnError);
  }


  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class SplitPdfData {\n");
    
    sb.append("    useAsyncPattern: ").append(toIndentedString(useAsyncPattern)).append("\n");
    sb.append("    sourceFileName: ").append(toIndentedString(sourceFileName)).append("\n");
    sb.append("    sourceFileContent: ").append(toIndentedString(sourceFileContent)).append("\n");
    sb.append("    sharepointFile: ").append(toIndentedString(sharepointFile)).append("\n");
    sb.append("    fileNameTemplate: ").append(toIndentedString(fileNameTemplate)).append("\n");
    sb.append("    fileSplitBy: ").append(toIndentedString(fileSplitBy)).append("\n");
    sb.append("    splitParameter: ").append(toIndentedString(splitParameter)).append("\n");
    sb.append("    failOnError: ").append(toIndentedString(failOnError)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(java.lang.Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }
  
}

