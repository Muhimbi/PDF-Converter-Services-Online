/*
 * Muhimbi PDF
 * Convert, Merge, Watermark, Secure and OCR files.
 *
 * OpenAPI spec version: 9.14
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */


package com.muhimbi.online.client.model;

import java.util.Objects;
import com.google.gson.annotations.SerializedName;
import com.muhimbi.online.client.model.SharepointFile;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;

/**
 * Parameters for OCRText operation
 */
@ApiModel(description = "Parameters for OCRText operation")
@javax.annotation.Generated(value = "io.swagger.codegen.languages.JavaClientCodegen", date = "2020-06-02T17:07:48.610+01:00")
public class OcrTextData {
  @SerializedName("use_async_pattern")
  private Boolean useAsyncPattern = false;

  @SerializedName("source_file_name")
  private String sourceFileName = null;

  @SerializedName("source_file_content")
  private String sourceFileContent = null;

  @SerializedName("sharepoint_file")
  private SharepointFile sharepointFile = null;

  /**
   * Language
   */
  public enum LanguageEnum {
    @SerializedName("English")
    ENGLISH("English"),
    
    @SerializedName("Arabic")
    ARABIC("Arabic"),
    
    @SerializedName("Danish")
    DANISH("Danish"),
    
    @SerializedName("German")
    GERMAN("German"),
    
    @SerializedName("Dutch")
    DUTCH("Dutch"),
    
    @SerializedName("Finnish")
    FINNISH("Finnish"),
    
    @SerializedName("French")
    FRENCH("French"),
    
    @SerializedName("Hebrew")
    HEBREW("Hebrew"),
    
    @SerializedName("Hungarian")
    HUNGARIAN("Hungarian"),
    
    @SerializedName("Italian")
    ITALIAN("Italian"),
    
    @SerializedName("Norwegian")
    NORWEGIAN("Norwegian"),
    
    @SerializedName("Portuguese")
    PORTUGUESE("Portuguese"),
    
    @SerializedName("Spanish")
    SPANISH("Spanish"),
    
    @SerializedName("Swedish")
    SWEDISH("Swedish"),
    
    @SerializedName("Russian")
    RUSSIAN("Russian");

    private String value;

    LanguageEnum(String value) {
      this.value = value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }
  }

  @SerializedName("language")
  private LanguageEnum language = LanguageEnum.ENGLISH;

  @SerializedName("x")
  private String x = null;

  @SerializedName("y")
  private String y = null;

  @SerializedName("width")
  private String width = null;

  @SerializedName("height")
  private String height = null;

  @SerializedName("page_number")
  private String pageNumber = "";

  /**
   * Performance ()
   */
  public enum PerformanceEnum {
    @SerializedName("Slow but accurate")
    SLOW_BUT_ACCURATE("Slow but accurate"),
    
    @SerializedName("Faster and less accurate")
    FASTER_AND_LESS_ACCURATE("Faster and less accurate"),
    
    @SerializedName("Fastest and least accurate")
    FASTEST_AND_LEAST_ACCURATE("Fastest and least accurate");

    private String value;

    PerformanceEnum(String value) {
      this.value = value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }
  }

  @SerializedName("performance")
  private PerformanceEnum performance = PerformanceEnum.SLOW_BUT_ACCURATE;

  /**
   * Characters option
   */
  public enum CharactersOptionEnum {
    @SerializedName("None")
    NONE("None"),
    
    @SerializedName("Whitelist")
    WHITELIST("Whitelist"),
    
    @SerializedName("Blacklist")
    BLACKLIST("Blacklist");

    private String value;

    CharactersOptionEnum(String value) {
      this.value = value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }
  }

  @SerializedName("characters_option")
  private CharactersOptionEnum charactersOption = CharactersOptionEnum.NONE;

  @SerializedName("characters")
  private String characters = null;

  @SerializedName("paginate")
  private Boolean paginate = false;

  @SerializedName("fail_on_error")
  private Boolean failOnError = true;

  public OcrTextData useAsyncPattern(Boolean useAsyncPattern) {
    this.useAsyncPattern = useAsyncPattern;
    return this;
  }

   /**
   * Use async behaviour for API request
   * @return useAsyncPattern
  **/
  @ApiModelProperty(example = "null", required = true, value = "Use async behaviour for API request")
  public Boolean getUseAsyncPattern() {
    return useAsyncPattern;
  }

  public void setUseAsyncPattern(Boolean useAsyncPattern) {
    this.useAsyncPattern = useAsyncPattern;
  }

  public OcrTextData sourceFileName(String sourceFileName) {
    this.sourceFileName = sourceFileName;
    return this;
  }

   /**
   * Name of the source file including extension
   * @return sourceFileName
  **/
  @ApiModelProperty(example = "null", required = true, value = "Name of the source file including extension")
  public String getSourceFileName() {
    return sourceFileName;
  }

  public void setSourceFileName(String sourceFileName) {
    this.sourceFileName = sourceFileName;
  }

  public OcrTextData sourceFileContent(String sourceFileContent) {
    this.sourceFileContent = sourceFileContent;
    return this;
  }

   /**
   * Content of the file to OCR
   * @return sourceFileContent
  **/
  @ApiModelProperty(example = "null", required = true, value = "Content of the file to OCR")
  public String getSourceFileContent() {
    return sourceFileContent;
  }

  public void setSourceFileContent(String sourceFileContent) {
    this.sourceFileContent = sourceFileContent;
  }

  public OcrTextData sharepointFile(SharepointFile sharepointFile) {
    this.sharepointFile = sharepointFile;
    return this;
  }

   /**
   * Get sharepointFile
   * @return sharepointFile
  **/
  @ApiModelProperty(example = "null", value = "")
  public SharepointFile getSharepointFile() {
    return sharepointFile;
  }

  public void setSharepointFile(SharepointFile sharepointFile) {
    this.sharepointFile = sharepointFile;
  }

  public OcrTextData language(LanguageEnum language) {
    this.language = language;
    return this;
  }

   /**
   * Language
   * @return language
  **/
  @ApiModelProperty(example = "null", value = "Language")
  public LanguageEnum getLanguage() {
    return language;
  }

  public void setLanguage(LanguageEnum language) {
    this.language = language;
  }

  public OcrTextData x(String x) {
    this.x = x;
    return this;
  }

   /**
   * X Coordinate (in Pts, 1/72 of an inch)
   * @return x
  **/
  @ApiModelProperty(example = "null", value = "X Coordinate (in Pts, 1/72 of an inch)")
  public String getX() {
    return x;
  }

  public void setX(String x) {
    this.x = x;
  }

  public OcrTextData y(String y) {
    this.y = y;
    return this;
  }

   /**
   * Y Coordinate (in Pts, 1/72 of an inch)
   * @return y
  **/
  @ApiModelProperty(example = "null", value = "Y Coordinate (in Pts, 1/72 of an inch)")
  public String getY() {
    return y;
  }

  public void setY(String y) {
    this.y = y;
  }

  public OcrTextData width(String width) {
    this.width = width;
    return this;
  }

   /**
   * Width of the OCR area (in Pts, 1/72 of an inch)
   * @return width
  **/
  @ApiModelProperty(example = "null", value = "Width of the OCR area (in Pts, 1/72 of an inch)")
  public String getWidth() {
    return width;
  }

  public void setWidth(String width) {
    this.width = width;
  }

  public OcrTextData height(String height) {
    this.height = height;
    return this;
  }

   /**
   * Height of the OCR area (in Pts, 1/72 of an inch)
   * @return height
  **/
  @ApiModelProperty(example = "null", value = "Height of the OCR area (in Pts, 1/72 of an inch)")
  public String getHeight() {
    return height;
  }

  public void setHeight(String height) {
    this.height = height;
  }

  public OcrTextData pageNumber(String pageNumber) {
    this.pageNumber = pageNumber;
    return this;
  }

   /**
   * Page number (leave blank to OCR all pages)
   * @return pageNumber
  **/
  @ApiModelProperty(example = "null", value = "Page number (leave blank to OCR all pages)")
  public String getPageNumber() {
    return pageNumber;
  }

  public void setPageNumber(String pageNumber) {
    this.pageNumber = pageNumber;
  }

  public OcrTextData performance(PerformanceEnum performance) {
    this.performance = performance;
    return this;
  }

   /**
   * Performance ()
   * @return performance
  **/
  @ApiModelProperty(example = "null", value = "Performance ()")
  public PerformanceEnum getPerformance() {
    return performance;
  }

  public void setPerformance(PerformanceEnum performance) {
    this.performance = performance;
  }

  public OcrTextData charactersOption(CharactersOptionEnum charactersOption) {
    this.charactersOption = charactersOption;
    return this;
  }

   /**
   * Characters option
   * @return charactersOption
  **/
  @ApiModelProperty(example = "null", value = "Characters option")
  public CharactersOptionEnum getCharactersOption() {
    return charactersOption;
  }

  public void setCharactersOption(CharactersOptionEnum charactersOption) {
    this.charactersOption = charactersOption;
  }

  public OcrTextData characters(String characters) {
    this.characters = characters;
    return this;
  }

   /**
   * Characters to blacklist or whitelist
   * @return characters
  **/
  @ApiModelProperty(example = "null", value = "Characters to blacklist or whitelist")
  public String getCharacters() {
    return characters;
  }

  public void setCharacters(String characters) {
    this.characters = characters;
  }

  public OcrTextData paginate(Boolean paginate) {
    this.paginate = paginate;
    return this;
  }

   /**
   * Paginate
   * @return paginate
  **/
  @ApiModelProperty(example = "null", value = "Paginate")
  public Boolean getPaginate() {
    return paginate;
  }

  public void setPaginate(Boolean paginate) {
    this.paginate = paginate;
  }

  public OcrTextData failOnError(Boolean failOnError) {
    this.failOnError = failOnError;
    return this;
  }

   /**
   * Fail on error
   * @return failOnError
  **/
  @ApiModelProperty(example = "null", value = "Fail on error")
  public Boolean getFailOnError() {
    return failOnError;
  }

  public void setFailOnError(Boolean failOnError) {
    this.failOnError = failOnError;
  }


  @Override
  public boolean equals(java.lang.Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    OcrTextData ocrTextData = (OcrTextData) o;
    return Objects.equals(this.useAsyncPattern, ocrTextData.useAsyncPattern) &&
        Objects.equals(this.sourceFileName, ocrTextData.sourceFileName) &&
        Objects.equals(this.sourceFileContent, ocrTextData.sourceFileContent) &&
        Objects.equals(this.sharepointFile, ocrTextData.sharepointFile) &&
        Objects.equals(this.language, ocrTextData.language) &&
        Objects.equals(this.x, ocrTextData.x) &&
        Objects.equals(this.y, ocrTextData.y) &&
        Objects.equals(this.width, ocrTextData.width) &&
        Objects.equals(this.height, ocrTextData.height) &&
        Objects.equals(this.pageNumber, ocrTextData.pageNumber) &&
        Objects.equals(this.performance, ocrTextData.performance) &&
        Objects.equals(this.charactersOption, ocrTextData.charactersOption) &&
        Objects.equals(this.characters, ocrTextData.characters) &&
        Objects.equals(this.paginate, ocrTextData.paginate) &&
        Objects.equals(this.failOnError, ocrTextData.failOnError);
  }

  @Override
  public int hashCode() {
    return Objects.hash(useAsyncPattern, sourceFileName, sourceFileContent, sharepointFile, language, x, y, width, height, pageNumber, performance, charactersOption, characters, paginate, failOnError);
  }


  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class OcrTextData {\n");
    
    sb.append("    useAsyncPattern: ").append(toIndentedString(useAsyncPattern)).append("\n");
    sb.append("    sourceFileName: ").append(toIndentedString(sourceFileName)).append("\n");
    sb.append("    sourceFileContent: ").append(toIndentedString(sourceFileContent)).append("\n");
    sb.append("    sharepointFile: ").append(toIndentedString(sharepointFile)).append("\n");
    sb.append("    language: ").append(toIndentedString(language)).append("\n");
    sb.append("    x: ").append(toIndentedString(x)).append("\n");
    sb.append("    y: ").append(toIndentedString(y)).append("\n");
    sb.append("    width: ").append(toIndentedString(width)).append("\n");
    sb.append("    height: ").append(toIndentedString(height)).append("\n");
    sb.append("    pageNumber: ").append(toIndentedString(pageNumber)).append("\n");
    sb.append("    performance: ").append(toIndentedString(performance)).append("\n");
    sb.append("    charactersOption: ").append(toIndentedString(charactersOption)).append("\n");
    sb.append("    characters: ").append(toIndentedString(characters)).append("\n");
    sb.append("    paginate: ").append(toIndentedString(paginate)).append("\n");
    sb.append("    failOnError: ").append(toIndentedString(failOnError)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(java.lang.Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }
  
}

