/*
 * Muhimbi PDF
 * Convert, Merge, Watermark, Secure and OCR files.
 *
 * OpenAPI spec version: 9.16
 * Contact: support@muhimbi.com
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */


package com.muhimbi.online.client.model;

import java.util.Objects;
import com.google.gson.annotations.SerializedName;
import com.muhimbi.online.client.model.SharepointFile;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;

/**
 * Parameters for Convert Infopath operation
 */
@ApiModel(description = "Parameters for Convert Infopath operation")
@javax.annotation.Generated(value = "io.swagger.codegen.languages.JavaClientCodegen", date = "2022-05-17T15:20:03.344+01:00")
public class ImportFormData {
  @SerializedName("use_async_pattern")
  private Boolean useAsyncPattern = false;

  @SerializedName("source_file_name")
  private String sourceFileName = null;

  @SerializedName("sharepoint_file")
  private SharepointFile sharepointFile = null;

  @SerializedName("source_file_content")
  private String sourceFileContent = null;

  @SerializedName("copy_metadata")
  private Boolean copyMetadata = false;

  @SerializedName("pdf_template_file_content")
  private String pdfTemplateFileContent = null;

  @SerializedName("pdf_template_url")
  private String pdfTemplateUrl = null;

  @SerializedName("pdf_template_username")
  private String pdfTemplateUsername = null;

  @SerializedName("pdf_template_domain")
  private String pdfTemplateDomain = null;

  @SerializedName("pdf_template_password")
  private String pdfTemplatePassword = null;

  /**
   * Flatten the result
   */
  public enum FlattenEnum {
    @SerializedName("Default")
    DEFAULT("Default"),
    
    @SerializedName("Yes")
    YES("Yes"),
    
    @SerializedName("No")
    NO("No");

    private String value;

    FlattenEnum(String value) {
      this.value = value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }
  }

  @SerializedName("flatten")
  private FlattenEnum flatten = FlattenEnum.DEFAULT;

  /**
   * Make the result read-only 
   */
  public enum ReadOnlyEnum {
    @SerializedName("Default")
    DEFAULT("Default"),
    
    @SerializedName("Yes")
    YES("Yes"),
    
    @SerializedName("No")
    NO("No");

    private String value;

    ReadOnlyEnum(String value) {
      this.value = value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }
  }

  @SerializedName("read_only")
  private ReadOnlyEnum readOnly = ReadOnlyEnum.DEFAULT;

  @SerializedName("override_settings")
  private String overrideSettings = null;

  @SerializedName("fail_on_error")
  private Boolean failOnError = true;

  public ImportFormData useAsyncPattern(Boolean useAsyncPattern) {
    this.useAsyncPattern = useAsyncPattern;
    return this;
  }

   /**
   * Use async behaviour for API request
   * @return useAsyncPattern
  **/
  @ApiModelProperty(example = "null", required = true, value = "Use async behaviour for API request")
  public Boolean getUseAsyncPattern() {
    return useAsyncPattern;
  }

  public void setUseAsyncPattern(Boolean useAsyncPattern) {
    this.useAsyncPattern = useAsyncPattern;
  }

  public ImportFormData sourceFileName(String sourceFileName) {
    this.sourceFileName = sourceFileName;
    return this;
  }

   /**
   * Name of the source file including extension
   * @return sourceFileName
  **/
  @ApiModelProperty(example = "null", required = true, value = "Name of the source file including extension")
  public String getSourceFileName() {
    return sourceFileName;
  }

  public void setSourceFileName(String sourceFileName) {
    this.sourceFileName = sourceFileName;
  }

  public ImportFormData sharepointFile(SharepointFile sharepointFile) {
    this.sharepointFile = sharepointFile;
    return this;
  }

   /**
   * Get sharepointFile
   * @return sharepointFile
  **/
  @ApiModelProperty(example = "null", value = "")
  public SharepointFile getSharepointFile() {
    return sharepointFile;
  }

  public void setSharepointFile(SharepointFile sharepointFile) {
    this.sharepointFile = sharepointFile;
  }

  public ImportFormData sourceFileContent(String sourceFileContent) {
    this.sourceFileContent = sourceFileContent;
    return this;
  }

   /**
   * Content of the file to convert
   * @return sourceFileContent
  **/
  @ApiModelProperty(example = "null", required = true, value = "Content of the file to convert")
  public String getSourceFileContent() {
    return sourceFileContent;
  }

  public void setSourceFileContent(String sourceFileContent) {
    this.sourceFileContent = sourceFileContent;
  }

  public ImportFormData copyMetadata(Boolean copyMetadata) {
    this.copyMetadata = copyMetadata;
    return this;
  }

   /**
   * Copy metadata (Only for SharePoint operations)
   * @return copyMetadata
  **/
  @ApiModelProperty(example = "null", required = true, value = "Copy metadata (Only for SharePoint operations)")
  public Boolean getCopyMetadata() {
    return copyMetadata;
  }

  public void setCopyMetadata(Boolean copyMetadata) {
    this.copyMetadata = copyMetadata;
  }

  public ImportFormData pdfTemplateFileContent(String pdfTemplateFileContent) {
    this.pdfTemplateFileContent = pdfTemplateFileContent;
    return this;
  }

   /**
   * Content of the PDF Form file
   * @return pdfTemplateFileContent
  **/
  @ApiModelProperty(example = "null", value = "Content of the PDF Form file")
  public String getPdfTemplateFileContent() {
    return pdfTemplateFileContent;
  }

  public void setPdfTemplateFileContent(String pdfTemplateFileContent) {
    this.pdfTemplateFileContent = pdfTemplateFileContent;
  }

  public ImportFormData pdfTemplateUrl(String pdfTemplateUrl) {
    this.pdfTemplateUrl = pdfTemplateUrl;
    return this;
  }

   /**
   * URL of the PDF Form
   * @return pdfTemplateUrl
  **/
  @ApiModelProperty(example = "null", value = "URL of the PDF Form")
  public String getPdfTemplateUrl() {
    return pdfTemplateUrl;
  }

  public void setPdfTemplateUrl(String pdfTemplateUrl) {
    this.pdfTemplateUrl = pdfTemplateUrl;
  }

  public ImportFormData pdfTemplateUsername(String pdfTemplateUsername) {
    this.pdfTemplateUsername = pdfTemplateUsername;
    return this;
  }

   /**
   * Username to access PDF Form URL
   * @return pdfTemplateUsername
  **/
  @ApiModelProperty(example = "null", value = "Username to access PDF Form URL")
  public String getPdfTemplateUsername() {
    return pdfTemplateUsername;
  }

  public void setPdfTemplateUsername(String pdfTemplateUsername) {
    this.pdfTemplateUsername = pdfTemplateUsername;
  }

  public ImportFormData pdfTemplateDomain(String pdfTemplateDomain) {
    this.pdfTemplateDomain = pdfTemplateDomain;
    return this;
  }

   /**
   * Domain for Username to access PDF Form URL
   * @return pdfTemplateDomain
  **/
  @ApiModelProperty(example = "null", value = "Domain for Username to access PDF Form URL")
  public String getPdfTemplateDomain() {
    return pdfTemplateDomain;
  }

  public void setPdfTemplateDomain(String pdfTemplateDomain) {
    this.pdfTemplateDomain = pdfTemplateDomain;
  }

  public ImportFormData pdfTemplatePassword(String pdfTemplatePassword) {
    this.pdfTemplatePassword = pdfTemplatePassword;
    return this;
  }

   /**
   * Password to access PDF Form URL
   * @return pdfTemplatePassword
  **/
  @ApiModelProperty(example = "null", value = "Password to access PDF Form URL")
  public String getPdfTemplatePassword() {
    return pdfTemplatePassword;
  }

  public void setPdfTemplatePassword(String pdfTemplatePassword) {
    this.pdfTemplatePassword = pdfTemplatePassword;
  }

  public ImportFormData flatten(FlattenEnum flatten) {
    this.flatten = flatten;
    return this;
  }

   /**
   * Flatten the result
   * @return flatten
  **/
  @ApiModelProperty(example = "null", value = "Flatten the result")
  public FlattenEnum getFlatten() {
    return flatten;
  }

  public void setFlatten(FlattenEnum flatten) {
    this.flatten = flatten;
  }

  public ImportFormData readOnly(ReadOnlyEnum readOnly) {
    this.readOnly = readOnly;
    return this;
  }

   /**
   * Make the result read-only 
   * @return readOnly
  **/
  @ApiModelProperty(example = "null", value = "Make the result read-only ")
  public ReadOnlyEnum getReadOnly() {
    return readOnly;
  }

  public void setReadOnly(ReadOnlyEnum readOnly) {
    this.readOnly = readOnly;
  }

  public ImportFormData overrideSettings(String overrideSettings) {
    this.overrideSettings = overrideSettings;
    return this;
  }

   /**
   * Optional settings using Muhimbi's XML syntax
   * @return overrideSettings
  **/
  @ApiModelProperty(example = "null", value = "Optional settings using Muhimbi's XML syntax")
  public String getOverrideSettings() {
    return overrideSettings;
  }

  public void setOverrideSettings(String overrideSettings) {
    this.overrideSettings = overrideSettings;
  }

  public ImportFormData failOnError(Boolean failOnError) {
    this.failOnError = failOnError;
    return this;
  }

   /**
   * Fail on error
   * @return failOnError
  **/
  @ApiModelProperty(example = "null", value = "Fail on error")
  public Boolean getFailOnError() {
    return failOnError;
  }

  public void setFailOnError(Boolean failOnError) {
    this.failOnError = failOnError;
  }


  @Override
  public boolean equals(java.lang.Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    ImportFormData importFormData = (ImportFormData) o;
    return Objects.equals(this.useAsyncPattern, importFormData.useAsyncPattern) &&
        Objects.equals(this.sourceFileName, importFormData.sourceFileName) &&
        Objects.equals(this.sharepointFile, importFormData.sharepointFile) &&
        Objects.equals(this.sourceFileContent, importFormData.sourceFileContent) &&
        Objects.equals(this.copyMetadata, importFormData.copyMetadata) &&
        Objects.equals(this.pdfTemplateFileContent, importFormData.pdfTemplateFileContent) &&
        Objects.equals(this.pdfTemplateUrl, importFormData.pdfTemplateUrl) &&
        Objects.equals(this.pdfTemplateUsername, importFormData.pdfTemplateUsername) &&
        Objects.equals(this.pdfTemplateDomain, importFormData.pdfTemplateDomain) &&
        Objects.equals(this.pdfTemplatePassword, importFormData.pdfTemplatePassword) &&
        Objects.equals(this.flatten, importFormData.flatten) &&
        Objects.equals(this.readOnly, importFormData.readOnly) &&
        Objects.equals(this.overrideSettings, importFormData.overrideSettings) &&
        Objects.equals(this.failOnError, importFormData.failOnError);
  }

  @Override
  public int hashCode() {
    return Objects.hash(useAsyncPattern, sourceFileName, sharepointFile, sourceFileContent, copyMetadata, pdfTemplateFileContent, pdfTemplateUrl, pdfTemplateUsername, pdfTemplateDomain, pdfTemplatePassword, flatten, readOnly, overrideSettings, failOnError);
  }


  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class ImportFormData {\n");
    
    sb.append("    useAsyncPattern: ").append(toIndentedString(useAsyncPattern)).append("\n");
    sb.append("    sourceFileName: ").append(toIndentedString(sourceFileName)).append("\n");
    sb.append("    sharepointFile: ").append(toIndentedString(sharepointFile)).append("\n");
    sb.append("    sourceFileContent: ").append(toIndentedString(sourceFileContent)).append("\n");
    sb.append("    copyMetadata: ").append(toIndentedString(copyMetadata)).append("\n");
    sb.append("    pdfTemplateFileContent: ").append(toIndentedString(pdfTemplateFileContent)).append("\n");
    sb.append("    pdfTemplateUrl: ").append(toIndentedString(pdfTemplateUrl)).append("\n");
    sb.append("    pdfTemplateUsername: ").append(toIndentedString(pdfTemplateUsername)).append("\n");
    sb.append("    pdfTemplateDomain: ").append(toIndentedString(pdfTemplateDomain)).append("\n");
    sb.append("    pdfTemplatePassword: ").append(toIndentedString(pdfTemplatePassword)).append("\n");
    sb.append("    flatten: ").append(toIndentedString(flatten)).append("\n");
    sb.append("    readOnly: ").append(toIndentedString(readOnly)).append("\n");
    sb.append("    overrideSettings: ").append(toIndentedString(overrideSettings)).append("\n");
    sb.append("    failOnError: ").append(toIndentedString(failOnError)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(java.lang.Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }
  
}

