/*
 * Muhimbi PDF
 * Convert, Merge, Watermark, Secure and OCR files.
 *
 * OpenAPI spec version: 9.16
 * Contact: support@muhimbi.com
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */


package com.muhimbi.online.client.model;

import java.util.Objects;
import com.google.gson.annotations.SerializedName;
import com.muhimbi.online.client.model.SharepointFile;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;

/**
 * Parameters for Convert Excel operation
 */
@ApiModel(description = "Parameters for Convert Excel operation")
@javax.annotation.Generated(value = "io.swagger.codegen.languages.JavaClientCodegen", date = "2022-05-17T15:20:03.344+01:00")
public class ConvertExcelData {
  @SerializedName("use_async_pattern")
  private Boolean useAsyncPattern = false;

  @SerializedName("source_file_name")
  private String sourceFileName = null;

  @SerializedName("sharepoint_file")
  private SharepointFile sharepointFile = null;

  @SerializedName("source_file_content")
  private String sourceFileContent = null;

  /**
   * Output format
   */
  public enum OutputFormatEnum {
    @SerializedName("PDF")
    PDF("PDF"),
    
    @SerializedName("XPS")
    XPS("XPS"),
    
    @SerializedName("DOCX")
    DOCX("DOCX"),
    
    @SerializedName("DOC")
    DOC("DOC"),
    
    @SerializedName("ODT")
    ODT("ODT"),
    
    @SerializedName("RTF")
    RTF("RTF"),
    
    @SerializedName("TXT")
    TXT("TXT"),
    
    @SerializedName("MHT")
    MHT("MHT"),
    
    @SerializedName("HTML")
    HTML("HTML"),
    
    @SerializedName("XML")
    XML("XML"),
    
    @SerializedName("XLS")
    XLS("XLS"),
    
    @SerializedName("XLSX")
    XLSX("XLSX"),
    
    @SerializedName("CSV")
    CSV("CSV"),
    
    @SerializedName("ODS")
    ODS("ODS");

    private String value;

    OutputFormatEnum(String value) {
      this.value = value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }
  }

  @SerializedName("output_format")
  private OutputFormatEnum outputFormat = OutputFormatEnum.PDF;

  @SerializedName("copy_metadata")
  private Boolean copyMetadata = false;

  /**
   * Specify which parts of the document to process
   */
  public enum RangeEnum {
    @SerializedName("VisibleDocuments")
    VISIBLEDOCUMENTS("VisibleDocuments"),
    
    @SerializedName("AllDocuments")
    ALLDOCUMENTS("AllDocuments"),
    
    @SerializedName("ActiveDocuments")
    ACTIVEDOCUMENTS("ActiveDocuments");

    private String value;

    RangeEnum(String value) {
      this.value = value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }
  }

  @SerializedName("range")
  private RangeEnum range = null;

  @SerializedName("unhide_all_rows")
  private Boolean unhideAllRows = false;

  @SerializedName("unhide_all_columns")
  private Boolean unhideAllColumns = false;

  @SerializedName("fit_to_pages_wide")
  private Integer fitToPagesWide = null;

  @SerializedName("fit_to_pages_tall")
  private Integer fitToPagesTall = null;

  @SerializedName("start_page")
  private Integer startPage = null;

  @SerializedName("end_page")
  private Integer endPage = null;

  /**
   * Quality of the output file
   */
  public enum QualityEnum {
    @SerializedName("OptimizeForPrint")
    OPTIMIZEFORPRINT("OptimizeForPrint"),
    
    @SerializedName("OptimizeForOnScreen")
    OPTIMIZEFORONSCREEN("OptimizeForOnScreen"),
    
    @SerializedName("Original")
    ORIGINAL("Original");

    private String value;

    QualityEnum(String value) {
      this.value = value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }
  }

  @SerializedName("quality")
  private QualityEnum quality = null;

  @SerializedName("override_settings")
  private String overrideSettings = null;

  @SerializedName("fail_on_error")
  private Boolean failOnError = true;

  public ConvertExcelData useAsyncPattern(Boolean useAsyncPattern) {
    this.useAsyncPattern = useAsyncPattern;
    return this;
  }

   /**
   * Use async behaviour for API request
   * @return useAsyncPattern
  **/
  @ApiModelProperty(example = "null", required = true, value = "Use async behaviour for API request")
  public Boolean getUseAsyncPattern() {
    return useAsyncPattern;
  }

  public void setUseAsyncPattern(Boolean useAsyncPattern) {
    this.useAsyncPattern = useAsyncPattern;
  }

  public ConvertExcelData sourceFileName(String sourceFileName) {
    this.sourceFileName = sourceFileName;
    return this;
  }

   /**
   * Name of the source file including extension
   * @return sourceFileName
  **/
  @ApiModelProperty(example = "null", required = true, value = "Name of the source file including extension")
  public String getSourceFileName() {
    return sourceFileName;
  }

  public void setSourceFileName(String sourceFileName) {
    this.sourceFileName = sourceFileName;
  }

  public ConvertExcelData sharepointFile(SharepointFile sharepointFile) {
    this.sharepointFile = sharepointFile;
    return this;
  }

   /**
   * Get sharepointFile
   * @return sharepointFile
  **/
  @ApiModelProperty(example = "null", value = "")
  public SharepointFile getSharepointFile() {
    return sharepointFile;
  }

  public void setSharepointFile(SharepointFile sharepointFile) {
    this.sharepointFile = sharepointFile;
  }

  public ConvertExcelData sourceFileContent(String sourceFileContent) {
    this.sourceFileContent = sourceFileContent;
    return this;
  }

   /**
   * Content of the file to convert
   * @return sourceFileContent
  **/
  @ApiModelProperty(example = "null", required = true, value = "Content of the file to convert")
  public String getSourceFileContent() {
    return sourceFileContent;
  }

  public void setSourceFileContent(String sourceFileContent) {
    this.sourceFileContent = sourceFileContent;
  }

  public ConvertExcelData outputFormat(OutputFormatEnum outputFormat) {
    this.outputFormat = outputFormat;
    return this;
  }

   /**
   * Output format
   * @return outputFormat
  **/
  @ApiModelProperty(example = "null", required = true, value = "Output format")
  public OutputFormatEnum getOutputFormat() {
    return outputFormat;
  }

  public void setOutputFormat(OutputFormatEnum outputFormat) {
    this.outputFormat = outputFormat;
  }

  public ConvertExcelData copyMetadata(Boolean copyMetadata) {
    this.copyMetadata = copyMetadata;
    return this;
  }

   /**
   * Copy metadata (Only for SharePoint operations)
   * @return copyMetadata
  **/
  @ApiModelProperty(example = "null", required = true, value = "Copy metadata (Only for SharePoint operations)")
  public Boolean getCopyMetadata() {
    return copyMetadata;
  }

  public void setCopyMetadata(Boolean copyMetadata) {
    this.copyMetadata = copyMetadata;
  }

  public ConvertExcelData range(RangeEnum range) {
    this.range = range;
    return this;
  }

   /**
   * Specify which parts of the document to process
   * @return range
  **/
  @ApiModelProperty(example = "null", value = "Specify which parts of the document to process")
  public RangeEnum getRange() {
    return range;
  }

  public void setRange(RangeEnum range) {
    this.range = range;
  }

  public ConvertExcelData unhideAllRows(Boolean unhideAllRows) {
    this.unhideAllRows = unhideAllRows;
    return this;
  }

   /**
   * Specify whether you would like hidden rows to be revealed
   * @return unhideAllRows
  **/
  @ApiModelProperty(example = "null", value = "Specify whether you would like hidden rows to be revealed")
  public Boolean getUnhideAllRows() {
    return unhideAllRows;
  }

  public void setUnhideAllRows(Boolean unhideAllRows) {
    this.unhideAllRows = unhideAllRows;
  }

  public ConvertExcelData unhideAllColumns(Boolean unhideAllColumns) {
    this.unhideAllColumns = unhideAllColumns;
    return this;
  }

   /**
   * Specify whether you would like hidden columns to be revealed
   * @return unhideAllColumns
  **/
  @ApiModelProperty(example = "null", value = "Specify whether you would like hidden columns to be revealed")
  public Boolean getUnhideAllColumns() {
    return unhideAllColumns;
  }

  public void setUnhideAllColumns(Boolean unhideAllColumns) {
    this.unhideAllColumns = unhideAllColumns;
  }

  public ConvertExcelData fitToPagesWide(Integer fitToPagesWide) {
    this.fitToPagesWide = fitToPagesWide;
    return this;
  }

   /**
   * Fit all columns onto this number of pages
   * @return fitToPagesWide
  **/
  @ApiModelProperty(example = "null", value = "Fit all columns onto this number of pages")
  public Integer getFitToPagesWide() {
    return fitToPagesWide;
  }

  public void setFitToPagesWide(Integer fitToPagesWide) {
    this.fitToPagesWide = fitToPagesWide;
  }

  public ConvertExcelData fitToPagesTall(Integer fitToPagesTall) {
    this.fitToPagesTall = fitToPagesTall;
    return this;
  }

   /**
   * Fit all rows onto this number of pages
   * @return fitToPagesTall
  **/
  @ApiModelProperty(example = "null", value = "Fit all rows onto this number of pages")
  public Integer getFitToPagesTall() {
    return fitToPagesTall;
  }

  public void setFitToPagesTall(Integer fitToPagesTall) {
    this.fitToPagesTall = fitToPagesTall;
  }

  public ConvertExcelData startPage(Integer startPage) {
    this.startPage = startPage;
    return this;
  }

   /**
   * The first page to include
   * @return startPage
  **/
  @ApiModelProperty(example = "null", value = "The first page to include")
  public Integer getStartPage() {
    return startPage;
  }

  public void setStartPage(Integer startPage) {
    this.startPage = startPage;
  }

  public ConvertExcelData endPage(Integer endPage) {
    this.endPage = endPage;
    return this;
  }

   /**
   * The last page to include
   * @return endPage
  **/
  @ApiModelProperty(example = "null", value = "The last page to include")
  public Integer getEndPage() {
    return endPage;
  }

  public void setEndPage(Integer endPage) {
    this.endPage = endPage;
  }

  public ConvertExcelData quality(QualityEnum quality) {
    this.quality = quality;
    return this;
  }

   /**
   * Quality of the output file
   * @return quality
  **/
  @ApiModelProperty(example = "null", value = "Quality of the output file")
  public QualityEnum getQuality() {
    return quality;
  }

  public void setQuality(QualityEnum quality) {
    this.quality = quality;
  }

  public ConvertExcelData overrideSettings(String overrideSettings) {
    this.overrideSettings = overrideSettings;
    return this;
  }

   /**
   * Optional settings using Muhimbi's XML syntax
   * @return overrideSettings
  **/
  @ApiModelProperty(example = "null", value = "Optional settings using Muhimbi's XML syntax")
  public String getOverrideSettings() {
    return overrideSettings;
  }

  public void setOverrideSettings(String overrideSettings) {
    this.overrideSettings = overrideSettings;
  }

  public ConvertExcelData failOnError(Boolean failOnError) {
    this.failOnError = failOnError;
    return this;
  }

   /**
   * Fail on error
   * @return failOnError
  **/
  @ApiModelProperty(example = "null", value = "Fail on error")
  public Boolean getFailOnError() {
    return failOnError;
  }

  public void setFailOnError(Boolean failOnError) {
    this.failOnError = failOnError;
  }


  @Override
  public boolean equals(java.lang.Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    ConvertExcelData convertExcelData = (ConvertExcelData) o;
    return Objects.equals(this.useAsyncPattern, convertExcelData.useAsyncPattern) &&
        Objects.equals(this.sourceFileName, convertExcelData.sourceFileName) &&
        Objects.equals(this.sharepointFile, convertExcelData.sharepointFile) &&
        Objects.equals(this.sourceFileContent, convertExcelData.sourceFileContent) &&
        Objects.equals(this.outputFormat, convertExcelData.outputFormat) &&
        Objects.equals(this.copyMetadata, convertExcelData.copyMetadata) &&
        Objects.equals(this.range, convertExcelData.range) &&
        Objects.equals(this.unhideAllRows, convertExcelData.unhideAllRows) &&
        Objects.equals(this.unhideAllColumns, convertExcelData.unhideAllColumns) &&
        Objects.equals(this.fitToPagesWide, convertExcelData.fitToPagesWide) &&
        Objects.equals(this.fitToPagesTall, convertExcelData.fitToPagesTall) &&
        Objects.equals(this.startPage, convertExcelData.startPage) &&
        Objects.equals(this.endPage, convertExcelData.endPage) &&
        Objects.equals(this.quality, convertExcelData.quality) &&
        Objects.equals(this.overrideSettings, convertExcelData.overrideSettings) &&
        Objects.equals(this.failOnError, convertExcelData.failOnError);
  }

  @Override
  public int hashCode() {
    return Objects.hash(useAsyncPattern, sourceFileName, sharepointFile, sourceFileContent, outputFormat, copyMetadata, range, unhideAllRows, unhideAllColumns, fitToPagesWide, fitToPagesTall, startPage, endPage, quality, overrideSettings, failOnError);
  }


  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class ConvertExcelData {\n");
    
    sb.append("    useAsyncPattern: ").append(toIndentedString(useAsyncPattern)).append("\n");
    sb.append("    sourceFileName: ").append(toIndentedString(sourceFileName)).append("\n");
    sb.append("    sharepointFile: ").append(toIndentedString(sharepointFile)).append("\n");
    sb.append("    sourceFileContent: ").append(toIndentedString(sourceFileContent)).append("\n");
    sb.append("    outputFormat: ").append(toIndentedString(outputFormat)).append("\n");
    sb.append("    copyMetadata: ").append(toIndentedString(copyMetadata)).append("\n");
    sb.append("    range: ").append(toIndentedString(range)).append("\n");
    sb.append("    unhideAllRows: ").append(toIndentedString(unhideAllRows)).append("\n");
    sb.append("    unhideAllColumns: ").append(toIndentedString(unhideAllColumns)).append("\n");
    sb.append("    fitToPagesWide: ").append(toIndentedString(fitToPagesWide)).append("\n");
    sb.append("    fitToPagesTall: ").append(toIndentedString(fitToPagesTall)).append("\n");
    sb.append("    startPage: ").append(toIndentedString(startPage)).append("\n");
    sb.append("    endPage: ").append(toIndentedString(endPage)).append("\n");
    sb.append("    quality: ").append(toIndentedString(quality)).append("\n");
    sb.append("    overrideSettings: ").append(toIndentedString(overrideSettings)).append("\n");
    sb.append("    failOnError: ").append(toIndentedString(failOnError)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(java.lang.Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }
  
}

