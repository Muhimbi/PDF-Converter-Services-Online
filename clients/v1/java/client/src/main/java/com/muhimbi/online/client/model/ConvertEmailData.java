/*
 * Muhimbi PDF
 * Convert, Merge, Watermark, Secure and OCR files.
 *
 * OpenAPI spec version: 9.16
 * Contact: support@muhimbi.com
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */


package com.muhimbi.online.client.model;

import java.util.Objects;
import com.google.gson.annotations.SerializedName;
import com.muhimbi.online.client.model.SharepointFile;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;

/**
 * Parameters for Convert Email operation
 */
@ApiModel(description = "Parameters for Convert Email operation")
@javax.annotation.Generated(value = "io.swagger.codegen.languages.JavaClientCodegen", date = "2022-05-17T15:20:03.344+01:00")
public class ConvertEmailData {
  @SerializedName("use_async_pattern")
  private Boolean useAsyncPattern = false;

  @SerializedName("source_file_name")
  private String sourceFileName = null;

  @SerializedName("sharepoint_file")
  private SharepointFile sharepointFile = null;

  @SerializedName("source_file_content")
  private String sourceFileContent = null;

  @SerializedName("copy_metadata")
  private Boolean copyMetadata = false;

  @SerializedName("convert_attachments")
  private Boolean convertAttachments = true;

  /**
   * What to do with attachments
   */
  public enum AttachmentMergeModeEnum {
    @SerializedName("Default")
    DEFAULT("Default"),
    
    @SerializedName("Merge")
    MERGE("Merge"),
    
    @SerializedName("AttachAsPDF")
    ATTACHASPDF("AttachAsPDF"),
    
    @SerializedName("AttachOriginal")
    ATTACHORIGINAL("AttachOriginal");

    private String value;

    AttachmentMergeModeEnum(String value) {
      this.value = value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }
  }

  @SerializedName("attachment_merge_mode")
  private AttachmentMergeModeEnum attachmentMergeMode = null;

  @SerializedName("display_attachment_summary")
  private Boolean displayAttachmentSummary = true;

  /**
   * What to do with attachments which cannot be converted into PDF
   */
  public enum UnsupportedAttachmentBehaviourEnum {
    @SerializedName("Error")
    ERROR("Error"),
    
    @SerializedName("Remove")
    REMOVE("Remove"),
    
    @SerializedName("AttachOriginal")
    ATTACHORIGINAL("AttachOriginal");

    private String value;

    UnsupportedAttachmentBehaviourEnum(String value) {
      this.value = value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }
  }

  @SerializedName("unsupported_attachment_behaviour")
  private UnsupportedAttachmentBehaviourEnum unsupportedAttachmentBehaviour = UnsupportedAttachmentBehaviourEnum.ERROR;

  @SerializedName("include_attachment_types")
  private String includeAttachmentTypes = null;

  @SerializedName("exclude_attachment_types")
  private String excludeAttachmentTypes = null;

  @SerializedName("viewport_Size")
  private String viewportSize = "Paper";

  /**
   * Paper size for the output
   */
  public enum PaperSizeEnum {
    @SerializedName("A3")
    A3("A3"),
    
    @SerializedName("A4")
    A4("A4"),
    
    @SerializedName("A5")
    A5("A5"),
    
    @SerializedName("Legal")
    LEGAL("Legal"),
    
    @SerializedName("Letter")
    LETTER("Letter"),
    
    @SerializedName("Custom")
    CUSTOM("Custom");

    private String value;

    PaperSizeEnum(String value) {
      this.value = value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }
  }

  @SerializedName("paper_size")
  private PaperSizeEnum paperSize = PaperSizeEnum.LETTER;

  @SerializedName("paper_size_custom")
  private String paperSizeCustom = null;

  @SerializedName("page_margins")
  private String pageMargins = "0.5,0.5,0.5,0.5";

  @SerializedName("break_merge_on_error")
  private Boolean breakMergeOnError = null;

  @SerializedName("minimum_image_attachment_dimension")
  private Integer minimumImageAttachmentDimension = 150;

  @SerializedName("enable_offline_mode")
  private Boolean enableOfflineMode = false;

  @SerializedName("start_page")
  private Integer startPage = null;

  @SerializedName("end_page")
  private Integer endPage = null;

  /**
   * Quality of the output file
   */
  public enum QualityEnum {
    @SerializedName("OptimizeForPrint")
    OPTIMIZEFORPRINT("OptimizeForPrint"),
    
    @SerializedName("OptimizeForOnScreen")
    OPTIMIZEFORONSCREEN("OptimizeForOnScreen"),
    
    @SerializedName("Original")
    ORIGINAL("Original");

    private String value;

    QualityEnum(String value) {
      this.value = value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }
  }

  @SerializedName("quality")
  private QualityEnum quality = null;

  @SerializedName("override_settings")
  private String overrideSettings = null;

  @SerializedName("fail_on_error")
  private Boolean failOnError = true;

  public ConvertEmailData useAsyncPattern(Boolean useAsyncPattern) {
    this.useAsyncPattern = useAsyncPattern;
    return this;
  }

   /**
   * Use async behaviour for API request
   * @return useAsyncPattern
  **/
  @ApiModelProperty(example = "null", required = true, value = "Use async behaviour for API request")
  public Boolean getUseAsyncPattern() {
    return useAsyncPattern;
  }

  public void setUseAsyncPattern(Boolean useAsyncPattern) {
    this.useAsyncPattern = useAsyncPattern;
  }

  public ConvertEmailData sourceFileName(String sourceFileName) {
    this.sourceFileName = sourceFileName;
    return this;
  }

   /**
   * Name of the source file including extension
   * @return sourceFileName
  **/
  @ApiModelProperty(example = "null", required = true, value = "Name of the source file including extension")
  public String getSourceFileName() {
    return sourceFileName;
  }

  public void setSourceFileName(String sourceFileName) {
    this.sourceFileName = sourceFileName;
  }

  public ConvertEmailData sharepointFile(SharepointFile sharepointFile) {
    this.sharepointFile = sharepointFile;
    return this;
  }

   /**
   * Get sharepointFile
   * @return sharepointFile
  **/
  @ApiModelProperty(example = "null", value = "")
  public SharepointFile getSharepointFile() {
    return sharepointFile;
  }

  public void setSharepointFile(SharepointFile sharepointFile) {
    this.sharepointFile = sharepointFile;
  }

  public ConvertEmailData sourceFileContent(String sourceFileContent) {
    this.sourceFileContent = sourceFileContent;
    return this;
  }

   /**
   * Content of the file to convert
   * @return sourceFileContent
  **/
  @ApiModelProperty(example = "null", required = true, value = "Content of the file to convert")
  public String getSourceFileContent() {
    return sourceFileContent;
  }

  public void setSourceFileContent(String sourceFileContent) {
    this.sourceFileContent = sourceFileContent;
  }

  public ConvertEmailData copyMetadata(Boolean copyMetadata) {
    this.copyMetadata = copyMetadata;
    return this;
  }

   /**
   * Copy metadata (Only for SharePoint operations)
   * @return copyMetadata
  **/
  @ApiModelProperty(example = "null", required = true, value = "Copy metadata (Only for SharePoint operations)")
  public Boolean getCopyMetadata() {
    return copyMetadata;
  }

  public void setCopyMetadata(Boolean copyMetadata) {
    this.copyMetadata = copyMetadata;
  }

  public ConvertEmailData convertAttachments(Boolean convertAttachments) {
    this.convertAttachments = convertAttachments;
    return this;
  }

   /**
   * Include attachments
   * @return convertAttachments
  **/
  @ApiModelProperty(example = "null", value = "Include attachments")
  public Boolean getConvertAttachments() {
    return convertAttachments;
  }

  public void setConvertAttachments(Boolean convertAttachments) {
    this.convertAttachments = convertAttachments;
  }

  public ConvertEmailData attachmentMergeMode(AttachmentMergeModeEnum attachmentMergeMode) {
    this.attachmentMergeMode = attachmentMergeMode;
    return this;
  }

   /**
   * What to do with attachments
   * @return attachmentMergeMode
  **/
  @ApiModelProperty(example = "null", value = "What to do with attachments")
  public AttachmentMergeModeEnum getAttachmentMergeMode() {
    return attachmentMergeMode;
  }

  public void setAttachmentMergeMode(AttachmentMergeModeEnum attachmentMergeMode) {
    this.attachmentMergeMode = attachmentMergeMode;
  }

  public ConvertEmailData displayAttachmentSummary(Boolean displayAttachmentSummary) {
    this.displayAttachmentSummary = displayAttachmentSummary;
    return this;
  }

   /**
   * Display attachment name in the email header
   * @return displayAttachmentSummary
  **/
  @ApiModelProperty(example = "null", value = "Display attachment name in the email header")
  public Boolean getDisplayAttachmentSummary() {
    return displayAttachmentSummary;
  }

  public void setDisplayAttachmentSummary(Boolean displayAttachmentSummary) {
    this.displayAttachmentSummary = displayAttachmentSummary;
  }

  public ConvertEmailData unsupportedAttachmentBehaviour(UnsupportedAttachmentBehaviourEnum unsupportedAttachmentBehaviour) {
    this.unsupportedAttachmentBehaviour = unsupportedAttachmentBehaviour;
    return this;
  }

   /**
   * What to do with attachments which cannot be converted into PDF
   * @return unsupportedAttachmentBehaviour
  **/
  @ApiModelProperty(example = "null", value = "What to do with attachments which cannot be converted into PDF")
  public UnsupportedAttachmentBehaviourEnum getUnsupportedAttachmentBehaviour() {
    return unsupportedAttachmentBehaviour;
  }

  public void setUnsupportedAttachmentBehaviour(UnsupportedAttachmentBehaviourEnum unsupportedAttachmentBehaviour) {
    this.unsupportedAttachmentBehaviour = unsupportedAttachmentBehaviour;
  }

  public ConvertEmailData includeAttachmentTypes(String includeAttachmentTypes) {
    this.includeAttachmentTypes = includeAttachmentTypes;
    return this;
  }

   /**
   * Comma separated values, e.g. *.txt, June???.docx
   * @return includeAttachmentTypes
  **/
  @ApiModelProperty(example = "null", value = "Comma separated values, e.g. *.txt, June???.docx")
  public String getIncludeAttachmentTypes() {
    return includeAttachmentTypes;
  }

  public void setIncludeAttachmentTypes(String includeAttachmentTypes) {
    this.includeAttachmentTypes = includeAttachmentTypes;
  }

  public ConvertEmailData excludeAttachmentTypes(String excludeAttachmentTypes) {
    this.excludeAttachmentTypes = excludeAttachmentTypes;
    return this;
  }

   /**
   * Comma separated values, e.g. *.txt, June???.docx
   * @return excludeAttachmentTypes
  **/
  @ApiModelProperty(example = "null", value = "Comma separated values, e.g. *.txt, June???.docx")
  public String getExcludeAttachmentTypes() {
    return excludeAttachmentTypes;
  }

  public void setExcludeAttachmentTypes(String excludeAttachmentTypes) {
    this.excludeAttachmentTypes = excludeAttachmentTypes;
  }

  public ConvertEmailData viewportSize(String viewportSize) {
    this.viewportSize = viewportSize;
    return this;
  }

   /**
   * Specify the viewport size for the conversion in pixels. E.g. 1024x768
   * @return viewportSize
  **/
  @ApiModelProperty(example = "null", value = "Specify the viewport size for the conversion in pixels. E.g. 1024x768")
  public String getViewportSize() {
    return viewportSize;
  }

  public void setViewportSize(String viewportSize) {
    this.viewportSize = viewportSize;
  }

  public ConvertEmailData paperSize(PaperSizeEnum paperSize) {
    this.paperSize = paperSize;
    return this;
  }

   /**
   * Paper size for the output
   * @return paperSize
  **/
  @ApiModelProperty(example = "null", value = "Paper size for the output")
  public PaperSizeEnum getPaperSize() {
    return paperSize;
  }

  public void setPaperSize(PaperSizeEnum paperSize) {
    this.paperSize = paperSize;
  }

  public ConvertEmailData paperSizeCustom(String paperSizeCustom) {
    this.paperSizeCustom = paperSizeCustom;
    return this;
  }

   /**
   * Applicable if 'Paper size' is set to 'Custom'
   * @return paperSizeCustom
  **/
  @ApiModelProperty(example = "null", value = "Applicable if 'Paper size' is set to 'Custom'")
  public String getPaperSizeCustom() {
    return paperSizeCustom;
  }

  public void setPaperSizeCustom(String paperSizeCustom) {
    this.paperSizeCustom = paperSizeCustom;
  }

  public ConvertEmailData pageMargins(String pageMargins) {
    this.pageMargins = pageMargins;
    return this;
  }

   /**
   * E.g. '1.5cm' (for uniform) or '0.5in,0.25in,0.5in,0.25in' (for non-uniform) margins.
   * @return pageMargins
  **/
  @ApiModelProperty(example = "null", value = "E.g. '1.5cm' (for uniform) or '0.5in,0.25in,0.5in,0.25in' (for non-uniform) margins.")
  public String getPageMargins() {
    return pageMargins;
  }

  public void setPageMargins(String pageMargins) {
    this.pageMargins = pageMargins;
  }

  public ConvertEmailData breakMergeOnError(Boolean breakMergeOnError) {
    this.breakMergeOnError = breakMergeOnError;
    return this;
  }

   /**
   * How to deal with failure when converting attachments
   * @return breakMergeOnError
  **/
  @ApiModelProperty(example = "null", value = "How to deal with failure when converting attachments")
  public Boolean getBreakMergeOnError() {
    return breakMergeOnError;
  }

  public void setBreakMergeOnError(Boolean breakMergeOnError) {
    this.breakMergeOnError = breakMergeOnError;
  }

  public ConvertEmailData minimumImageAttachmentDimension(Integer minimumImageAttachmentDimension) {
    this.minimumImageAttachmentDimension = minimumImageAttachmentDimension;
    return this;
  }

   /**
   * Exclude images smaller than the specified number of pixels
   * @return minimumImageAttachmentDimension
  **/
  @ApiModelProperty(example = "null", value = "Exclude images smaller than the specified number of pixels")
  public Integer getMinimumImageAttachmentDimension() {
    return minimumImageAttachmentDimension;
  }

  public void setMinimumImageAttachmentDimension(Integer minimumImageAttachmentDimension) {
    this.minimumImageAttachmentDimension = minimumImageAttachmentDimension;
  }

  public ConvertEmailData enableOfflineMode(Boolean enableOfflineMode) {
    this.enableOfflineMode = enableOfflineMode;
    return this;
  }

   /**
   * In offline mode external resources are disabled
   * @return enableOfflineMode
  **/
  @ApiModelProperty(example = "null", value = "In offline mode external resources are disabled")
  public Boolean getEnableOfflineMode() {
    return enableOfflineMode;
  }

  public void setEnableOfflineMode(Boolean enableOfflineMode) {
    this.enableOfflineMode = enableOfflineMode;
  }

  public ConvertEmailData startPage(Integer startPage) {
    this.startPage = startPage;
    return this;
  }

   /**
   * The first page to include
   * @return startPage
  **/
  @ApiModelProperty(example = "null", value = "The first page to include")
  public Integer getStartPage() {
    return startPage;
  }

  public void setStartPage(Integer startPage) {
    this.startPage = startPage;
  }

  public ConvertEmailData endPage(Integer endPage) {
    this.endPage = endPage;
    return this;
  }

   /**
   * The last page to include
   * @return endPage
  **/
  @ApiModelProperty(example = "null", value = "The last page to include")
  public Integer getEndPage() {
    return endPage;
  }

  public void setEndPage(Integer endPage) {
    this.endPage = endPage;
  }

  public ConvertEmailData quality(QualityEnum quality) {
    this.quality = quality;
    return this;
  }

   /**
   * Quality of the output file
   * @return quality
  **/
  @ApiModelProperty(example = "null", value = "Quality of the output file")
  public QualityEnum getQuality() {
    return quality;
  }

  public void setQuality(QualityEnum quality) {
    this.quality = quality;
  }

  public ConvertEmailData overrideSettings(String overrideSettings) {
    this.overrideSettings = overrideSettings;
    return this;
  }

   /**
   * Optional settings using Muhimbi's XML syntax
   * @return overrideSettings
  **/
  @ApiModelProperty(example = "null", value = "Optional settings using Muhimbi's XML syntax")
  public String getOverrideSettings() {
    return overrideSettings;
  }

  public void setOverrideSettings(String overrideSettings) {
    this.overrideSettings = overrideSettings;
  }

  public ConvertEmailData failOnError(Boolean failOnError) {
    this.failOnError = failOnError;
    return this;
  }

   /**
   * Fail on error
   * @return failOnError
  **/
  @ApiModelProperty(example = "null", value = "Fail on error")
  public Boolean getFailOnError() {
    return failOnError;
  }

  public void setFailOnError(Boolean failOnError) {
    this.failOnError = failOnError;
  }


  @Override
  public boolean equals(java.lang.Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    ConvertEmailData convertEmailData = (ConvertEmailData) o;
    return Objects.equals(this.useAsyncPattern, convertEmailData.useAsyncPattern) &&
        Objects.equals(this.sourceFileName, convertEmailData.sourceFileName) &&
        Objects.equals(this.sharepointFile, convertEmailData.sharepointFile) &&
        Objects.equals(this.sourceFileContent, convertEmailData.sourceFileContent) &&
        Objects.equals(this.copyMetadata, convertEmailData.copyMetadata) &&
        Objects.equals(this.convertAttachments, convertEmailData.convertAttachments) &&
        Objects.equals(this.attachmentMergeMode, convertEmailData.attachmentMergeMode) &&
        Objects.equals(this.displayAttachmentSummary, convertEmailData.displayAttachmentSummary) &&
        Objects.equals(this.unsupportedAttachmentBehaviour, convertEmailData.unsupportedAttachmentBehaviour) &&
        Objects.equals(this.includeAttachmentTypes, convertEmailData.includeAttachmentTypes) &&
        Objects.equals(this.excludeAttachmentTypes, convertEmailData.excludeAttachmentTypes) &&
        Objects.equals(this.viewportSize, convertEmailData.viewportSize) &&
        Objects.equals(this.paperSize, convertEmailData.paperSize) &&
        Objects.equals(this.paperSizeCustom, convertEmailData.paperSizeCustom) &&
        Objects.equals(this.pageMargins, convertEmailData.pageMargins) &&
        Objects.equals(this.breakMergeOnError, convertEmailData.breakMergeOnError) &&
        Objects.equals(this.minimumImageAttachmentDimension, convertEmailData.minimumImageAttachmentDimension) &&
        Objects.equals(this.enableOfflineMode, convertEmailData.enableOfflineMode) &&
        Objects.equals(this.startPage, convertEmailData.startPage) &&
        Objects.equals(this.endPage, convertEmailData.endPage) &&
        Objects.equals(this.quality, convertEmailData.quality) &&
        Objects.equals(this.overrideSettings, convertEmailData.overrideSettings) &&
        Objects.equals(this.failOnError, convertEmailData.failOnError);
  }

  @Override
  public int hashCode() {
    return Objects.hash(useAsyncPattern, sourceFileName, sharepointFile, sourceFileContent, copyMetadata, convertAttachments, attachmentMergeMode, displayAttachmentSummary, unsupportedAttachmentBehaviour, includeAttachmentTypes, excludeAttachmentTypes, viewportSize, paperSize, paperSizeCustom, pageMargins, breakMergeOnError, minimumImageAttachmentDimension, enableOfflineMode, startPage, endPage, quality, overrideSettings, failOnError);
  }


  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class ConvertEmailData {\n");
    
    sb.append("    useAsyncPattern: ").append(toIndentedString(useAsyncPattern)).append("\n");
    sb.append("    sourceFileName: ").append(toIndentedString(sourceFileName)).append("\n");
    sb.append("    sharepointFile: ").append(toIndentedString(sharepointFile)).append("\n");
    sb.append("    sourceFileContent: ").append(toIndentedString(sourceFileContent)).append("\n");
    sb.append("    copyMetadata: ").append(toIndentedString(copyMetadata)).append("\n");
    sb.append("    convertAttachments: ").append(toIndentedString(convertAttachments)).append("\n");
    sb.append("    attachmentMergeMode: ").append(toIndentedString(attachmentMergeMode)).append("\n");
    sb.append("    displayAttachmentSummary: ").append(toIndentedString(displayAttachmentSummary)).append("\n");
    sb.append("    unsupportedAttachmentBehaviour: ").append(toIndentedString(unsupportedAttachmentBehaviour)).append("\n");
    sb.append("    includeAttachmentTypes: ").append(toIndentedString(includeAttachmentTypes)).append("\n");
    sb.append("    excludeAttachmentTypes: ").append(toIndentedString(excludeAttachmentTypes)).append("\n");
    sb.append("    viewportSize: ").append(toIndentedString(viewportSize)).append("\n");
    sb.append("    paperSize: ").append(toIndentedString(paperSize)).append("\n");
    sb.append("    paperSizeCustom: ").append(toIndentedString(paperSizeCustom)).append("\n");
    sb.append("    pageMargins: ").append(toIndentedString(pageMargins)).append("\n");
    sb.append("    breakMergeOnError: ").append(toIndentedString(breakMergeOnError)).append("\n");
    sb.append("    minimumImageAttachmentDimension: ").append(toIndentedString(minimumImageAttachmentDimension)).append("\n");
    sb.append("    enableOfflineMode: ").append(toIndentedString(enableOfflineMode)).append("\n");
    sb.append("    startPage: ").append(toIndentedString(startPage)).append("\n");
    sb.append("    endPage: ").append(toIndentedString(endPage)).append("\n");
    sb.append("    quality: ").append(toIndentedString(quality)).append("\n");
    sb.append("    overrideSettings: ").append(toIndentedString(overrideSettings)).append("\n");
    sb.append("    failOnError: ").append(toIndentedString(failOnError)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(java.lang.Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }
  
}

