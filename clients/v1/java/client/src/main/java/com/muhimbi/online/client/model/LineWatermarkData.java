/*
 * Muhimbi PDF
 * Convert, Merge, Watermark, Secure and OCR files.
 *
 * OpenAPI spec version: 9.14.1
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */


package com.muhimbi.online.client.model;

import java.util.Objects;
import com.google.gson.annotations.SerializedName;
import com.muhimbi.online.client.model.SharepointFile;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;

/**
 * Parameters for LineWatermark operation
 */
@ApiModel(description = "Parameters for LineWatermark operation")
@javax.annotation.Generated(value = "io.swagger.codegen.languages.JavaClientCodegen", date = "2020-12-15T15:24:28.962Z")
public class LineWatermarkData {
  @SerializedName("source_file_name")
  private String sourceFileName = null;

  @SerializedName("use_async_pattern")
  private Boolean useAsyncPattern = false;

  @SerializedName("source_file_content")
  private String sourceFileContent = null;

  /**
   * Watermark position on the page
   */
  public enum PositionEnum {
    @SerializedName("Top Left")
    TOP_LEFT("Top Left"),
    
    @SerializedName("Top Center")
    TOP_CENTER("Top Center"),
    
    @SerializedName("Top Right")
    TOP_RIGHT("Top Right"),
    
    @SerializedName("Middle Left")
    MIDDLE_LEFT("Middle Left"),
    
    @SerializedName("Middle Center")
    MIDDLE_CENTER("Middle Center"),
    
    @SerializedName("Middle Right")
    MIDDLE_RIGHT("Middle Right"),
    
    @SerializedName("Bottom Left")
    BOTTOM_LEFT("Bottom Left"),
    
    @SerializedName("Bottom Center")
    BOTTOM_CENTER("Bottom Center"),
    
    @SerializedName("Bottom Right")
    BOTTOM_RIGHT("Bottom Right"),
    
    @SerializedName("Absolute")
    ABSOLUTE("Absolute"),
    
    @SerializedName("Random")
    RANDOM("Random");

    private String value;

    PositionEnum(String value) {
      this.value = value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }
  }

  @SerializedName("position")
  private PositionEnum position = PositionEnum.MIDDLE_CENTER;

  @SerializedName("sharepoint_file")
  private SharepointFile sharepointFile = null;

  @SerializedName("x")
  private String x = null;

  @SerializedName("y")
  private String y = null;

  @SerializedName("end_x")
  private String endX = null;

  @SerializedName("end_y")
  private String endY = null;

  /**
   * Watermark layer
   */
  public enum LayerEnum {
    @SerializedName("Background")
    BACKGROUND("Background"),
    
    @SerializedName("Foreground")
    FOREGROUND("Foreground");

    private String value;

    LayerEnum(String value) {
      this.value = value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }
  }

  @SerializedName("layer")
  private LayerEnum layer = LayerEnum.FOREGROUND;

  @SerializedName("rotation")
  private String rotation = null;

  @SerializedName("opacity")
  private String opacity = "100";

  @SerializedName("line_color")
  private String lineColor = null;

  @SerializedName("line_width")
  private String lineWidth = null;

  @SerializedName("start_page")
  private Integer startPage = null;

  @SerializedName("end_page")
  private Integer endPage = null;

  @SerializedName("page_interval")
  private Integer pageInterval = null;

  /**
   * Orientation of pages the watermark applies to.
   */
  public enum PageOrientationEnum {
    @SerializedName("Portrait")
    PORTRAIT("Portrait"),
    
    @SerializedName("Landscape")
    LANDSCAPE("Landscape"),
    
    @SerializedName("Both")
    BOTH("Both");

    private String value;

    PageOrientationEnum(String value) {
      this.value = value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }
  }

  @SerializedName("page_orientation")
  private PageOrientationEnum pageOrientation = PageOrientationEnum.BOTH;

  /**
   * Tells if the watermark is only visible when the document is printed
   */
  public enum PrintOnlyEnum {
    @SerializedName("false")
    FALSE("false"),
    
    @SerializedName("true")
    TRUE("true");

    private String value;

    PrintOnlyEnum(String value) {
      this.value = value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }
  }

  @SerializedName("print_only")
  private PrintOnlyEnum printOnly = PrintOnlyEnum.FALSE;

  @SerializedName("start_section")
  private Integer startSection = null;

  @SerializedName("end_section")
  private Integer endSection = null;

  @SerializedName("page_type")
  private String pageType = null;

  @SerializedName("fail_on_error")
  private Boolean failOnError = true;

  public LineWatermarkData sourceFileName(String sourceFileName) {
    this.sourceFileName = sourceFileName;
    return this;
  }

   /**
   * Name of the source file including extension
   * @return sourceFileName
  **/
  @ApiModelProperty(example = "null", value = "Name of the source file including extension")
  public String getSourceFileName() {
    return sourceFileName;
  }

  public void setSourceFileName(String sourceFileName) {
    this.sourceFileName = sourceFileName;
  }

  public LineWatermarkData useAsyncPattern(Boolean useAsyncPattern) {
    this.useAsyncPattern = useAsyncPattern;
    return this;
  }

   /**
   * Use async behaviour for API request
   * @return useAsyncPattern
  **/
  @ApiModelProperty(example = "null", required = true, value = "Use async behaviour for API request")
  public Boolean getUseAsyncPattern() {
    return useAsyncPattern;
  }

  public void setUseAsyncPattern(Boolean useAsyncPattern) {
    this.useAsyncPattern = useAsyncPattern;
  }

  public LineWatermarkData sourceFileContent(String sourceFileContent) {
    this.sourceFileContent = sourceFileContent;
    return this;
  }

   /**
   * Content of the file to watermark
   * @return sourceFileContent
  **/
  @ApiModelProperty(example = "null", required = true, value = "Content of the file to watermark")
  public String getSourceFileContent() {
    return sourceFileContent;
  }

  public void setSourceFileContent(String sourceFileContent) {
    this.sourceFileContent = sourceFileContent;
  }

  public LineWatermarkData position(PositionEnum position) {
    this.position = position;
    return this;
  }

   /**
   * Watermark position on the page
   * @return position
  **/
  @ApiModelProperty(example = "null", required = true, value = "Watermark position on the page")
  public PositionEnum getPosition() {
    return position;
  }

  public void setPosition(PositionEnum position) {
    this.position = position;
  }

  public LineWatermarkData sharepointFile(SharepointFile sharepointFile) {
    this.sharepointFile = sharepointFile;
    return this;
  }

   /**
   * Get sharepointFile
   * @return sharepointFile
  **/
  @ApiModelProperty(example = "null", value = "")
  public SharepointFile getSharepointFile() {
    return sharepointFile;
  }

  public void setSharepointFile(SharepointFile sharepointFile) {
    this.sharepointFile = sharepointFile;
  }

  public LineWatermarkData x(String x) {
    this.x = x;
    return this;
  }

   /**
   * Start X Coordinate of the line (in Pts, 1/72 of an inch)
   * @return x
  **/
  @ApiModelProperty(example = "null", required = true, value = "Start X Coordinate of the line (in Pts, 1/72 of an inch)")
  public String getX() {
    return x;
  }

  public void setX(String x) {
    this.x = x;
  }

  public LineWatermarkData y(String y) {
    this.y = y;
    return this;
  }

   /**
   * Start Y Coordinate of the line (in Pts, 1/72 of an inch)
   * @return y
  **/
  @ApiModelProperty(example = "null", required = true, value = "Start Y Coordinate of the line (in Pts, 1/72 of an inch)")
  public String getY() {
    return y;
  }

  public void setY(String y) {
    this.y = y;
  }

  public LineWatermarkData endX(String endX) {
    this.endX = endX;
    return this;
  }

   /**
   * End X Coordinate of the line (in Pts, 1/72 of an inch)
   * @return endX
  **/
  @ApiModelProperty(example = "null", required = true, value = "End X Coordinate of the line (in Pts, 1/72 of an inch)")
  public String getEndX() {
    return endX;
  }

  public void setEndX(String endX) {
    this.endX = endX;
  }

  public LineWatermarkData endY(String endY) {
    this.endY = endY;
    return this;
  }

   /**
   * End Y Coordinate of the line (in Pts, 1/72 of an inch)
   * @return endY
  **/
  @ApiModelProperty(example = "null", required = true, value = "End Y Coordinate of the line (in Pts, 1/72 of an inch)")
  public String getEndY() {
    return endY;
  }

  public void setEndY(String endY) {
    this.endY = endY;
  }

  public LineWatermarkData layer(LayerEnum layer) {
    this.layer = layer;
    return this;
  }

   /**
   * Watermark layer
   * @return layer
  **/
  @ApiModelProperty(example = "null", value = "Watermark layer")
  public LayerEnum getLayer() {
    return layer;
  }

  public void setLayer(LayerEnum layer) {
    this.layer = layer;
  }

  public LineWatermarkData rotation(String rotation) {
    this.rotation = rotation;
    return this;
  }

   /**
   * Angle of rotation
   * @return rotation
  **/
  @ApiModelProperty(example = "null", value = "Angle of rotation")
  public String getRotation() {
    return rotation;
  }

  public void setRotation(String rotation) {
    this.rotation = rotation;
  }

  public LineWatermarkData opacity(String opacity) {
    this.opacity = opacity;
    return this;
  }

   /**
   * Opacity in % (100 is fully visible and 1 is barely visible)
   * @return opacity
  **/
  @ApiModelProperty(example = "null", value = "Opacity in % (100 is fully visible and 1 is barely visible)")
  public String getOpacity() {
    return opacity;
  }

  public void setOpacity(String opacity) {
    this.opacity = opacity;
  }

  public LineWatermarkData lineColor(String lineColor) {
    this.lineColor = lineColor;
    return this;
  }

   /**
   * Color in #RRGGBB notation
   * @return lineColor
  **/
  @ApiModelProperty(example = "null", value = "Color in #RRGGBB notation")
  public String getLineColor() {
    return lineColor;
  }

  public void setLineColor(String lineColor) {
    this.lineColor = lineColor;
  }

  public LineWatermarkData lineWidth(String lineWidth) {
    this.lineWidth = lineWidth;
    return this;
  }

   /**
   * Width of the line (in Pts, 1/72 of an inch)
   * @return lineWidth
  **/
  @ApiModelProperty(example = "null", value = "Width of the line (in Pts, 1/72 of an inch)")
  public String getLineWidth() {
    return lineWidth;
  }

  public void setLineWidth(String lineWidth) {
    this.lineWidth = lineWidth;
  }

  public LineWatermarkData startPage(Integer startPage) {
    this.startPage = startPage;
    return this;
  }

   /**
   * Number of the first page the watermark applies to
   * @return startPage
  **/
  @ApiModelProperty(example = "null", value = "Number of the first page the watermark applies to")
  public Integer getStartPage() {
    return startPage;
  }

  public void setStartPage(Integer startPage) {
    this.startPage = startPage;
  }

  public LineWatermarkData endPage(Integer endPage) {
    this.endPage = endPage;
    return this;
  }

   /**
   * Number of the last page the watermark applies to
   * @return endPage
  **/
  @ApiModelProperty(example = "null", value = "Number of the last page the watermark applies to")
  public Integer getEndPage() {
    return endPage;
  }

  public void setEndPage(Integer endPage) {
    this.endPage = endPage;
  }

  public LineWatermarkData pageInterval(Integer pageInterval) {
    this.pageInterval = pageInterval;
    return this;
  }

   /**
   * Which pages to display the watermark on (1=every page, 2=every other, etc)
   * @return pageInterval
  **/
  @ApiModelProperty(example = "null", value = "Which pages to display the watermark on (1=every page, 2=every other, etc)")
  public Integer getPageInterval() {
    return pageInterval;
  }

  public void setPageInterval(Integer pageInterval) {
    this.pageInterval = pageInterval;
  }

  public LineWatermarkData pageOrientation(PageOrientationEnum pageOrientation) {
    this.pageOrientation = pageOrientation;
    return this;
  }

   /**
   * Orientation of pages the watermark applies to.
   * @return pageOrientation
  **/
  @ApiModelProperty(example = "null", value = "Orientation of pages the watermark applies to.")
  public PageOrientationEnum getPageOrientation() {
    return pageOrientation;
  }

  public void setPageOrientation(PageOrientationEnum pageOrientation) {
    this.pageOrientation = pageOrientation;
  }

  public LineWatermarkData printOnly(PrintOnlyEnum printOnly) {
    this.printOnly = printOnly;
    return this;
  }

   /**
   * Tells if the watermark is only visible when the document is printed
   * @return printOnly
  **/
  @ApiModelProperty(example = "null", value = "Tells if the watermark is only visible when the document is printed")
  public PrintOnlyEnum getPrintOnly() {
    return printOnly;
  }

  public void setPrintOnly(PrintOnlyEnum printOnly) {
    this.printOnly = printOnly;
  }

  public LineWatermarkData startSection(Integer startSection) {
    this.startSection = startSection;
    return this;
  }

   /**
   * The first section in a Word or Excel document the watermark is visible
   * @return startSection
  **/
  @ApiModelProperty(example = "null", value = "The first section in a Word or Excel document the watermark is visible")
  public Integer getStartSection() {
    return startSection;
  }

  public void setStartSection(Integer startSection) {
    this.startSection = startSection;
  }

  public LineWatermarkData endSection(Integer endSection) {
    this.endSection = endSection;
    return this;
  }

   /**
   * The last section in a Word or Excel document the watermark is visible
   * @return endSection
  **/
  @ApiModelProperty(example = "null", value = "The last section in a Word or Excel document the watermark is visible")
  public Integer getEndSection() {
    return endSection;
  }

  public void setEndSection(Integer endSection) {
    this.endSection = endSection;
  }

  public LineWatermarkData pageType(String pageType) {
    this.pageType = pageType;
    return this;
  }

   /**
   * One or more page types for Word and Excel documents, eg. default|first|even
   * @return pageType
  **/
  @ApiModelProperty(example = "null", value = "One or more page types for Word and Excel documents, eg. default|first|even")
  public String getPageType() {
    return pageType;
  }

  public void setPageType(String pageType) {
    this.pageType = pageType;
  }

  public LineWatermarkData failOnError(Boolean failOnError) {
    this.failOnError = failOnError;
    return this;
  }

   /**
   * Fail on error
   * @return failOnError
  **/
  @ApiModelProperty(example = "null", value = "Fail on error")
  public Boolean getFailOnError() {
    return failOnError;
  }

  public void setFailOnError(Boolean failOnError) {
    this.failOnError = failOnError;
  }


  @Override
  public boolean equals(java.lang.Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    LineWatermarkData lineWatermarkData = (LineWatermarkData) o;
    return Objects.equals(this.sourceFileName, lineWatermarkData.sourceFileName) &&
        Objects.equals(this.useAsyncPattern, lineWatermarkData.useAsyncPattern) &&
        Objects.equals(this.sourceFileContent, lineWatermarkData.sourceFileContent) &&
        Objects.equals(this.position, lineWatermarkData.position) &&
        Objects.equals(this.sharepointFile, lineWatermarkData.sharepointFile) &&
        Objects.equals(this.x, lineWatermarkData.x) &&
        Objects.equals(this.y, lineWatermarkData.y) &&
        Objects.equals(this.endX, lineWatermarkData.endX) &&
        Objects.equals(this.endY, lineWatermarkData.endY) &&
        Objects.equals(this.layer, lineWatermarkData.layer) &&
        Objects.equals(this.rotation, lineWatermarkData.rotation) &&
        Objects.equals(this.opacity, lineWatermarkData.opacity) &&
        Objects.equals(this.lineColor, lineWatermarkData.lineColor) &&
        Objects.equals(this.lineWidth, lineWatermarkData.lineWidth) &&
        Objects.equals(this.startPage, lineWatermarkData.startPage) &&
        Objects.equals(this.endPage, lineWatermarkData.endPage) &&
        Objects.equals(this.pageInterval, lineWatermarkData.pageInterval) &&
        Objects.equals(this.pageOrientation, lineWatermarkData.pageOrientation) &&
        Objects.equals(this.printOnly, lineWatermarkData.printOnly) &&
        Objects.equals(this.startSection, lineWatermarkData.startSection) &&
        Objects.equals(this.endSection, lineWatermarkData.endSection) &&
        Objects.equals(this.pageType, lineWatermarkData.pageType) &&
        Objects.equals(this.failOnError, lineWatermarkData.failOnError);
  }

  @Override
  public int hashCode() {
    return Objects.hash(sourceFileName, useAsyncPattern, sourceFileContent, position, sharepointFile, x, y, endX, endY, layer, rotation, opacity, lineColor, lineWidth, startPage, endPage, pageInterval, pageOrientation, printOnly, startSection, endSection, pageType, failOnError);
  }


  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class LineWatermarkData {\n");
    
    sb.append("    sourceFileName: ").append(toIndentedString(sourceFileName)).append("\n");
    sb.append("    useAsyncPattern: ").append(toIndentedString(useAsyncPattern)).append("\n");
    sb.append("    sourceFileContent: ").append(toIndentedString(sourceFileContent)).append("\n");
    sb.append("    position: ").append(toIndentedString(position)).append("\n");
    sb.append("    sharepointFile: ").append(toIndentedString(sharepointFile)).append("\n");
    sb.append("    x: ").append(toIndentedString(x)).append("\n");
    sb.append("    y: ").append(toIndentedString(y)).append("\n");
    sb.append("    endX: ").append(toIndentedString(endX)).append("\n");
    sb.append("    endY: ").append(toIndentedString(endY)).append("\n");
    sb.append("    layer: ").append(toIndentedString(layer)).append("\n");
    sb.append("    rotation: ").append(toIndentedString(rotation)).append("\n");
    sb.append("    opacity: ").append(toIndentedString(opacity)).append("\n");
    sb.append("    lineColor: ").append(toIndentedString(lineColor)).append("\n");
    sb.append("    lineWidth: ").append(toIndentedString(lineWidth)).append("\n");
    sb.append("    startPage: ").append(toIndentedString(startPage)).append("\n");
    sb.append("    endPage: ").append(toIndentedString(endPage)).append("\n");
    sb.append("    pageInterval: ").append(toIndentedString(pageInterval)).append("\n");
    sb.append("    pageOrientation: ").append(toIndentedString(pageOrientation)).append("\n");
    sb.append("    printOnly: ").append(toIndentedString(printOnly)).append("\n");
    sb.append("    startSection: ").append(toIndentedString(startSection)).append("\n");
    sb.append("    endSection: ").append(toIndentedString(endSection)).append("\n");
    sb.append("    pageType: ").append(toIndentedString(pageType)).append("\n");
    sb.append("    failOnError: ").append(toIndentedString(failOnError)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(java.lang.Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }
  
}

