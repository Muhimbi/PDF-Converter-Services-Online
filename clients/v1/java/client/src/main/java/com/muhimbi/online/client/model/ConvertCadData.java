/*
 * Muhimbi PDF
 * Convert, Merge, Watermark, Secure and OCR files.
 *
 * OpenAPI spec version: 9.16
 * Contact: support@muhimbi.com
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */


package com.muhimbi.online.client.model;

import java.util.Objects;
import com.google.gson.annotations.SerializedName;
import com.muhimbi.online.client.model.SharepointFile;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;

/**
 * Parameters for Convert CAD operation
 */
@ApiModel(description = "Parameters for Convert CAD operation")
@javax.annotation.Generated(value = "io.swagger.codegen.languages.JavaClientCodegen", date = "2022-05-17T15:20:03.344+01:00")
public class ConvertCadData {
  @SerializedName("use_async_pattern")
  private Boolean useAsyncPattern = false;

  @SerializedName("source_file_name")
  private String sourceFileName = null;

  @SerializedName("sharepoint_file")
  private SharepointFile sharepointFile = null;

  @SerializedName("source_file_content")
  private String sourceFileContent = null;

  @SerializedName("copy_metadata")
  private Boolean copyMetadata = false;

  /**
   * Paper size for the output
   */
  public enum PaperSizeEnum {
    @SerializedName("A3")
    A3("A3"),
    
    @SerializedName("A4")
    A4("A4"),
    
    @SerializedName("A5")
    A5("A5"),
    
    @SerializedName("Legal")
    LEGAL("Legal"),
    
    @SerializedName("Letter")
    LETTER("Letter"),
    
    @SerializedName("Custom")
    CUSTOM("Custom");

    private String value;

    PaperSizeEnum(String value) {
      this.value = value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }
  }

  @SerializedName("paper_size")
  private PaperSizeEnum paperSize = PaperSizeEnum.LETTER;

  @SerializedName("paper_size_custom")
  private String paperSizeCustom = null;

  @SerializedName("page_margins")
  private String pageMargins = "0.25";

  @SerializedName("background_color")
  private String backgroundColor = "White";

  /**
   * The foreground effect or color
   */
  public enum ForegroundColorEnum {
    @SerializedName("Default")
    DEFAULT("Default"),
    
    @SerializedName("CorrectForBackground")
    CORRECTFORBACKGROUND("CorrectForBackground"),
    
    @SerializedName("Greyscale")
    GREYSCALE("Greyscale"),
    
    @SerializedName("GreyscaleDarken")
    GREYSCALEDARKEN("GreyscaleDarken"),
    
    @SerializedName("GreyscaleLighten")
    GREYSCALELIGHTEN("GreyscaleLighten"),
    
    @SerializedName("Darken")
    DARKEN("Darken"),
    
    @SerializedName("Lighten")
    LIGHTEN("Lighten"),
    
    @SerializedName("Custom")
    CUSTOM("Custom");

    private String value;

    ForegroundColorEnum(String value) {
      this.value = value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }
  }

  @SerializedName("foreground_color")
  private ForegroundColorEnum foregroundColor = ForegroundColorEnum.GREYSCALEDARKEN;

  @SerializedName("foreground_color_custom")
  private String foregroundColorCustom = null;

  /**
   * Select which layouts should be skipped
   */
  public enum EmptyLayoutDetectionModeEnum {
    @SerializedName("Default")
    DEFAULT("Default"),
    
    @SerializedName("SkipNone")
    SKIPNONE("SkipNone"),
    
    @SerializedName("SkipEmptyLayouts")
    SKIPEMPTYLAYOUTS("SkipEmptyLayouts"),
    
    @SerializedName("SkipLayoutsWithoutViewports")
    SKIPLAYOUTSWITHOUTVIEWPORTS("SkipLayoutsWithoutViewports");

    private String value;

    EmptyLayoutDetectionModeEnum(String value) {
      this.value = value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }
  }

  @SerializedName("empty_layout_detection_mode")
  private EmptyLayoutDetectionModeEnum emptyLayoutDetectionMode = EmptyLayoutDetectionModeEnum.SKIPEMPTYLAYOUTS;

  /**
   * Specify the sort order in which the layouts are converted
   */
  public enum LayoutSortOrderEnum {
    @SerializedName("Default")
    DEFAULT("Default"),
    
    @SerializedName("Ascending")
    ASCENDING("Ascending"),
    
    @SerializedName("Descending")
    DESCENDING("Descending"),
    
    @SerializedName("TabOrder")
    TABORDER("TabOrder");

    private String value;

    LayoutSortOrderEnum(String value) {
      this.value = value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }
  }

  @SerializedName("layout_sort_order")
  private LayoutSortOrderEnum layoutSortOrder = LayoutSortOrderEnum.ASCENDING;

  @SerializedName("start_page")
  private Integer startPage = null;

  @SerializedName("end_page")
  private Integer endPage = null;

  @SerializedName("override_settings")
  private String overrideSettings = null;

  @SerializedName("fail_on_error")
  private Boolean failOnError = true;

  public ConvertCadData useAsyncPattern(Boolean useAsyncPattern) {
    this.useAsyncPattern = useAsyncPattern;
    return this;
  }

   /**
   * Use async behaviour for API request
   * @return useAsyncPattern
  **/
  @ApiModelProperty(example = "null", required = true, value = "Use async behaviour for API request")
  public Boolean getUseAsyncPattern() {
    return useAsyncPattern;
  }

  public void setUseAsyncPattern(Boolean useAsyncPattern) {
    this.useAsyncPattern = useAsyncPattern;
  }

  public ConvertCadData sourceFileName(String sourceFileName) {
    this.sourceFileName = sourceFileName;
    return this;
  }

   /**
   * Name of the source file including extension
   * @return sourceFileName
  **/
  @ApiModelProperty(example = "null", required = true, value = "Name of the source file including extension")
  public String getSourceFileName() {
    return sourceFileName;
  }

  public void setSourceFileName(String sourceFileName) {
    this.sourceFileName = sourceFileName;
  }

  public ConvertCadData sharepointFile(SharepointFile sharepointFile) {
    this.sharepointFile = sharepointFile;
    return this;
  }

   /**
   * Get sharepointFile
   * @return sharepointFile
  **/
  @ApiModelProperty(example = "null", value = "")
  public SharepointFile getSharepointFile() {
    return sharepointFile;
  }

  public void setSharepointFile(SharepointFile sharepointFile) {
    this.sharepointFile = sharepointFile;
  }

  public ConvertCadData sourceFileContent(String sourceFileContent) {
    this.sourceFileContent = sourceFileContent;
    return this;
  }

   /**
   * Content of the file to convert
   * @return sourceFileContent
  **/
  @ApiModelProperty(example = "null", required = true, value = "Content of the file to convert")
  public String getSourceFileContent() {
    return sourceFileContent;
  }

  public void setSourceFileContent(String sourceFileContent) {
    this.sourceFileContent = sourceFileContent;
  }

  public ConvertCadData copyMetadata(Boolean copyMetadata) {
    this.copyMetadata = copyMetadata;
    return this;
  }

   /**
   * Copy metadata (Only for SharePoint operations)
   * @return copyMetadata
  **/
  @ApiModelProperty(example = "null", required = true, value = "Copy metadata (Only for SharePoint operations)")
  public Boolean getCopyMetadata() {
    return copyMetadata;
  }

  public void setCopyMetadata(Boolean copyMetadata) {
    this.copyMetadata = copyMetadata;
  }

  public ConvertCadData paperSize(PaperSizeEnum paperSize) {
    this.paperSize = paperSize;
    return this;
  }

   /**
   * Paper size for the output
   * @return paperSize
  **/
  @ApiModelProperty(example = "null", value = "Paper size for the output")
  public PaperSizeEnum getPaperSize() {
    return paperSize;
  }

  public void setPaperSize(PaperSizeEnum paperSize) {
    this.paperSize = paperSize;
  }

  public ConvertCadData paperSizeCustom(String paperSizeCustom) {
    this.paperSizeCustom = paperSizeCustom;
    return this;
  }

   /**
   * Applicable if 'Paper size' is set to 'Custom'
   * @return paperSizeCustom
  **/
  @ApiModelProperty(example = "null", value = "Applicable if 'Paper size' is set to 'Custom'")
  public String getPaperSizeCustom() {
    return paperSizeCustom;
  }

  public void setPaperSizeCustom(String paperSizeCustom) {
    this.paperSizeCustom = paperSizeCustom;
  }

  public ConvertCadData pageMargins(String pageMargins) {
    this.pageMargins = pageMargins;
    return this;
  }

   /**
   * E.g. '1.5cm' (for uniform) or '0.5in, 0.25in, 0.5in, 0.25in' (for non-uniform) margins
   * @return pageMargins
  **/
  @ApiModelProperty(example = "null", value = "E.g. '1.5cm' (for uniform) or '0.5in, 0.25in, 0.5in, 0.25in' (for non-uniform) margins")
  public String getPageMargins() {
    return pageMargins;
  }

  public void setPageMargins(String pageMargins) {
    this.pageMargins = pageMargins;
  }

  public ConvertCadData backgroundColor(String backgroundColor) {
    this.backgroundColor = backgroundColor;
    return this;
  }

   /**
   * .Net color name or hex color (#aarrggbb or #rrggbb)
   * @return backgroundColor
  **/
  @ApiModelProperty(example = "null", value = ".Net color name or hex color (#aarrggbb or #rrggbb)")
  public String getBackgroundColor() {
    return backgroundColor;
  }

  public void setBackgroundColor(String backgroundColor) {
    this.backgroundColor = backgroundColor;
  }

  public ConvertCadData foregroundColor(ForegroundColorEnum foregroundColor) {
    this.foregroundColor = foregroundColor;
    return this;
  }

   /**
   * The foreground effect or color
   * @return foregroundColor
  **/
  @ApiModelProperty(example = "null", value = "The foreground effect or color")
  public ForegroundColorEnum getForegroundColor() {
    return foregroundColor;
  }

  public void setForegroundColor(ForegroundColorEnum foregroundColor) {
    this.foregroundColor = foregroundColor;
  }

  public ConvertCadData foregroundColorCustom(String foregroundColorCustom) {
    this.foregroundColorCustom = foregroundColorCustom;
    return this;
  }

   /**
   * .Net color name or hex color (#aarrggbb or #rrggbb). Applicable if 'Foreground color' is set to 'Custom'
   * @return foregroundColorCustom
  **/
  @ApiModelProperty(example = "null", value = ".Net color name or hex color (#aarrggbb or #rrggbb). Applicable if 'Foreground color' is set to 'Custom'")
  public String getForegroundColorCustom() {
    return foregroundColorCustom;
  }

  public void setForegroundColorCustom(String foregroundColorCustom) {
    this.foregroundColorCustom = foregroundColorCustom;
  }

  public ConvertCadData emptyLayoutDetectionMode(EmptyLayoutDetectionModeEnum emptyLayoutDetectionMode) {
    this.emptyLayoutDetectionMode = emptyLayoutDetectionMode;
    return this;
  }

   /**
   * Select which layouts should be skipped
   * @return emptyLayoutDetectionMode
  **/
  @ApiModelProperty(example = "null", value = "Select which layouts should be skipped")
  public EmptyLayoutDetectionModeEnum getEmptyLayoutDetectionMode() {
    return emptyLayoutDetectionMode;
  }

  public void setEmptyLayoutDetectionMode(EmptyLayoutDetectionModeEnum emptyLayoutDetectionMode) {
    this.emptyLayoutDetectionMode = emptyLayoutDetectionMode;
  }

  public ConvertCadData layoutSortOrder(LayoutSortOrderEnum layoutSortOrder) {
    this.layoutSortOrder = layoutSortOrder;
    return this;
  }

   /**
   * Specify the sort order in which the layouts are converted
   * @return layoutSortOrder
  **/
  @ApiModelProperty(example = "null", value = "Specify the sort order in which the layouts are converted")
  public LayoutSortOrderEnum getLayoutSortOrder() {
    return layoutSortOrder;
  }

  public void setLayoutSortOrder(LayoutSortOrderEnum layoutSortOrder) {
    this.layoutSortOrder = layoutSortOrder;
  }

  public ConvertCadData startPage(Integer startPage) {
    this.startPage = startPage;
    return this;
  }

   /**
   * The first page to include
   * @return startPage
  **/
  @ApiModelProperty(example = "null", value = "The first page to include")
  public Integer getStartPage() {
    return startPage;
  }

  public void setStartPage(Integer startPage) {
    this.startPage = startPage;
  }

  public ConvertCadData endPage(Integer endPage) {
    this.endPage = endPage;
    return this;
  }

   /**
   * The last page to include
   * @return endPage
  **/
  @ApiModelProperty(example = "null", value = "The last page to include")
  public Integer getEndPage() {
    return endPage;
  }

  public void setEndPage(Integer endPage) {
    this.endPage = endPage;
  }

  public ConvertCadData overrideSettings(String overrideSettings) {
    this.overrideSettings = overrideSettings;
    return this;
  }

   /**
   * Optional settings using Muhimbi's XML syntax
   * @return overrideSettings
  **/
  @ApiModelProperty(example = "null", value = "Optional settings using Muhimbi's XML syntax")
  public String getOverrideSettings() {
    return overrideSettings;
  }

  public void setOverrideSettings(String overrideSettings) {
    this.overrideSettings = overrideSettings;
  }

  public ConvertCadData failOnError(Boolean failOnError) {
    this.failOnError = failOnError;
    return this;
  }

   /**
   * Fail on error
   * @return failOnError
  **/
  @ApiModelProperty(example = "null", value = "Fail on error")
  public Boolean getFailOnError() {
    return failOnError;
  }

  public void setFailOnError(Boolean failOnError) {
    this.failOnError = failOnError;
  }


  @Override
  public boolean equals(java.lang.Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    ConvertCadData convertCadData = (ConvertCadData) o;
    return Objects.equals(this.useAsyncPattern, convertCadData.useAsyncPattern) &&
        Objects.equals(this.sourceFileName, convertCadData.sourceFileName) &&
        Objects.equals(this.sharepointFile, convertCadData.sharepointFile) &&
        Objects.equals(this.sourceFileContent, convertCadData.sourceFileContent) &&
        Objects.equals(this.copyMetadata, convertCadData.copyMetadata) &&
        Objects.equals(this.paperSize, convertCadData.paperSize) &&
        Objects.equals(this.paperSizeCustom, convertCadData.paperSizeCustom) &&
        Objects.equals(this.pageMargins, convertCadData.pageMargins) &&
        Objects.equals(this.backgroundColor, convertCadData.backgroundColor) &&
        Objects.equals(this.foregroundColor, convertCadData.foregroundColor) &&
        Objects.equals(this.foregroundColorCustom, convertCadData.foregroundColorCustom) &&
        Objects.equals(this.emptyLayoutDetectionMode, convertCadData.emptyLayoutDetectionMode) &&
        Objects.equals(this.layoutSortOrder, convertCadData.layoutSortOrder) &&
        Objects.equals(this.startPage, convertCadData.startPage) &&
        Objects.equals(this.endPage, convertCadData.endPage) &&
        Objects.equals(this.overrideSettings, convertCadData.overrideSettings) &&
        Objects.equals(this.failOnError, convertCadData.failOnError);
  }

  @Override
  public int hashCode() {
    return Objects.hash(useAsyncPattern, sourceFileName, sharepointFile, sourceFileContent, copyMetadata, paperSize, paperSizeCustom, pageMargins, backgroundColor, foregroundColor, foregroundColorCustom, emptyLayoutDetectionMode, layoutSortOrder, startPage, endPage, overrideSettings, failOnError);
  }


  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class ConvertCadData {\n");
    
    sb.append("    useAsyncPattern: ").append(toIndentedString(useAsyncPattern)).append("\n");
    sb.append("    sourceFileName: ").append(toIndentedString(sourceFileName)).append("\n");
    sb.append("    sharepointFile: ").append(toIndentedString(sharepointFile)).append("\n");
    sb.append("    sourceFileContent: ").append(toIndentedString(sourceFileContent)).append("\n");
    sb.append("    copyMetadata: ").append(toIndentedString(copyMetadata)).append("\n");
    sb.append("    paperSize: ").append(toIndentedString(paperSize)).append("\n");
    sb.append("    paperSizeCustom: ").append(toIndentedString(paperSizeCustom)).append("\n");
    sb.append("    pageMargins: ").append(toIndentedString(pageMargins)).append("\n");
    sb.append("    backgroundColor: ").append(toIndentedString(backgroundColor)).append("\n");
    sb.append("    foregroundColor: ").append(toIndentedString(foregroundColor)).append("\n");
    sb.append("    foregroundColorCustom: ").append(toIndentedString(foregroundColorCustom)).append("\n");
    sb.append("    emptyLayoutDetectionMode: ").append(toIndentedString(emptyLayoutDetectionMode)).append("\n");
    sb.append("    layoutSortOrder: ").append(toIndentedString(layoutSortOrder)).append("\n");
    sb.append("    startPage: ").append(toIndentedString(startPage)).append("\n");
    sb.append("    endPage: ").append(toIndentedString(endPage)).append("\n");
    sb.append("    overrideSettings: ").append(toIndentedString(overrideSettings)).append("\n");
    sb.append("    failOnError: ").append(toIndentedString(failOnError)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(java.lang.Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }
  
}

