/*
 * Muhimbi PDF
 * Convert, Merge, Watermark, Secure and OCR files.
 *
 * OpenAPI spec version: 9.14
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */


package com.muhimbi.online.client.model;

import java.util.Objects;
import com.google.gson.annotations.SerializedName;
import com.muhimbi.online.client.model.SharepointFile;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;

/**
 * Parameters for LinearBarcodeWatermark operation
 */
@ApiModel(description = "Parameters for LinearBarcodeWatermark operation")
@javax.annotation.Generated(value = "io.swagger.codegen.languages.JavaClientCodegen", date = "2020-06-02T17:07:48.610+01:00")
public class LinearBarcodeWatermarkData {
  @SerializedName("source_file_name")
  private String sourceFileName = null;

  @SerializedName("use_async_pattern")
  private Boolean useAsyncPattern = false;

  @SerializedName("source_file_content")
  private String sourceFileContent = null;

  @SerializedName("content")
  private String content = null;

  @SerializedName("sharepoint_file")
  private SharepointFile sharepointFile = null;

  /**
   * The type of the barcode
   */
  public enum BarcodeTypeEnum {
    @SerializedName("Codabar")
    CODABAR("Codabar"),
    
    @SerializedName("Code11")
    CODE11("Code11"),
    
    @SerializedName("Code32")
    CODE32("Code32"),
    
    @SerializedName("Code39")
    CODE39("Code39"),
    
    @SerializedName("Code39Extended")
    CODE39EXTENDED("Code39Extended"),
    
    @SerializedName("Code93")
    CODE93("Code93"),
    
    @SerializedName("Code93Extended")
    CODE93EXTENDED("Code93Extended"),
    
    @SerializedName("Code128")
    CODE128("Code128"),
    
    @SerializedName("Code128A")
    CODE128A("Code128A"),
    
    @SerializedName("Code128B")
    CODE128B("Code128B"),
    
    @SerializedName("Code128C")
    CODE128C("Code128C"),
    
    @SerializedName("GS1Code128")
    GS1CODE128("GS1Code128"),
    
    @SerializedName("UPC_A")
    UPC_A("UPC_A");

    private String value;

    BarcodeTypeEnum(String value) {
      this.value = value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }
  }

  @SerializedName("barcode_type")
  private BarcodeTypeEnum barcodeType = BarcodeTypeEnum.CODABAR;

  /**
   * Flag indicating if start and stop symbols have to be encoded into the barcode or not
   */
  public enum OmitStartStopSymbolsEnum {
    @SerializedName("true")
    TRUE("true"),
    
    @SerializedName("false")
    FALSE("false");

    private String value;

    OmitStartStopSymbolsEnum(String value) {
      this.value = value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }
  }

  @SerializedName("omit_start_stop_symbols")
  private OmitStartStopSymbolsEnum omitStartStopSymbols = OmitStartStopSymbolsEnum.FALSE;

  /**
   * Flag indicating if the check digit has to be calculated or not
   */
  public enum DisableCheckdigitEnum {
    @SerializedName("true")
    TRUE("true"),
    
    @SerializedName("false")
    FALSE("false");

    private String value;

    DisableCheckdigitEnum(String value) {
      this.value = value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }
  }

  @SerializedName("disable_checkdigit")
  private DisableCheckdigitEnum disableCheckdigit = DisableCheckdigitEnum.FALSE;

  /**
   * Flag indicating if the check digit should be displayed in the barcode label or not
   */
  public enum ShowCheckdigitEnum {
    @SerializedName("true")
    TRUE("true"),
    
    @SerializedName("false")
    FALSE("false");

    private String value;

    ShowCheckdigitEnum(String value) {
      this.value = value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }
  }

  @SerializedName("show_checkdigit")
  private ShowCheckdigitEnum showCheckdigit = ShowCheckdigitEnum.FALSE;

  @SerializedName("margin")
  private String margin = null;

  @SerializedName("font_family_name")
  private String fontFamilyName = null;

  @SerializedName("font_size")
  private String fontSize = null;

  @SerializedName("font_style")
  private String fontStyle = null;

  /**
   * Placement of the barcode label
   */
  public enum LabelPlacementEnum {
    @SerializedName("Top Left")
    TOP_LEFT("Top Left"),
    
    @SerializedName("Top Center")
    TOP_CENTER("Top Center"),
    
    @SerializedName("Top Right")
    TOP_RIGHT("Top Right"),
    
    @SerializedName("None")
    NONE("None"),
    
    @SerializedName("Bottom Left")
    BOTTOM_LEFT("Bottom Left"),
    
    @SerializedName("Bottom Center")
    BOTTOM_CENTER("Bottom Center"),
    
    @SerializedName("Bottom Right")
    BOTTOM_RIGHT("Bottom Right");

    private String value;

    LabelPlacementEnum(String value) {
      this.value = value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }
  }

  @SerializedName("label_placement")
  private LabelPlacementEnum labelPlacement = LabelPlacementEnum.BOTTOM_CENTER;

  /**
   * Watermark position on the page
   */
  public enum PositionEnum {
    @SerializedName("Top Left")
    TOP_LEFT("Top Left"),
    
    @SerializedName("Top Center")
    TOP_CENTER("Top Center"),
    
    @SerializedName("Top Right")
    TOP_RIGHT("Top Right"),
    
    @SerializedName("Middle Left")
    MIDDLE_LEFT("Middle Left"),
    
    @SerializedName("Middle Center")
    MIDDLE_CENTER("Middle Center"),
    
    @SerializedName("Middle Right")
    MIDDLE_RIGHT("Middle Right"),
    
    @SerializedName("Bottom Left")
    BOTTOM_LEFT("Bottom Left"),
    
    @SerializedName("Bottom Center")
    BOTTOM_CENTER("Bottom Center"),
    
    @SerializedName("Bottom Right")
    BOTTOM_RIGHT("Bottom Right"),
    
    @SerializedName("Absolute")
    ABSOLUTE("Absolute"),
    
    @SerializedName("Random")
    RANDOM("Random");

    private String value;

    PositionEnum(String value) {
      this.value = value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }
  }

  @SerializedName("position")
  private PositionEnum position = PositionEnum.MIDDLE_CENTER;

  @SerializedName("width")
  private String width = null;

  @SerializedName("height")
  private String height = null;

  @SerializedName("x")
  private String x = null;

  @SerializedName("y")
  private String y = null;

  /**
   * Watermark layer
   */
  public enum LayerEnum {
    @SerializedName("Background")
    BACKGROUND("Background"),
    
    @SerializedName("Foreground")
    FOREGROUND("Foreground");

    private String value;

    LayerEnum(String value) {
      this.value = value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }
  }

  @SerializedName("layer")
  private LayerEnum layer = LayerEnum.FOREGROUND;

  @SerializedName("rotation")
  private String rotation = null;

  @SerializedName("opacity")
  private String opacity = "100";

  @SerializedName("fill_color")
  private String fillColor = null;

  @SerializedName("line_color")
  private String lineColor = null;

  @SerializedName("start_page")
  private Integer startPage = null;

  @SerializedName("end_page")
  private Integer endPage = null;

  @SerializedName("page_interval")
  private Integer pageInterval = null;

  /**
   * Orientation of pages the watermark applies to.
   */
  public enum PageOrientationEnum {
    @SerializedName("Portrait")
    PORTRAIT("Portrait"),
    
    @SerializedName("Landscape")
    LANDSCAPE("Landscape"),
    
    @SerializedName("Both")
    BOTH("Both");

    private String value;

    PageOrientationEnum(String value) {
      this.value = value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }
  }

  @SerializedName("page_orientation")
  private PageOrientationEnum pageOrientation = PageOrientationEnum.BOTH;

  /**
   * Tells if the watermark is only visible when the document is printed
   */
  public enum PrintOnlyEnum {
    @SerializedName("false")
    FALSE("false"),
    
    @SerializedName("true")
    TRUE("true");

    private String value;

    PrintOnlyEnum(String value) {
      this.value = value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }
  }

  @SerializedName("print_only")
  private PrintOnlyEnum printOnly = PrintOnlyEnum.FALSE;

  @SerializedName("start_section")
  private Integer startSection = null;

  @SerializedName("end_section")
  private Integer endSection = null;

  @SerializedName("page_type")
  private String pageType = null;

  @SerializedName("fail_on_error")
  private Boolean failOnError = true;

  public LinearBarcodeWatermarkData sourceFileName(String sourceFileName) {
    this.sourceFileName = sourceFileName;
    return this;
  }

   /**
   * Name of the source file including extension
   * @return sourceFileName
  **/
  @ApiModelProperty(example = "null", value = "Name of the source file including extension")
  public String getSourceFileName() {
    return sourceFileName;
  }

  public void setSourceFileName(String sourceFileName) {
    this.sourceFileName = sourceFileName;
  }

  public LinearBarcodeWatermarkData useAsyncPattern(Boolean useAsyncPattern) {
    this.useAsyncPattern = useAsyncPattern;
    return this;
  }

   /**
   * Use async behaviour for API request
   * @return useAsyncPattern
  **/
  @ApiModelProperty(example = "null", required = true, value = "Use async behaviour for API request")
  public Boolean getUseAsyncPattern() {
    return useAsyncPattern;
  }

  public void setUseAsyncPattern(Boolean useAsyncPattern) {
    this.useAsyncPattern = useAsyncPattern;
  }

  public LinearBarcodeWatermarkData sourceFileContent(String sourceFileContent) {
    this.sourceFileContent = sourceFileContent;
    return this;
  }

   /**
   * Content of the file to watermark
   * @return sourceFileContent
  **/
  @ApiModelProperty(example = "null", required = true, value = "Content of the file to watermark")
  public String getSourceFileContent() {
    return sourceFileContent;
  }

  public void setSourceFileContent(String sourceFileContent) {
    this.sourceFileContent = sourceFileContent;
  }

  public LinearBarcodeWatermarkData content(String content) {
    this.content = content;
    return this;
  }

   /**
   * Data to embed in the Linear Barcode
   * @return content
  **/
  @ApiModelProperty(example = "null", required = true, value = "Data to embed in the Linear Barcode")
  public String getContent() {
    return content;
  }

  public void setContent(String content) {
    this.content = content;
  }

  public LinearBarcodeWatermarkData sharepointFile(SharepointFile sharepointFile) {
    this.sharepointFile = sharepointFile;
    return this;
  }

   /**
   * Get sharepointFile
   * @return sharepointFile
  **/
  @ApiModelProperty(example = "null", value = "")
  public SharepointFile getSharepointFile() {
    return sharepointFile;
  }

  public void setSharepointFile(SharepointFile sharepointFile) {
    this.sharepointFile = sharepointFile;
  }

  public LinearBarcodeWatermarkData barcodeType(BarcodeTypeEnum barcodeType) {
    this.barcodeType = barcodeType;
    return this;
  }

   /**
   * The type of the barcode
   * @return barcodeType
  **/
  @ApiModelProperty(example = "null", required = true, value = "The type of the barcode")
  public BarcodeTypeEnum getBarcodeType() {
    return barcodeType;
  }

  public void setBarcodeType(BarcodeTypeEnum barcodeType) {
    this.barcodeType = barcodeType;
  }

  public LinearBarcodeWatermarkData omitStartStopSymbols(OmitStartStopSymbolsEnum omitStartStopSymbols) {
    this.omitStartStopSymbols = omitStartStopSymbols;
    return this;
  }

   /**
   * Flag indicating if start and stop symbols have to be encoded into the barcode or not
   * @return omitStartStopSymbols
  **/
  @ApiModelProperty(example = "null", value = "Flag indicating if start and stop symbols have to be encoded into the barcode or not")
  public OmitStartStopSymbolsEnum getOmitStartStopSymbols() {
    return omitStartStopSymbols;
  }

  public void setOmitStartStopSymbols(OmitStartStopSymbolsEnum omitStartStopSymbols) {
    this.omitStartStopSymbols = omitStartStopSymbols;
  }

  public LinearBarcodeWatermarkData disableCheckdigit(DisableCheckdigitEnum disableCheckdigit) {
    this.disableCheckdigit = disableCheckdigit;
    return this;
  }

   /**
   * Flag indicating if the check digit has to be calculated or not
   * @return disableCheckdigit
  **/
  @ApiModelProperty(example = "null", required = true, value = "Flag indicating if the check digit has to be calculated or not")
  public DisableCheckdigitEnum getDisableCheckdigit() {
    return disableCheckdigit;
  }

  public void setDisableCheckdigit(DisableCheckdigitEnum disableCheckdigit) {
    this.disableCheckdigit = disableCheckdigit;
  }

  public LinearBarcodeWatermarkData showCheckdigit(ShowCheckdigitEnum showCheckdigit) {
    this.showCheckdigit = showCheckdigit;
    return this;
  }

   /**
   * Flag indicating if the check digit should be displayed in the barcode label or not
   * @return showCheckdigit
  **/
  @ApiModelProperty(example = "null", required = true, value = "Flag indicating if the check digit should be displayed in the barcode label or not")
  public ShowCheckdigitEnum getShowCheckdigit() {
    return showCheckdigit;
  }

  public void setShowCheckdigit(ShowCheckdigitEnum showCheckdigit) {
    this.showCheckdigit = showCheckdigit;
  }

  public LinearBarcodeWatermarkData margin(String margin) {
    this.margin = margin;
    return this;
  }

   /**
   * Margin around the barcode
   * @return margin
  **/
  @ApiModelProperty(example = "null", value = "Margin around the barcode")
  public String getMargin() {
    return margin;
  }

  public void setMargin(String margin) {
    this.margin = margin;
  }

  public LinearBarcodeWatermarkData fontFamilyName(String fontFamilyName) {
    this.fontFamilyName = fontFamilyName;
    return this;
  }

   /**
   * Name of the font, e.g. Arial, Times New Roman, Calibri
   * @return fontFamilyName
  **/
  @ApiModelProperty(example = "null", value = "Name of the font, e.g. Arial, Times New Roman, Calibri")
  public String getFontFamilyName() {
    return fontFamilyName;
  }

  public void setFontFamilyName(String fontFamilyName) {
    this.fontFamilyName = fontFamilyName;
  }

  public LinearBarcodeWatermarkData fontSize(String fontSize) {
    this.fontSize = fontSize;
    return this;
  }

   /**
   * Size of the font in Pt
   * @return fontSize
  **/
  @ApiModelProperty(example = "null", value = "Size of the font in Pt")
  public String getFontSize() {
    return fontSize;
  }

  public void setFontSize(String fontSize) {
    this.fontSize = fontSize;
  }

  public LinearBarcodeWatermarkData fontStyle(String fontStyle) {
    this.fontStyle = fontStyle;
    return this;
  }

   /**
   * One or more styles, e.g. bold|italic|underline|strikeout
   * @return fontStyle
  **/
  @ApiModelProperty(example = "null", value = "One or more styles, e.g. bold|italic|underline|strikeout")
  public String getFontStyle() {
    return fontStyle;
  }

  public void setFontStyle(String fontStyle) {
    this.fontStyle = fontStyle;
  }

  public LinearBarcodeWatermarkData labelPlacement(LabelPlacementEnum labelPlacement) {
    this.labelPlacement = labelPlacement;
    return this;
  }

   /**
   * Placement of the barcode label
   * @return labelPlacement
  **/
  @ApiModelProperty(example = "null", value = "Placement of the barcode label")
  public LabelPlacementEnum getLabelPlacement() {
    return labelPlacement;
  }

  public void setLabelPlacement(LabelPlacementEnum labelPlacement) {
    this.labelPlacement = labelPlacement;
  }

  public LinearBarcodeWatermarkData position(PositionEnum position) {
    this.position = position;
    return this;
  }

   /**
   * Watermark position on the page
   * @return position
  **/
  @ApiModelProperty(example = "null", required = true, value = "Watermark position on the page")
  public PositionEnum getPosition() {
    return position;
  }

  public void setPosition(PositionEnum position) {
    this.position = position;
  }

  public LinearBarcodeWatermarkData width(String width) {
    this.width = width;
    return this;
  }

   /**
   * Width of the watermark (in Pts, 1/72 of an inch)
   * @return width
  **/
  @ApiModelProperty(example = "null", required = true, value = "Width of the watermark (in Pts, 1/72 of an inch)")
  public String getWidth() {
    return width;
  }

  public void setWidth(String width) {
    this.width = width;
  }

  public LinearBarcodeWatermarkData height(String height) {
    this.height = height;
    return this;
  }

   /**
   * Height of the watermark (in Pts, 1/72 of an inch)
   * @return height
  **/
  @ApiModelProperty(example = "null", required = true, value = "Height of the watermark (in Pts, 1/72 of an inch)")
  public String getHeight() {
    return height;
  }

  public void setHeight(String height) {
    this.height = height;
  }

  public LinearBarcodeWatermarkData x(String x) {
    this.x = x;
    return this;
  }

   /**
   * X Coordinate of the watermark (in Pts, 1/72 of an inch)
   * @return x
  **/
  @ApiModelProperty(example = "null", value = "X Coordinate of the watermark (in Pts, 1/72 of an inch)")
  public String getX() {
    return x;
  }

  public void setX(String x) {
    this.x = x;
  }

  public LinearBarcodeWatermarkData y(String y) {
    this.y = y;
    return this;
  }

   /**
   * Y Coordinate of the watermark (in Pts, 1/72 of an inch)
   * @return y
  **/
  @ApiModelProperty(example = "null", value = "Y Coordinate of the watermark (in Pts, 1/72 of an inch)")
  public String getY() {
    return y;
  }

  public void setY(String y) {
    this.y = y;
  }

  public LinearBarcodeWatermarkData layer(LayerEnum layer) {
    this.layer = layer;
    return this;
  }

   /**
   * Watermark layer
   * @return layer
  **/
  @ApiModelProperty(example = "null", value = "Watermark layer")
  public LayerEnum getLayer() {
    return layer;
  }

  public void setLayer(LayerEnum layer) {
    this.layer = layer;
  }

  public LinearBarcodeWatermarkData rotation(String rotation) {
    this.rotation = rotation;
    return this;
  }

   /**
   * Angle of rotation
   * @return rotation
  **/
  @ApiModelProperty(example = "null", value = "Angle of rotation")
  public String getRotation() {
    return rotation;
  }

  public void setRotation(String rotation) {
    this.rotation = rotation;
  }

  public LinearBarcodeWatermarkData opacity(String opacity) {
    this.opacity = opacity;
    return this;
  }

   /**
   * Opacity in % (100 is fully visible and 1 is barely visible)
   * @return opacity
  **/
  @ApiModelProperty(example = "null", value = "Opacity in % (100 is fully visible and 1 is barely visible)")
  public String getOpacity() {
    return opacity;
  }

  public void setOpacity(String opacity) {
    this.opacity = opacity;
  }

  public LinearBarcodeWatermarkData fillColor(String fillColor) {
    this.fillColor = fillColor;
    return this;
  }

   /**
   * Color in #RRGGBB notation
   * @return fillColor
  **/
  @ApiModelProperty(example = "null", value = "Color in #RRGGBB notation")
  public String getFillColor() {
    return fillColor;
  }

  public void setFillColor(String fillColor) {
    this.fillColor = fillColor;
  }

  public LinearBarcodeWatermarkData lineColor(String lineColor) {
    this.lineColor = lineColor;
    return this;
  }

   /**
   * Color in #RRGGBB notation
   * @return lineColor
  **/
  @ApiModelProperty(example = "null", value = "Color in #RRGGBB notation")
  public String getLineColor() {
    return lineColor;
  }

  public void setLineColor(String lineColor) {
    this.lineColor = lineColor;
  }

  public LinearBarcodeWatermarkData startPage(Integer startPage) {
    this.startPage = startPage;
    return this;
  }

   /**
   * Number of the first page the watermark applies to
   * @return startPage
  **/
  @ApiModelProperty(example = "null", value = "Number of the first page the watermark applies to")
  public Integer getStartPage() {
    return startPage;
  }

  public void setStartPage(Integer startPage) {
    this.startPage = startPage;
  }

  public LinearBarcodeWatermarkData endPage(Integer endPage) {
    this.endPage = endPage;
    return this;
  }

   /**
   * Number of the last page the watermark applies to
   * @return endPage
  **/
  @ApiModelProperty(example = "null", value = "Number of the last page the watermark applies to")
  public Integer getEndPage() {
    return endPage;
  }

  public void setEndPage(Integer endPage) {
    this.endPage = endPage;
  }

  public LinearBarcodeWatermarkData pageInterval(Integer pageInterval) {
    this.pageInterval = pageInterval;
    return this;
  }

   /**
   * Which pages to display the watermark on (1=every page, 2=every other, etc)
   * @return pageInterval
  **/
  @ApiModelProperty(example = "null", value = "Which pages to display the watermark on (1=every page, 2=every other, etc)")
  public Integer getPageInterval() {
    return pageInterval;
  }

  public void setPageInterval(Integer pageInterval) {
    this.pageInterval = pageInterval;
  }

  public LinearBarcodeWatermarkData pageOrientation(PageOrientationEnum pageOrientation) {
    this.pageOrientation = pageOrientation;
    return this;
  }

   /**
   * Orientation of pages the watermark applies to.
   * @return pageOrientation
  **/
  @ApiModelProperty(example = "null", value = "Orientation of pages the watermark applies to.")
  public PageOrientationEnum getPageOrientation() {
    return pageOrientation;
  }

  public void setPageOrientation(PageOrientationEnum pageOrientation) {
    this.pageOrientation = pageOrientation;
  }

  public LinearBarcodeWatermarkData printOnly(PrintOnlyEnum printOnly) {
    this.printOnly = printOnly;
    return this;
  }

   /**
   * Tells if the watermark is only visible when the document is printed
   * @return printOnly
  **/
  @ApiModelProperty(example = "null", value = "Tells if the watermark is only visible when the document is printed")
  public PrintOnlyEnum getPrintOnly() {
    return printOnly;
  }

  public void setPrintOnly(PrintOnlyEnum printOnly) {
    this.printOnly = printOnly;
  }

  public LinearBarcodeWatermarkData startSection(Integer startSection) {
    this.startSection = startSection;
    return this;
  }

   /**
   * The first section in a Word or Excel document the watermark is visible
   * @return startSection
  **/
  @ApiModelProperty(example = "null", value = "The first section in a Word or Excel document the watermark is visible")
  public Integer getStartSection() {
    return startSection;
  }

  public void setStartSection(Integer startSection) {
    this.startSection = startSection;
  }

  public LinearBarcodeWatermarkData endSection(Integer endSection) {
    this.endSection = endSection;
    return this;
  }

   /**
   * The last section in a Word or Excel document the watermark is visible
   * @return endSection
  **/
  @ApiModelProperty(example = "null", value = "The last section in a Word or Excel document the watermark is visible")
  public Integer getEndSection() {
    return endSection;
  }

  public void setEndSection(Integer endSection) {
    this.endSection = endSection;
  }

  public LinearBarcodeWatermarkData pageType(String pageType) {
    this.pageType = pageType;
    return this;
  }

   /**
   * One or more page types for Word and Excel documents, eg. default|first|even
   * @return pageType
  **/
  @ApiModelProperty(example = "null", value = "One or more page types for Word and Excel documents, eg. default|first|even")
  public String getPageType() {
    return pageType;
  }

  public void setPageType(String pageType) {
    this.pageType = pageType;
  }

  public LinearBarcodeWatermarkData failOnError(Boolean failOnError) {
    this.failOnError = failOnError;
    return this;
  }

   /**
   * Fail on error
   * @return failOnError
  **/
  @ApiModelProperty(example = "null", value = "Fail on error")
  public Boolean getFailOnError() {
    return failOnError;
  }

  public void setFailOnError(Boolean failOnError) {
    this.failOnError = failOnError;
  }


  @Override
  public boolean equals(java.lang.Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    LinearBarcodeWatermarkData linearBarcodeWatermarkData = (LinearBarcodeWatermarkData) o;
    return Objects.equals(this.sourceFileName, linearBarcodeWatermarkData.sourceFileName) &&
        Objects.equals(this.useAsyncPattern, linearBarcodeWatermarkData.useAsyncPattern) &&
        Objects.equals(this.sourceFileContent, linearBarcodeWatermarkData.sourceFileContent) &&
        Objects.equals(this.content, linearBarcodeWatermarkData.content) &&
        Objects.equals(this.sharepointFile, linearBarcodeWatermarkData.sharepointFile) &&
        Objects.equals(this.barcodeType, linearBarcodeWatermarkData.barcodeType) &&
        Objects.equals(this.omitStartStopSymbols, linearBarcodeWatermarkData.omitStartStopSymbols) &&
        Objects.equals(this.disableCheckdigit, linearBarcodeWatermarkData.disableCheckdigit) &&
        Objects.equals(this.showCheckdigit, linearBarcodeWatermarkData.showCheckdigit) &&
        Objects.equals(this.margin, linearBarcodeWatermarkData.margin) &&
        Objects.equals(this.fontFamilyName, linearBarcodeWatermarkData.fontFamilyName) &&
        Objects.equals(this.fontSize, linearBarcodeWatermarkData.fontSize) &&
        Objects.equals(this.fontStyle, linearBarcodeWatermarkData.fontStyle) &&
        Objects.equals(this.labelPlacement, linearBarcodeWatermarkData.labelPlacement) &&
        Objects.equals(this.position, linearBarcodeWatermarkData.position) &&
        Objects.equals(this.width, linearBarcodeWatermarkData.width) &&
        Objects.equals(this.height, linearBarcodeWatermarkData.height) &&
        Objects.equals(this.x, linearBarcodeWatermarkData.x) &&
        Objects.equals(this.y, linearBarcodeWatermarkData.y) &&
        Objects.equals(this.layer, linearBarcodeWatermarkData.layer) &&
        Objects.equals(this.rotation, linearBarcodeWatermarkData.rotation) &&
        Objects.equals(this.opacity, linearBarcodeWatermarkData.opacity) &&
        Objects.equals(this.fillColor, linearBarcodeWatermarkData.fillColor) &&
        Objects.equals(this.lineColor, linearBarcodeWatermarkData.lineColor) &&
        Objects.equals(this.startPage, linearBarcodeWatermarkData.startPage) &&
        Objects.equals(this.endPage, linearBarcodeWatermarkData.endPage) &&
        Objects.equals(this.pageInterval, linearBarcodeWatermarkData.pageInterval) &&
        Objects.equals(this.pageOrientation, linearBarcodeWatermarkData.pageOrientation) &&
        Objects.equals(this.printOnly, linearBarcodeWatermarkData.printOnly) &&
        Objects.equals(this.startSection, linearBarcodeWatermarkData.startSection) &&
        Objects.equals(this.endSection, linearBarcodeWatermarkData.endSection) &&
        Objects.equals(this.pageType, linearBarcodeWatermarkData.pageType) &&
        Objects.equals(this.failOnError, linearBarcodeWatermarkData.failOnError);
  }

  @Override
  public int hashCode() {
    return Objects.hash(sourceFileName, useAsyncPattern, sourceFileContent, content, sharepointFile, barcodeType, omitStartStopSymbols, disableCheckdigit, showCheckdigit, margin, fontFamilyName, fontSize, fontStyle, labelPlacement, position, width, height, x, y, layer, rotation, opacity, fillColor, lineColor, startPage, endPage, pageInterval, pageOrientation, printOnly, startSection, endSection, pageType, failOnError);
  }


  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class LinearBarcodeWatermarkData {\n");
    
    sb.append("    sourceFileName: ").append(toIndentedString(sourceFileName)).append("\n");
    sb.append("    useAsyncPattern: ").append(toIndentedString(useAsyncPattern)).append("\n");
    sb.append("    sourceFileContent: ").append(toIndentedString(sourceFileContent)).append("\n");
    sb.append("    content: ").append(toIndentedString(content)).append("\n");
    sb.append("    sharepointFile: ").append(toIndentedString(sharepointFile)).append("\n");
    sb.append("    barcodeType: ").append(toIndentedString(barcodeType)).append("\n");
    sb.append("    omitStartStopSymbols: ").append(toIndentedString(omitStartStopSymbols)).append("\n");
    sb.append("    disableCheckdigit: ").append(toIndentedString(disableCheckdigit)).append("\n");
    sb.append("    showCheckdigit: ").append(toIndentedString(showCheckdigit)).append("\n");
    sb.append("    margin: ").append(toIndentedString(margin)).append("\n");
    sb.append("    fontFamilyName: ").append(toIndentedString(fontFamilyName)).append("\n");
    sb.append("    fontSize: ").append(toIndentedString(fontSize)).append("\n");
    sb.append("    fontStyle: ").append(toIndentedString(fontStyle)).append("\n");
    sb.append("    labelPlacement: ").append(toIndentedString(labelPlacement)).append("\n");
    sb.append("    position: ").append(toIndentedString(position)).append("\n");
    sb.append("    width: ").append(toIndentedString(width)).append("\n");
    sb.append("    height: ").append(toIndentedString(height)).append("\n");
    sb.append("    x: ").append(toIndentedString(x)).append("\n");
    sb.append("    y: ").append(toIndentedString(y)).append("\n");
    sb.append("    layer: ").append(toIndentedString(layer)).append("\n");
    sb.append("    rotation: ").append(toIndentedString(rotation)).append("\n");
    sb.append("    opacity: ").append(toIndentedString(opacity)).append("\n");
    sb.append("    fillColor: ").append(toIndentedString(fillColor)).append("\n");
    sb.append("    lineColor: ").append(toIndentedString(lineColor)).append("\n");
    sb.append("    startPage: ").append(toIndentedString(startPage)).append("\n");
    sb.append("    endPage: ").append(toIndentedString(endPage)).append("\n");
    sb.append("    pageInterval: ").append(toIndentedString(pageInterval)).append("\n");
    sb.append("    pageOrientation: ").append(toIndentedString(pageOrientation)).append("\n");
    sb.append("    printOnly: ").append(toIndentedString(printOnly)).append("\n");
    sb.append("    startSection: ").append(toIndentedString(startSection)).append("\n");
    sb.append("    endSection: ").append(toIndentedString(endSection)).append("\n");
    sb.append("    pageType: ").append(toIndentedString(pageType)).append("\n");
    sb.append("    failOnError: ").append(toIndentedString(failOnError)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(java.lang.Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }
  
}

